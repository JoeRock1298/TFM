// (c) 1992-2021 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 
// Generated by Intel(R) FPGA SDK for OpenCL(TM), Version 21.1.0 Build 173.3 Pro Edition, Copyright (c) 2021 Intel Corporation

/////////////////////////////////////////////////////////////////
// MODULE float4_SR_sys
/////////////////////////////////////////////////////////////////
module float4_SR_sys
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic [63:0] device_exception_bus,
   output logic kernel_irq,
   // AVM avm_mem_gmem_0_DDR_port_0_0_rw
   output logic avm_mem_gmem_0_DDR_port_0_0_rw_enable,
   output logic avm_mem_gmem_0_DDR_port_0_0_rw_read,
   output logic avm_mem_gmem_0_DDR_port_0_0_rw_write,
   output logic [30:0] avm_mem_gmem_0_DDR_port_0_0_rw_address,
   output logic [511:0] avm_mem_gmem_0_DDR_port_0_0_rw_writedata,
   output logic [63:0] avm_mem_gmem_0_DDR_port_0_0_rw_byteenable,
   input logic avm_mem_gmem_0_DDR_port_0_0_rw_waitrequest,
   input logic [511:0] avm_mem_gmem_0_DDR_port_0_0_rw_readdata,
   input logic avm_mem_gmem_0_DDR_port_0_0_rw_readdatavalid,
   output logic [4:0] avm_mem_gmem_0_DDR_port_0_0_rw_burstcount,
   input logic avm_mem_gmem_0_DDR_port_0_0_rw_writeack,
   // AVS cra_ring_root_avs
   input logic cra_ring_root_avs_enable,
   input logic cra_ring_root_avs_read,
   input logic cra_ring_root_avs_write,
   input logic [6:0] cra_ring_root_avs_address,
   input logic [63:0] cra_ring_root_avs_writedata,
   input logic [7:0] cra_ring_root_avs_byteenable,
   output logic cra_ring_root_avs_waitrequest,
   output logic [63:0] cra_ring_root_avs_readdata,
   output logic cra_ring_root_avs_readdatavalid
);
   logic cra_ring_node_avm_wire_0_enable;
   logic cra_ring_node_avm_wire_0_read;
   logic cra_ring_node_avm_wire_0_write;
   logic [4:0] cra_ring_node_avm_wire_0_address;
   logic [63:0] cra_ring_node_avm_wire_0_writedata;
   logic [7:0] cra_ring_node_avm_wire_0_byteenable;
   logic [63:0] cra_ring_node_avm_wire_0_readdata;
   logic cra_ring_node_avm_wire_0_readdatavalid;
   logic cra_ring_node_avm_wire_0_burstcount;
   logic kernel_irqs;
   logic gmem_avm_kernel_rd_enable [6];
   logic gmem_avm_kernel_rd_read [6];
   logic gmem_avm_kernel_rd_write [6];
   logic [30:0] gmem_avm_kernel_rd_address [6];
   logic [511:0] gmem_avm_kernel_rd_writedata [6];
   logic [63:0] gmem_avm_kernel_rd_byteenable [6];
   logic gmem_avm_kernel_rd_waitrequest [6];
   logic [511:0] gmem_avm_kernel_rd_readdata [6];
   logic gmem_avm_kernel_rd_readdatavalid [6];
   logic [4:0] gmem_avm_kernel_rd_burstcount [6];
   logic gmem_avm_kernel_rd_writeack [6];
   logic gmem_avm_kernel_wr_enable [1];
   logic gmem_avm_kernel_wr_read [1];
   logic gmem_avm_kernel_wr_write [1];
   logic [30:0] gmem_avm_kernel_wr_address [1];
   logic [511:0] gmem_avm_kernel_wr_writedata [1];
   logic [63:0] gmem_avm_kernel_wr_byteenable [1];
   logic gmem_avm_kernel_wr_waitrequest [1];
   logic [511:0] gmem_avm_kernel_wr_readdata [1];
   logic gmem_avm_kernel_wr_readdatavalid [1];
   logic [4:0] gmem_avm_kernel_wr_burstcount [1];
   logic gmem_avm_kernel_wr_writeack [1];
   logic gmem_ic_avm_enable [1];
   logic gmem_ic_avm_read [1];
   logic gmem_ic_avm_write [1];
   logic [30:0] gmem_ic_avm_address [1];
   logic [511:0] gmem_ic_avm_writedata [1];
   logic [63:0] gmem_ic_avm_byteenable [1];
   logic gmem_ic_avm_waitrequest [1];
   logic [511:0] gmem_ic_avm_readdata [1];
   logic gmem_ic_avm_readdatavalid [1];
   logic [4:0] gmem_ic_avm_burstcount [1];
   logic gmem_ic_avm_writeack [1];

   // INST conv2d1x1_std_ic_inst of conv2d1x1_std_ic_partition_wrapper
   conv2d1x1_std_ic_partition_wrapper conv2d1x1_std_ic_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_conv2d1x1(kernel_irqs),
      // AVS avs_conv2d1x1_cra
      .avs_conv2d1x1_cra_enable(cra_ring_node_avm_wire_0_enable),
      .avs_conv2d1x1_cra_read(cra_ring_node_avm_wire_0_read),
      .avs_conv2d1x1_cra_write(cra_ring_node_avm_wire_0_write),
      .avs_conv2d1x1_cra_address(cra_ring_node_avm_wire_0_address),
      .avs_conv2d1x1_cra_writedata(cra_ring_node_avm_wire_0_writedata),
      .avs_conv2d1x1_cra_byteenable(cra_ring_node_avm_wire_0_byteenable),
      .avs_conv2d1x1_cra_readdata(cra_ring_node_avm_wire_0_readdata),
      .avs_conv2d1x1_cra_readdatavalid(cra_ring_node_avm_wire_0_readdatavalid),
      // AVM conv2d1x1_0_avm_lm177_conv2d1x1
      .conv2d1x1_0_avm_lm177_conv2d1x1_enable(gmem_avm_kernel_rd_enable[0]),
      .conv2d1x1_0_avm_lm177_conv2d1x1_read(gmem_avm_kernel_rd_read[0]),
      .conv2d1x1_0_avm_lm177_conv2d1x1_write(gmem_avm_kernel_rd_write[0]),
      .conv2d1x1_0_avm_lm177_conv2d1x1_address(gmem_avm_kernel_rd_address[0]),
      .conv2d1x1_0_avm_lm177_conv2d1x1_writedata(gmem_avm_kernel_rd_writedata[0]),
      .conv2d1x1_0_avm_lm177_conv2d1x1_byteenable(gmem_avm_kernel_rd_byteenable[0]),
      .conv2d1x1_0_avm_lm177_conv2d1x1_waitrequest(gmem_avm_kernel_rd_waitrequest[0]),
      .conv2d1x1_0_avm_lm177_conv2d1x1_readdata(gmem_avm_kernel_rd_readdata[0]),
      .conv2d1x1_0_avm_lm177_conv2d1x1_readdatavalid(gmem_avm_kernel_rd_readdatavalid[0]),
      .conv2d1x1_0_avm_lm177_conv2d1x1_burstcount(gmem_avm_kernel_rd_burstcount[0]),
      .conv2d1x1_0_avm_lm177_conv2d1x1_writeack(gmem_avm_kernel_rd_writeack[0]),
      // AVM conv2d1x1_0_avm_lm178_conv2d1x1
      .conv2d1x1_0_avm_lm178_conv2d1x1_enable(gmem_avm_kernel_rd_enable[1]),
      .conv2d1x1_0_avm_lm178_conv2d1x1_read(gmem_avm_kernel_rd_read[1]),
      .conv2d1x1_0_avm_lm178_conv2d1x1_write(gmem_avm_kernel_rd_write[1]),
      .conv2d1x1_0_avm_lm178_conv2d1x1_address(gmem_avm_kernel_rd_address[1]),
      .conv2d1x1_0_avm_lm178_conv2d1x1_writedata(gmem_avm_kernel_rd_writedata[1]),
      .conv2d1x1_0_avm_lm178_conv2d1x1_byteenable(gmem_avm_kernel_rd_byteenable[1]),
      .conv2d1x1_0_avm_lm178_conv2d1x1_waitrequest(gmem_avm_kernel_rd_waitrequest[1]),
      .conv2d1x1_0_avm_lm178_conv2d1x1_readdata(gmem_avm_kernel_rd_readdata[1]),
      .conv2d1x1_0_avm_lm178_conv2d1x1_readdatavalid(gmem_avm_kernel_rd_readdatavalid[1]),
      .conv2d1x1_0_avm_lm178_conv2d1x1_burstcount(gmem_avm_kernel_rd_burstcount[1]),
      .conv2d1x1_0_avm_lm178_conv2d1x1_writeack(gmem_avm_kernel_rd_writeack[1]),
      // AVM conv2d1x1_0_avm_lm70_conv2d1x1
      .conv2d1x1_0_avm_lm70_conv2d1x1_enable(gmem_avm_kernel_rd_enable[2]),
      .conv2d1x1_0_avm_lm70_conv2d1x1_read(gmem_avm_kernel_rd_read[2]),
      .conv2d1x1_0_avm_lm70_conv2d1x1_write(gmem_avm_kernel_rd_write[2]),
      .conv2d1x1_0_avm_lm70_conv2d1x1_address(gmem_avm_kernel_rd_address[2]),
      .conv2d1x1_0_avm_lm70_conv2d1x1_writedata(gmem_avm_kernel_rd_writedata[2]),
      .conv2d1x1_0_avm_lm70_conv2d1x1_byteenable(gmem_avm_kernel_rd_byteenable[2]),
      .conv2d1x1_0_avm_lm70_conv2d1x1_waitrequest(gmem_avm_kernel_rd_waitrequest[2]),
      .conv2d1x1_0_avm_lm70_conv2d1x1_readdata(gmem_avm_kernel_rd_readdata[2]),
      .conv2d1x1_0_avm_lm70_conv2d1x1_readdatavalid(gmem_avm_kernel_rd_readdatavalid[2]),
      .conv2d1x1_0_avm_lm70_conv2d1x1_burstcount(gmem_avm_kernel_rd_burstcount[2]),
      .conv2d1x1_0_avm_lm70_conv2d1x1_writeack(gmem_avm_kernel_rd_writeack[2]),
      // AVM conv2d1x1_0_avm_lm73_conv2d1x1
      .conv2d1x1_0_avm_lm73_conv2d1x1_enable(gmem_avm_kernel_rd_enable[3]),
      .conv2d1x1_0_avm_lm73_conv2d1x1_read(gmem_avm_kernel_rd_read[3]),
      .conv2d1x1_0_avm_lm73_conv2d1x1_write(gmem_avm_kernel_rd_write[3]),
      .conv2d1x1_0_avm_lm73_conv2d1x1_address(gmem_avm_kernel_rd_address[3]),
      .conv2d1x1_0_avm_lm73_conv2d1x1_writedata(gmem_avm_kernel_rd_writedata[3]),
      .conv2d1x1_0_avm_lm73_conv2d1x1_byteenable(gmem_avm_kernel_rd_byteenable[3]),
      .conv2d1x1_0_avm_lm73_conv2d1x1_waitrequest(gmem_avm_kernel_rd_waitrequest[3]),
      .conv2d1x1_0_avm_lm73_conv2d1x1_readdata(gmem_avm_kernel_rd_readdata[3]),
      .conv2d1x1_0_avm_lm73_conv2d1x1_readdatavalid(gmem_avm_kernel_rd_readdatavalid[3]),
      .conv2d1x1_0_avm_lm73_conv2d1x1_burstcount(gmem_avm_kernel_rd_burstcount[3]),
      .conv2d1x1_0_avm_lm73_conv2d1x1_writeack(gmem_avm_kernel_rd_writeack[3]),
      // AVM conv2d1x1_0_avm_lm96_conv2d1x1
      .conv2d1x1_0_avm_lm96_conv2d1x1_enable(gmem_avm_kernel_rd_enable[4]),
      .conv2d1x1_0_avm_lm96_conv2d1x1_read(gmem_avm_kernel_rd_read[4]),
      .conv2d1x1_0_avm_lm96_conv2d1x1_write(gmem_avm_kernel_rd_write[4]),
      .conv2d1x1_0_avm_lm96_conv2d1x1_address(gmem_avm_kernel_rd_address[4]),
      .conv2d1x1_0_avm_lm96_conv2d1x1_writedata(gmem_avm_kernel_rd_writedata[4]),
      .conv2d1x1_0_avm_lm96_conv2d1x1_byteenable(gmem_avm_kernel_rd_byteenable[4]),
      .conv2d1x1_0_avm_lm96_conv2d1x1_waitrequest(gmem_avm_kernel_rd_waitrequest[4]),
      .conv2d1x1_0_avm_lm96_conv2d1x1_readdata(gmem_avm_kernel_rd_readdata[4]),
      .conv2d1x1_0_avm_lm96_conv2d1x1_readdatavalid(gmem_avm_kernel_rd_readdatavalid[4]),
      .conv2d1x1_0_avm_lm96_conv2d1x1_burstcount(gmem_avm_kernel_rd_burstcount[4]),
      .conv2d1x1_0_avm_lm96_conv2d1x1_writeack(gmem_avm_kernel_rd_writeack[4]),
      // AVM conv2d1x1_0_avm_lm_conv2d1x1
      .conv2d1x1_0_avm_lm_conv2d1x1_enable(gmem_avm_kernel_rd_enable[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_read(gmem_avm_kernel_rd_read[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_write(gmem_avm_kernel_rd_write[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_address(gmem_avm_kernel_rd_address[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_writedata(gmem_avm_kernel_rd_writedata[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_byteenable(gmem_avm_kernel_rd_byteenable[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_waitrequest(gmem_avm_kernel_rd_waitrequest[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_readdata(gmem_avm_kernel_rd_readdata[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_readdatavalid(gmem_avm_kernel_rd_readdatavalid[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_burstcount(gmem_avm_kernel_rd_burstcount[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_writeack(gmem_avm_kernel_rd_writeack[5]),
      // AVM conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1
      .conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_enable(gmem_avm_kernel_wr_enable[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_read(gmem_avm_kernel_wr_read[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_write(gmem_avm_kernel_wr_write[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_address(gmem_avm_kernel_wr_address[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_writedata(gmem_avm_kernel_wr_writedata[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_byteenable(gmem_avm_kernel_wr_byteenable[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_waitrequest(gmem_avm_kernel_wr_waitrequest[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_readdata(gmem_avm_kernel_wr_readdata[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_readdatavalid(gmem_avm_kernel_wr_readdatavalid[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_burstcount(gmem_avm_kernel_wr_burstcount[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_writeack(gmem_avm_kernel_wr_writeack[0])
   );

   assign kernel_irq = |kernel_irqs;
   // INST lsu_ic_top_gmem of lsu_ic_top
   lsu_ic_top
   #(
      .AWIDTH(31),
      .MWIDTH_BYTES(64),
      .BURST_CNT_W(5),
      .NUM_RD_PORT(6),
      .NUM_WR_PORT(1),
      .NUM_DIMM(1),
      .ENABLE_MULTIPLE_WR_RING(0),
      .ENABLE_LAST_WAIT(0),
      .NUM_REORDER(1),
      .HYPER_PIPELINE(0),
      .ENABLE_BSP_WAITREQUEST_ALLOWANCE(0),
      .ENABLE_BSP_AVMM_WRITE_ACK(0),
      .WRITE_ACK_FIFO_DEPTH(1024),
      .AVM_WRITE_DATA_LATENESS(0),
      .AVM_READ_DATA_LATENESS(0),
      .WIDE_DATA_SLICING(0),
      .ROOT_FIFO_STALL_IN_EARLINESS(0),
      .ROOT_WFIFO_VALID_IN_EARLINESS(0),
      .ALLOW_HIGH_SPEED_FIFO_USAGE(0),
      .PIPELINE_RD_RETURN(0),
      .NUM_AVM_OUTPUT_PIPE_STAGES(1),
      .ROOT_FIFO_DEPTH(512),
      .RETURN_DATA_FIFO_DEPTH(512),
      .MAX_REQUESTS_PER_LSU(4),
      .NUM_MEM_SYSTEMS(1),
      .NUM_BANKS_PER_MEM_SYSTEM({1}),
      .NUM_BANKS_W_PER_MEM_SYSTEM({1}),
      .PERMUTE_BIT_LSB_PER_MEM_SYSTEM({1}),
      .BANK_BIT_LSB_PER_MEM_SYSTEM({30}),
      .ENABLE_BANK_INTERLEAVING({0}),
      .ENABLE_SWDIMM(0),
      .LARGEST_NUM_BANKS(1),
      .ROOT_PORT_MAP('{'{0}}),
      .ROOT_ARB_BALANCED_RW(0),
      .SYNCHRONIZE_RESET(1)
   )
   lsu_ic_top_gmem
   (
      .clk(clock),
      .resetn(resetn),
      .i_rd_request(gmem_avm_kernel_rd_read),
      .i_rd_address(gmem_avm_kernel_rd_address),
      .i_rd_burstcount(gmem_avm_kernel_rd_burstcount),
      .o_rd_waitrequest(gmem_avm_kernel_rd_waitrequest),
      .o_avm_readdata(gmem_avm_kernel_rd_readdata),
      .o_avm_readdatavalid(gmem_avm_kernel_rd_readdatavalid),
      .i_wr_byteenable(gmem_avm_kernel_wr_byteenable),
      .i_wr_address(gmem_avm_kernel_wr_address),
      .i_wr_request(gmem_avm_kernel_wr_write),
      .i_wr_burstcount(gmem_avm_kernel_wr_burstcount),
      .i_wr_writedata(gmem_avm_kernel_wr_writedata),
      .o_wr_waitrequest(gmem_avm_kernel_wr_waitrequest),
      .o_avm_writeack(gmem_avm_kernel_wr_writeack),
      .i_avm_waitrequest(gmem_ic_avm_waitrequest),
      .i_avm_write_ack(gmem_ic_avm_writeack),
      .i_avm_readdata(gmem_ic_avm_readdata),
      .i_avm_readdatavalid(gmem_ic_avm_readdatavalid),
      .o_avm_byteenable(gmem_ic_avm_byteenable),
      .o_avm_address(gmem_ic_avm_address),
      .o_avm_read(gmem_ic_avm_read),
      .o_avm_write(gmem_ic_avm_write),
      .o_avm_burstcount(gmem_ic_avm_burstcount),
      .o_avm_writedata(gmem_ic_avm_writedata)
   );

   assign avm_mem_gmem_0_DDR_port_0_0_rw_read = gmem_ic_avm_read[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_write = gmem_ic_avm_write[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_burstcount = gmem_ic_avm_burstcount[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_address = gmem_ic_avm_address[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_writedata = gmem_ic_avm_writedata[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_byteenable = gmem_ic_avm_byteenable[0];
   assign gmem_ic_avm_waitrequest[0] = avm_mem_gmem_0_DDR_port_0_0_rw_waitrequest;
   assign gmem_ic_avm_readdata[0] = avm_mem_gmem_0_DDR_port_0_0_rw_readdata;
   assign gmem_ic_avm_readdatavalid[0] = avm_mem_gmem_0_DDR_port_0_0_rw_readdatavalid;
   // INST cra_ring_wrapper_inst of cra_ring_wrapper
   cra_ring_wrapper cra_ring_wrapper_inst
   (
      .clock(clock),
      .resetn(resetn),
      // AVS cra_ring_root_avs
      .cra_ring_root_avs_enable(cra_ring_root_avs_enable),
      .cra_ring_root_avs_read(cra_ring_root_avs_read),
      .cra_ring_root_avs_write(cra_ring_root_avs_write),
      .cra_ring_root_avs_address(cra_ring_root_avs_address),
      .cra_ring_root_avs_writedata(cra_ring_root_avs_writedata),
      .cra_ring_root_avs_byteenable(cra_ring_root_avs_byteenable),
      .cra_ring_root_avs_waitrequest(cra_ring_root_avs_waitrequest),
      .cra_ring_root_avs_readdata(cra_ring_root_avs_readdata),
      .cra_ring_root_avs_readdatavalid(cra_ring_root_avs_readdatavalid),
      // AVM cra_ring_avm_0
      .cra_ring_avm_0_enable(cra_ring_node_avm_wire_0_enable),
      .cra_ring_avm_0_read(cra_ring_node_avm_wire_0_read),
      .cra_ring_avm_0_write(cra_ring_node_avm_wire_0_write),
      .cra_ring_avm_0_address(cra_ring_node_avm_wire_0_address),
      .cra_ring_avm_0_writedata(cra_ring_node_avm_wire_0_writedata),
      .cra_ring_avm_0_byteenable(cra_ring_node_avm_wire_0_byteenable),
      .cra_ring_avm_0_readdata(cra_ring_node_avm_wire_0_readdata),
      .cra_ring_avm_0_readdatavalid(cra_ring_node_avm_wire_0_readdatavalid),
      .cra_ring_avm_0_burstcount(cra_ring_node_avm_wire_0_burstcount)
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE conv2d1x1_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module conv2d1x1_std_ic_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_conv2d1x1,
   // AVS avs_conv2d1x1_cra
   input logic avs_conv2d1x1_cra_enable,
   input logic avs_conv2d1x1_cra_read,
   input logic avs_conv2d1x1_cra_write,
   input logic [4:0] avs_conv2d1x1_cra_address,
   input logic [63:0] avs_conv2d1x1_cra_writedata,
   input logic [7:0] avs_conv2d1x1_cra_byteenable,
   output logic [63:0] avs_conv2d1x1_cra_readdata,
   output logic avs_conv2d1x1_cra_readdatavalid,
   // AVM conv2d1x1_0_avm_lm177_conv2d1x1
   output logic conv2d1x1_0_avm_lm177_conv2d1x1_enable,
   output logic conv2d1x1_0_avm_lm177_conv2d1x1_read,
   output logic conv2d1x1_0_avm_lm177_conv2d1x1_write,
   output logic [30:0] conv2d1x1_0_avm_lm177_conv2d1x1_address,
   output logic [511:0] conv2d1x1_0_avm_lm177_conv2d1x1_writedata,
   output logic [63:0] conv2d1x1_0_avm_lm177_conv2d1x1_byteenable,
   input logic conv2d1x1_0_avm_lm177_conv2d1x1_waitrequest,
   input logic [511:0] conv2d1x1_0_avm_lm177_conv2d1x1_readdata,
   input logic conv2d1x1_0_avm_lm177_conv2d1x1_readdatavalid,
   output logic [4:0] conv2d1x1_0_avm_lm177_conv2d1x1_burstcount,
   input logic conv2d1x1_0_avm_lm177_conv2d1x1_writeack,
   // AVM conv2d1x1_0_avm_lm178_conv2d1x1
   output logic conv2d1x1_0_avm_lm178_conv2d1x1_enable,
   output logic conv2d1x1_0_avm_lm178_conv2d1x1_read,
   output logic conv2d1x1_0_avm_lm178_conv2d1x1_write,
   output logic [30:0] conv2d1x1_0_avm_lm178_conv2d1x1_address,
   output logic [511:0] conv2d1x1_0_avm_lm178_conv2d1x1_writedata,
   output logic [63:0] conv2d1x1_0_avm_lm178_conv2d1x1_byteenable,
   input logic conv2d1x1_0_avm_lm178_conv2d1x1_waitrequest,
   input logic [511:0] conv2d1x1_0_avm_lm178_conv2d1x1_readdata,
   input logic conv2d1x1_0_avm_lm178_conv2d1x1_readdatavalid,
   output logic [4:0] conv2d1x1_0_avm_lm178_conv2d1x1_burstcount,
   input logic conv2d1x1_0_avm_lm178_conv2d1x1_writeack,
   // AVM conv2d1x1_0_avm_lm70_conv2d1x1
   output logic conv2d1x1_0_avm_lm70_conv2d1x1_enable,
   output logic conv2d1x1_0_avm_lm70_conv2d1x1_read,
   output logic conv2d1x1_0_avm_lm70_conv2d1x1_write,
   output logic [30:0] conv2d1x1_0_avm_lm70_conv2d1x1_address,
   output logic [511:0] conv2d1x1_0_avm_lm70_conv2d1x1_writedata,
   output logic [63:0] conv2d1x1_0_avm_lm70_conv2d1x1_byteenable,
   input logic conv2d1x1_0_avm_lm70_conv2d1x1_waitrequest,
   input logic [511:0] conv2d1x1_0_avm_lm70_conv2d1x1_readdata,
   input logic conv2d1x1_0_avm_lm70_conv2d1x1_readdatavalid,
   output logic [4:0] conv2d1x1_0_avm_lm70_conv2d1x1_burstcount,
   input logic conv2d1x1_0_avm_lm70_conv2d1x1_writeack,
   // AVM conv2d1x1_0_avm_lm73_conv2d1x1
   output logic conv2d1x1_0_avm_lm73_conv2d1x1_enable,
   output logic conv2d1x1_0_avm_lm73_conv2d1x1_read,
   output logic conv2d1x1_0_avm_lm73_conv2d1x1_write,
   output logic [30:0] conv2d1x1_0_avm_lm73_conv2d1x1_address,
   output logic [511:0] conv2d1x1_0_avm_lm73_conv2d1x1_writedata,
   output logic [63:0] conv2d1x1_0_avm_lm73_conv2d1x1_byteenable,
   input logic conv2d1x1_0_avm_lm73_conv2d1x1_waitrequest,
   input logic [511:0] conv2d1x1_0_avm_lm73_conv2d1x1_readdata,
   input logic conv2d1x1_0_avm_lm73_conv2d1x1_readdatavalid,
   output logic [4:0] conv2d1x1_0_avm_lm73_conv2d1x1_burstcount,
   input logic conv2d1x1_0_avm_lm73_conv2d1x1_writeack,
   // AVM conv2d1x1_0_avm_lm96_conv2d1x1
   output logic conv2d1x1_0_avm_lm96_conv2d1x1_enable,
   output logic conv2d1x1_0_avm_lm96_conv2d1x1_read,
   output logic conv2d1x1_0_avm_lm96_conv2d1x1_write,
   output logic [30:0] conv2d1x1_0_avm_lm96_conv2d1x1_address,
   output logic [511:0] conv2d1x1_0_avm_lm96_conv2d1x1_writedata,
   output logic [63:0] conv2d1x1_0_avm_lm96_conv2d1x1_byteenable,
   input logic conv2d1x1_0_avm_lm96_conv2d1x1_waitrequest,
   input logic [511:0] conv2d1x1_0_avm_lm96_conv2d1x1_readdata,
   input logic conv2d1x1_0_avm_lm96_conv2d1x1_readdatavalid,
   output logic [4:0] conv2d1x1_0_avm_lm96_conv2d1x1_burstcount,
   input logic conv2d1x1_0_avm_lm96_conv2d1x1_writeack,
   // AVM conv2d1x1_0_avm_lm_conv2d1x1
   output logic conv2d1x1_0_avm_lm_conv2d1x1_enable,
   output logic conv2d1x1_0_avm_lm_conv2d1x1_read,
   output logic conv2d1x1_0_avm_lm_conv2d1x1_write,
   output logic [30:0] conv2d1x1_0_avm_lm_conv2d1x1_address,
   output logic [511:0] conv2d1x1_0_avm_lm_conv2d1x1_writedata,
   output logic [63:0] conv2d1x1_0_avm_lm_conv2d1x1_byteenable,
   input logic conv2d1x1_0_avm_lm_conv2d1x1_waitrequest,
   input logic [511:0] conv2d1x1_0_avm_lm_conv2d1x1_readdata,
   input logic conv2d1x1_0_avm_lm_conv2d1x1_readdatavalid,
   output logic [4:0] conv2d1x1_0_avm_lm_conv2d1x1_burstcount,
   input logic conv2d1x1_0_avm_lm_conv2d1x1_writeack,
   // AVM conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1
   output logic conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_enable,
   output logic conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_read,
   output logic conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_write,
   output logic [30:0] conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_address,
   output logic [511:0] conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_writedata,
   output logic [63:0] conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_byteenable,
   input logic conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_waitrequest,
   input logic [511:0] conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_readdata,
   input logic conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_readdatavalid,
   output logic [4:0] conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_burstcount,
   input logic conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_writeack
);
   logic conv2d1x1_start;
   logic [0:0] conv2d1x1_start_chain;
   logic [0:0] conv2d1x1_start_kernel_copy;
   logic [0:0] conv2d1x1_start_task_fd;
   logic [0:0] conv2d1x1_start_finish_element;
   logic conv2d1x1_finish;
   logic [0:0] conv2d1x1_finish_kernel_copy;
   logic [0:0] conv2d1x1_finish_chain;
   logic [63:0] conv2d1x1_global_size [2:0];
   logic [31:0] conv2d1x1_num_groups [2:0];
   logic [31:0] conv2d1x1_local_size [2:0];
   logic [63:0] conv2d1x1_global_offset [2:0];
   logic [31:0] conv2d1x1_work_dim;
   logic [31:0] conv2d1x1_wg_size;
   logic [0:0] conv2d1x1_wg_disp_stall_in;
   logic [0:0] conv2d1x1_wg_disp_stall_in_lookahead;
   logic [0:0] conv2d1x1_wg_disp_valid_out;
   logic conv2d1x1_wg_disp_start_out;
   logic [31:0] conv2d1x1_wg_disp_group_id_out [2:0];
   logic [31:0] conv2d1x1_wg_disp_global_id_base_out [2:0];
   logic conv2d1x1_wg_disp_dispatched_all_groups;
   logic [63:0] conv2d1x1_global_id [1][2:0];
   logic [31:0] conv2d1x1_local_id [1][2:0];
   logic [31:0] conv2d1x1_group_id [1][2:0];
   logic [0:0] conv2d1x1_pending_write;
   logic [0:0] conv2d1x1_lsu_active;
   logic [0:0] conv2d1x1_valid_in;
   logic [0:0] conv2d1x1_valid_out;
   logic [0:0] conv2d1x1_stall_in;
   logic [0:0] conv2d1x1_stall_out;
   logic conv2d1x1_cra_pending_write;
   logic conv2d1x1_cra_lsu_active;
   logic conv2d1x1_cra_valid_in;
   logic [351:0] conv2d1x1_kernel_arguments;

   assign conv2d1x1_start_chain[0] = conv2d1x1_start;
   assign conv2d1x1_finish_chain[0] = 1'b1;
   assign conv2d1x1_cra_pending_write = |conv2d1x1_pending_write;
   assign conv2d1x1_cra_lsu_active = |conv2d1x1_lsu_active;
   assign conv2d1x1_cra_valid_in = |conv2d1x1_valid_in;
   assign conv2d1x1_stall_in = 0;
   // INST conv2d1x1_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   conv2d1x1_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv2d1x1_start),
      .num_groups(conv2d1x1_num_groups),
      .local_size(conv2d1x1_local_size),
      .stall_in(conv2d1x1_wg_disp_stall_in),
      .stall_in_lookahead(conv2d1x1_wg_disp_stall_in_lookahead),
      .valid_out(conv2d1x1_wg_disp_valid_out),
      .group_id_out(conv2d1x1_wg_disp_group_id_out),
      .global_id_base_out(conv2d1x1_wg_disp_global_id_base_out),
      .start_out(conv2d1x1_wg_disp_start_out),
      .dispatched_all_groups(conv2d1x1_wg_disp_dispatched_all_groups)
   );

   // INST conv2d1x1_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(19),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   conv2d1x1_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv2d1x1_start),
      .wg_size(conv2d1x1_wg_size),
      .wg_dispatch_valid_out(conv2d1x1_wg_disp_valid_out),
      .wg_dispatch_stall_in(conv2d1x1_wg_disp_stall_in),
      .dispatched_all_groups(conv2d1x1_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(conv2d1x1_valid_out),
      .kernel_copy_stall_in(conv2d1x1_stall_in),
      .pending_writes(conv2d1x1_cra_pending_write),
      .finish(conv2d1x1_finish)
   );

   // INST conv2d1x1_cra_slave_inst of conv2d1x1_function_cra_slave
   conv2d1x1_function_cra_slave conv2d1x1_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv2d1x1_start),
      .finish(conv2d1x1_finish),
      .global_offset_0(conv2d1x1_global_offset[0]),
      .global_offset_1(conv2d1x1_global_offset[1]),
      .global_offset_2(conv2d1x1_global_offset[2]),
      .work_dim(conv2d1x1_work_dim),
      .has_a_lsu_active(conv2d1x1_cra_lsu_active),
      .has_a_write_pending(conv2d1x1_cra_pending_write),
      .valid_in(conv2d1x1_cra_valid_in),
      .global_size_0(conv2d1x1_global_size[0]),
      .global_size_1(conv2d1x1_global_size[1]),
      .global_size_2(conv2d1x1_global_size[2]),
      .num_groups_0(conv2d1x1_num_groups[0]),
      .num_groups_1(conv2d1x1_num_groups[1]),
      .num_groups_2(conv2d1x1_num_groups[2]),
      .local_size_0(conv2d1x1_local_size[0]),
      .local_size_1(conv2d1x1_local_size[1]),
      .local_size_2(conv2d1x1_local_size[2]),
      .workgroup_size(conv2d1x1_wg_size),
      .kernel_arguments(conv2d1x1_kernel_arguments),
      .cra_irq(cra_irq_conv2d1x1),
      // AVS avs_cra
      .avs_cra_enable(avs_conv2d1x1_cra_enable),
      .avs_cra_read(avs_conv2d1x1_cra_read),
      .avs_cra_write(avs_conv2d1x1_cra_write),
      .avs_cra_address(avs_conv2d1x1_cra_address),
      .avs_cra_writedata(avs_conv2d1x1_cra_writedata),
      .avs_cra_byteenable(avs_conv2d1x1_cra_byteenable),
      .avs_cra_readdata(avs_conv2d1x1_cra_readdata),
      .avs_cra_readdatavalid(avs_conv2d1x1_cra_readdatavalid)
   );

   // INST conv2d1x1_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(32),
      .LOCAL_WIDTH_Y(32),
      .LOCAL_WIDTH_Z(32),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(1),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0),
      .USE_GLOBAL_WORK_OFFSET(1)
   )
   conv2d1x1_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv2d1x1_wg_disp_start_out),
      .valid_in(conv2d1x1_wg_disp_valid_out[0]),
      .stall_out(conv2d1x1_wg_disp_stall_in[0]),
      .stall_out_lookahead(conv2d1x1_wg_disp_stall_in_lookahead[0]),
      .stall_in(conv2d1x1_stall_out[0]),
      .valid_out(conv2d1x1_valid_in[0]),
      .group_id_in(conv2d1x1_wg_disp_group_id_out),
      .global_id_base_in(conv2d1x1_wg_disp_global_id_base_out),
      .local_size(conv2d1x1_local_size),
      .global_size(conv2d1x1_global_size),
      .global_work_offset(conv2d1x1_global_offset),
      .local_id(conv2d1x1_local_id[0]),
      .global_id(conv2d1x1_global_id[0]),
      .group_id(conv2d1x1_group_id[0])
   );

   // INST conv2d1x1_inst_0 of conv2d1x1_top_wrapper_0
   conv2d1x1_top_wrapper_0 conv2d1x1_inst_0
   (
      .start(conv2d1x1_start_kernel_copy[0]),
      .kernel_arguments(conv2d1x1_kernel_arguments),
      .work_dim(conv2d1x1_work_dim),
      .global_offset(conv2d1x1_global_offset),
      .kernel_valid_out(conv2d1x1_valid_out[0]),
      .has_a_write_pending(conv2d1x1_pending_write[0]),
      .has_a_lsu_active(conv2d1x1_lsu_active[0]),
      .global_id(conv2d1x1_global_id[0]),
      .local_id(conv2d1x1_local_id[0]),
      .group_id(conv2d1x1_group_id[0]),
      .global_size(conv2d1x1_global_size),
      .local_size(conv2d1x1_local_size),
      .num_groups(conv2d1x1_num_groups),
      .workgroup_size(conv2d1x1_wg_size),
      .kernel_stall_out(conv2d1x1_stall_out[0]),
      .kernel_valid_in(conv2d1x1_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_lm177_conv2d1x1
      .avm_lm177_conv2d1x1_enable(conv2d1x1_0_avm_lm177_conv2d1x1_enable),
      .avm_lm177_conv2d1x1_read(conv2d1x1_0_avm_lm177_conv2d1x1_read),
      .avm_lm177_conv2d1x1_write(conv2d1x1_0_avm_lm177_conv2d1x1_write),
      .avm_lm177_conv2d1x1_address(conv2d1x1_0_avm_lm177_conv2d1x1_address),
      .avm_lm177_conv2d1x1_writedata(conv2d1x1_0_avm_lm177_conv2d1x1_writedata),
      .avm_lm177_conv2d1x1_byteenable(conv2d1x1_0_avm_lm177_conv2d1x1_byteenable),
      .avm_lm177_conv2d1x1_waitrequest(conv2d1x1_0_avm_lm177_conv2d1x1_waitrequest),
      .avm_lm177_conv2d1x1_readdata(conv2d1x1_0_avm_lm177_conv2d1x1_readdata),
      .avm_lm177_conv2d1x1_readdatavalid(conv2d1x1_0_avm_lm177_conv2d1x1_readdatavalid),
      .avm_lm177_conv2d1x1_burstcount(conv2d1x1_0_avm_lm177_conv2d1x1_burstcount),
      .avm_lm177_conv2d1x1_writeack(conv2d1x1_0_avm_lm177_conv2d1x1_writeack),
      // AVM avm_lm178_conv2d1x1
      .avm_lm178_conv2d1x1_enable(conv2d1x1_0_avm_lm178_conv2d1x1_enable),
      .avm_lm178_conv2d1x1_read(conv2d1x1_0_avm_lm178_conv2d1x1_read),
      .avm_lm178_conv2d1x1_write(conv2d1x1_0_avm_lm178_conv2d1x1_write),
      .avm_lm178_conv2d1x1_address(conv2d1x1_0_avm_lm178_conv2d1x1_address),
      .avm_lm178_conv2d1x1_writedata(conv2d1x1_0_avm_lm178_conv2d1x1_writedata),
      .avm_lm178_conv2d1x1_byteenable(conv2d1x1_0_avm_lm178_conv2d1x1_byteenable),
      .avm_lm178_conv2d1x1_waitrequest(conv2d1x1_0_avm_lm178_conv2d1x1_waitrequest),
      .avm_lm178_conv2d1x1_readdata(conv2d1x1_0_avm_lm178_conv2d1x1_readdata),
      .avm_lm178_conv2d1x1_readdatavalid(conv2d1x1_0_avm_lm178_conv2d1x1_readdatavalid),
      .avm_lm178_conv2d1x1_burstcount(conv2d1x1_0_avm_lm178_conv2d1x1_burstcount),
      .avm_lm178_conv2d1x1_writeack(conv2d1x1_0_avm_lm178_conv2d1x1_writeack),
      // AVM avm_lm70_conv2d1x1
      .avm_lm70_conv2d1x1_enable(conv2d1x1_0_avm_lm70_conv2d1x1_enable),
      .avm_lm70_conv2d1x1_read(conv2d1x1_0_avm_lm70_conv2d1x1_read),
      .avm_lm70_conv2d1x1_write(conv2d1x1_0_avm_lm70_conv2d1x1_write),
      .avm_lm70_conv2d1x1_address(conv2d1x1_0_avm_lm70_conv2d1x1_address),
      .avm_lm70_conv2d1x1_writedata(conv2d1x1_0_avm_lm70_conv2d1x1_writedata),
      .avm_lm70_conv2d1x1_byteenable(conv2d1x1_0_avm_lm70_conv2d1x1_byteenable),
      .avm_lm70_conv2d1x1_waitrequest(conv2d1x1_0_avm_lm70_conv2d1x1_waitrequest),
      .avm_lm70_conv2d1x1_readdata(conv2d1x1_0_avm_lm70_conv2d1x1_readdata),
      .avm_lm70_conv2d1x1_readdatavalid(conv2d1x1_0_avm_lm70_conv2d1x1_readdatavalid),
      .avm_lm70_conv2d1x1_burstcount(conv2d1x1_0_avm_lm70_conv2d1x1_burstcount),
      .avm_lm70_conv2d1x1_writeack(conv2d1x1_0_avm_lm70_conv2d1x1_writeack),
      // AVM avm_lm73_conv2d1x1
      .avm_lm73_conv2d1x1_enable(conv2d1x1_0_avm_lm73_conv2d1x1_enable),
      .avm_lm73_conv2d1x1_read(conv2d1x1_0_avm_lm73_conv2d1x1_read),
      .avm_lm73_conv2d1x1_write(conv2d1x1_0_avm_lm73_conv2d1x1_write),
      .avm_lm73_conv2d1x1_address(conv2d1x1_0_avm_lm73_conv2d1x1_address),
      .avm_lm73_conv2d1x1_writedata(conv2d1x1_0_avm_lm73_conv2d1x1_writedata),
      .avm_lm73_conv2d1x1_byteenable(conv2d1x1_0_avm_lm73_conv2d1x1_byteenable),
      .avm_lm73_conv2d1x1_waitrequest(conv2d1x1_0_avm_lm73_conv2d1x1_waitrequest),
      .avm_lm73_conv2d1x1_readdata(conv2d1x1_0_avm_lm73_conv2d1x1_readdata),
      .avm_lm73_conv2d1x1_readdatavalid(conv2d1x1_0_avm_lm73_conv2d1x1_readdatavalid),
      .avm_lm73_conv2d1x1_burstcount(conv2d1x1_0_avm_lm73_conv2d1x1_burstcount),
      .avm_lm73_conv2d1x1_writeack(conv2d1x1_0_avm_lm73_conv2d1x1_writeack),
      // AVM avm_lm96_conv2d1x1
      .avm_lm96_conv2d1x1_enable(conv2d1x1_0_avm_lm96_conv2d1x1_enable),
      .avm_lm96_conv2d1x1_read(conv2d1x1_0_avm_lm96_conv2d1x1_read),
      .avm_lm96_conv2d1x1_write(conv2d1x1_0_avm_lm96_conv2d1x1_write),
      .avm_lm96_conv2d1x1_address(conv2d1x1_0_avm_lm96_conv2d1x1_address),
      .avm_lm96_conv2d1x1_writedata(conv2d1x1_0_avm_lm96_conv2d1x1_writedata),
      .avm_lm96_conv2d1x1_byteenable(conv2d1x1_0_avm_lm96_conv2d1x1_byteenable),
      .avm_lm96_conv2d1x1_waitrequest(conv2d1x1_0_avm_lm96_conv2d1x1_waitrequest),
      .avm_lm96_conv2d1x1_readdata(conv2d1x1_0_avm_lm96_conv2d1x1_readdata),
      .avm_lm96_conv2d1x1_readdatavalid(conv2d1x1_0_avm_lm96_conv2d1x1_readdatavalid),
      .avm_lm96_conv2d1x1_burstcount(conv2d1x1_0_avm_lm96_conv2d1x1_burstcount),
      .avm_lm96_conv2d1x1_writeack(conv2d1x1_0_avm_lm96_conv2d1x1_writeack),
      // AVM avm_lm_conv2d1x1
      .avm_lm_conv2d1x1_enable(conv2d1x1_0_avm_lm_conv2d1x1_enable),
      .avm_lm_conv2d1x1_read(conv2d1x1_0_avm_lm_conv2d1x1_read),
      .avm_lm_conv2d1x1_write(conv2d1x1_0_avm_lm_conv2d1x1_write),
      .avm_lm_conv2d1x1_address(conv2d1x1_0_avm_lm_conv2d1x1_address),
      .avm_lm_conv2d1x1_writedata(conv2d1x1_0_avm_lm_conv2d1x1_writedata),
      .avm_lm_conv2d1x1_byteenable(conv2d1x1_0_avm_lm_conv2d1x1_byteenable),
      .avm_lm_conv2d1x1_waitrequest(conv2d1x1_0_avm_lm_conv2d1x1_waitrequest),
      .avm_lm_conv2d1x1_readdata(conv2d1x1_0_avm_lm_conv2d1x1_readdata),
      .avm_lm_conv2d1x1_readdatavalid(conv2d1x1_0_avm_lm_conv2d1x1_readdatavalid),
      .avm_lm_conv2d1x1_burstcount(conv2d1x1_0_avm_lm_conv2d1x1_burstcount),
      .avm_lm_conv2d1x1_writeack(conv2d1x1_0_avm_lm_conv2d1x1_writeack),
      // AVM avm_unnamed_conv2d1x113_conv2d1x1
      .avm_unnamed_conv2d1x113_conv2d1x1_enable(conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_enable),
      .avm_unnamed_conv2d1x113_conv2d1x1_read(conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_read),
      .avm_unnamed_conv2d1x113_conv2d1x1_write(conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_write),
      .avm_unnamed_conv2d1x113_conv2d1x1_address(conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_address),
      .avm_unnamed_conv2d1x113_conv2d1x1_writedata(conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_writedata),
      .avm_unnamed_conv2d1x113_conv2d1x1_byteenable(conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_byteenable),
      .avm_unnamed_conv2d1x113_conv2d1x1_waitrequest(conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_waitrequest),
      .avm_unnamed_conv2d1x113_conv2d1x1_readdata(conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_readdata),
      .avm_unnamed_conv2d1x113_conv2d1x1_readdatavalid(conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_readdatavalid),
      .avm_unnamed_conv2d1x113_conv2d1x1_burstcount(conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_burstcount),
      .avm_unnamed_conv2d1x113_conv2d1x1_writeack(conv2d1x1_0_avm_unnamed_conv2d1x113_conv2d1x1_writeack)
   );

   // INST conv2d1x1_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   conv2d1x1_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(conv2d1x1_start_chain[0]),
      .start_kernel(conv2d1x1_start_kernel_copy[0]),
      .start_finish_detector(conv2d1x1_start_task_fd[0]),
      .start_finish_chain_element(conv2d1x1_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE conv2d1x1_top_wrapper_0
/////////////////////////////////////////////////////////////////
module conv2d1x1_top_wrapper_0
(
   input logic start,
   input logic [351:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [63:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [63:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [63:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_lm177_conv2d1x1
   output logic avm_lm177_conv2d1x1_enable,
   output logic avm_lm177_conv2d1x1_read,
   output logic avm_lm177_conv2d1x1_write,
   output logic [30:0] avm_lm177_conv2d1x1_address,
   output logic [511:0] avm_lm177_conv2d1x1_writedata,
   output logic [63:0] avm_lm177_conv2d1x1_byteenable,
   input logic avm_lm177_conv2d1x1_waitrequest,
   input logic [511:0] avm_lm177_conv2d1x1_readdata,
   input logic avm_lm177_conv2d1x1_readdatavalid,
   output logic [4:0] avm_lm177_conv2d1x1_burstcount,
   input logic avm_lm177_conv2d1x1_writeack,
   // AVM avm_lm178_conv2d1x1
   output logic avm_lm178_conv2d1x1_enable,
   output logic avm_lm178_conv2d1x1_read,
   output logic avm_lm178_conv2d1x1_write,
   output logic [30:0] avm_lm178_conv2d1x1_address,
   output logic [511:0] avm_lm178_conv2d1x1_writedata,
   output logic [63:0] avm_lm178_conv2d1x1_byteenable,
   input logic avm_lm178_conv2d1x1_waitrequest,
   input logic [511:0] avm_lm178_conv2d1x1_readdata,
   input logic avm_lm178_conv2d1x1_readdatavalid,
   output logic [4:0] avm_lm178_conv2d1x1_burstcount,
   input logic avm_lm178_conv2d1x1_writeack,
   // AVM avm_lm70_conv2d1x1
   output logic avm_lm70_conv2d1x1_enable,
   output logic avm_lm70_conv2d1x1_read,
   output logic avm_lm70_conv2d1x1_write,
   output logic [30:0] avm_lm70_conv2d1x1_address,
   output logic [511:0] avm_lm70_conv2d1x1_writedata,
   output logic [63:0] avm_lm70_conv2d1x1_byteenable,
   input logic avm_lm70_conv2d1x1_waitrequest,
   input logic [511:0] avm_lm70_conv2d1x1_readdata,
   input logic avm_lm70_conv2d1x1_readdatavalid,
   output logic [4:0] avm_lm70_conv2d1x1_burstcount,
   input logic avm_lm70_conv2d1x1_writeack,
   // AVM avm_lm73_conv2d1x1
   output logic avm_lm73_conv2d1x1_enable,
   output logic avm_lm73_conv2d1x1_read,
   output logic avm_lm73_conv2d1x1_write,
   output logic [30:0] avm_lm73_conv2d1x1_address,
   output logic [511:0] avm_lm73_conv2d1x1_writedata,
   output logic [63:0] avm_lm73_conv2d1x1_byteenable,
   input logic avm_lm73_conv2d1x1_waitrequest,
   input logic [511:0] avm_lm73_conv2d1x1_readdata,
   input logic avm_lm73_conv2d1x1_readdatavalid,
   output logic [4:0] avm_lm73_conv2d1x1_burstcount,
   input logic avm_lm73_conv2d1x1_writeack,
   // AVM avm_lm96_conv2d1x1
   output logic avm_lm96_conv2d1x1_enable,
   output logic avm_lm96_conv2d1x1_read,
   output logic avm_lm96_conv2d1x1_write,
   output logic [30:0] avm_lm96_conv2d1x1_address,
   output logic [511:0] avm_lm96_conv2d1x1_writedata,
   output logic [63:0] avm_lm96_conv2d1x1_byteenable,
   input logic avm_lm96_conv2d1x1_waitrequest,
   input logic [511:0] avm_lm96_conv2d1x1_readdata,
   input logic avm_lm96_conv2d1x1_readdatavalid,
   output logic [4:0] avm_lm96_conv2d1x1_burstcount,
   input logic avm_lm96_conv2d1x1_writeack,
   // AVM avm_lm_conv2d1x1
   output logic avm_lm_conv2d1x1_enable,
   output logic avm_lm_conv2d1x1_read,
   output logic avm_lm_conv2d1x1_write,
   output logic [30:0] avm_lm_conv2d1x1_address,
   output logic [511:0] avm_lm_conv2d1x1_writedata,
   output logic [63:0] avm_lm_conv2d1x1_byteenable,
   input logic avm_lm_conv2d1x1_waitrequest,
   input logic [511:0] avm_lm_conv2d1x1_readdata,
   input logic avm_lm_conv2d1x1_readdatavalid,
   output logic [4:0] avm_lm_conv2d1x1_burstcount,
   input logic avm_lm_conv2d1x1_writeack,
   // AVM avm_unnamed_conv2d1x113_conv2d1x1
   output logic avm_unnamed_conv2d1x113_conv2d1x1_enable,
   output logic avm_unnamed_conv2d1x113_conv2d1x1_read,
   output logic avm_unnamed_conv2d1x113_conv2d1x1_write,
   output logic [30:0] avm_unnamed_conv2d1x113_conv2d1x1_address,
   output logic [511:0] avm_unnamed_conv2d1x113_conv2d1x1_writedata,
   output logic [63:0] avm_unnamed_conv2d1x113_conv2d1x1_byteenable,
   input logic avm_unnamed_conv2d1x113_conv2d1x1_waitrequest,
   input logic [511:0] avm_unnamed_conv2d1x113_conv2d1x1_readdata,
   input logic avm_unnamed_conv2d1x113_conv2d1x1_readdatavalid,
   output logic [4:0] avm_unnamed_conv2d1x113_conv2d1x1_burstcount,
   input logic avm_unnamed_conv2d1x113_conv2d1x1_writeack
);
   logic lmem_invalid_single_bit;

   // INST kernel of conv2d1x1_function_wrapper
   conv2d1x1_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_lm177_conv2d1x1
      .avm_lm177_conv2d1x1_enable(avm_lm177_conv2d1x1_enable),
      .avm_lm177_conv2d1x1_read(avm_lm177_conv2d1x1_read),
      .avm_lm177_conv2d1x1_write(avm_lm177_conv2d1x1_write),
      .avm_lm177_conv2d1x1_address(avm_lm177_conv2d1x1_address),
      .avm_lm177_conv2d1x1_writedata(avm_lm177_conv2d1x1_writedata),
      .avm_lm177_conv2d1x1_byteenable(avm_lm177_conv2d1x1_byteenable),
      .avm_lm177_conv2d1x1_waitrequest(avm_lm177_conv2d1x1_waitrequest),
      .avm_lm177_conv2d1x1_readdata(avm_lm177_conv2d1x1_readdata),
      .avm_lm177_conv2d1x1_readdatavalid(avm_lm177_conv2d1x1_readdatavalid),
      .avm_lm177_conv2d1x1_burstcount(avm_lm177_conv2d1x1_burstcount),
      .avm_lm177_conv2d1x1_writeack(avm_lm177_conv2d1x1_writeack),
      // AVM avm_lm178_conv2d1x1
      .avm_lm178_conv2d1x1_enable(avm_lm178_conv2d1x1_enable),
      .avm_lm178_conv2d1x1_read(avm_lm178_conv2d1x1_read),
      .avm_lm178_conv2d1x1_write(avm_lm178_conv2d1x1_write),
      .avm_lm178_conv2d1x1_address(avm_lm178_conv2d1x1_address),
      .avm_lm178_conv2d1x1_writedata(avm_lm178_conv2d1x1_writedata),
      .avm_lm178_conv2d1x1_byteenable(avm_lm178_conv2d1x1_byteenable),
      .avm_lm178_conv2d1x1_waitrequest(avm_lm178_conv2d1x1_waitrequest),
      .avm_lm178_conv2d1x1_readdata(avm_lm178_conv2d1x1_readdata),
      .avm_lm178_conv2d1x1_readdatavalid(avm_lm178_conv2d1x1_readdatavalid),
      .avm_lm178_conv2d1x1_burstcount(avm_lm178_conv2d1x1_burstcount),
      .avm_lm178_conv2d1x1_writeack(avm_lm178_conv2d1x1_writeack),
      // AVM avm_lm70_conv2d1x1
      .avm_lm70_conv2d1x1_enable(avm_lm70_conv2d1x1_enable),
      .avm_lm70_conv2d1x1_read(avm_lm70_conv2d1x1_read),
      .avm_lm70_conv2d1x1_write(avm_lm70_conv2d1x1_write),
      .avm_lm70_conv2d1x1_address(avm_lm70_conv2d1x1_address),
      .avm_lm70_conv2d1x1_writedata(avm_lm70_conv2d1x1_writedata),
      .avm_lm70_conv2d1x1_byteenable(avm_lm70_conv2d1x1_byteenable),
      .avm_lm70_conv2d1x1_waitrequest(avm_lm70_conv2d1x1_waitrequest),
      .avm_lm70_conv2d1x1_readdata(avm_lm70_conv2d1x1_readdata),
      .avm_lm70_conv2d1x1_readdatavalid(avm_lm70_conv2d1x1_readdatavalid),
      .avm_lm70_conv2d1x1_burstcount(avm_lm70_conv2d1x1_burstcount),
      .avm_lm70_conv2d1x1_writeack(avm_lm70_conv2d1x1_writeack),
      // AVM avm_lm73_conv2d1x1
      .avm_lm73_conv2d1x1_enable(avm_lm73_conv2d1x1_enable),
      .avm_lm73_conv2d1x1_read(avm_lm73_conv2d1x1_read),
      .avm_lm73_conv2d1x1_write(avm_lm73_conv2d1x1_write),
      .avm_lm73_conv2d1x1_address(avm_lm73_conv2d1x1_address),
      .avm_lm73_conv2d1x1_writedata(avm_lm73_conv2d1x1_writedata),
      .avm_lm73_conv2d1x1_byteenable(avm_lm73_conv2d1x1_byteenable),
      .avm_lm73_conv2d1x1_waitrequest(avm_lm73_conv2d1x1_waitrequest),
      .avm_lm73_conv2d1x1_readdata(avm_lm73_conv2d1x1_readdata),
      .avm_lm73_conv2d1x1_readdatavalid(avm_lm73_conv2d1x1_readdatavalid),
      .avm_lm73_conv2d1x1_burstcount(avm_lm73_conv2d1x1_burstcount),
      .avm_lm73_conv2d1x1_writeack(avm_lm73_conv2d1x1_writeack),
      // AVM avm_lm96_conv2d1x1
      .avm_lm96_conv2d1x1_enable(avm_lm96_conv2d1x1_enable),
      .avm_lm96_conv2d1x1_read(avm_lm96_conv2d1x1_read),
      .avm_lm96_conv2d1x1_write(avm_lm96_conv2d1x1_write),
      .avm_lm96_conv2d1x1_address(avm_lm96_conv2d1x1_address),
      .avm_lm96_conv2d1x1_writedata(avm_lm96_conv2d1x1_writedata),
      .avm_lm96_conv2d1x1_byteenable(avm_lm96_conv2d1x1_byteenable),
      .avm_lm96_conv2d1x1_waitrequest(avm_lm96_conv2d1x1_waitrequest),
      .avm_lm96_conv2d1x1_readdata(avm_lm96_conv2d1x1_readdata),
      .avm_lm96_conv2d1x1_readdatavalid(avm_lm96_conv2d1x1_readdatavalid),
      .avm_lm96_conv2d1x1_burstcount(avm_lm96_conv2d1x1_burstcount),
      .avm_lm96_conv2d1x1_writeack(avm_lm96_conv2d1x1_writeack),
      // AVM avm_lm_conv2d1x1
      .avm_lm_conv2d1x1_enable(avm_lm_conv2d1x1_enable),
      .avm_lm_conv2d1x1_read(avm_lm_conv2d1x1_read),
      .avm_lm_conv2d1x1_write(avm_lm_conv2d1x1_write),
      .avm_lm_conv2d1x1_address(avm_lm_conv2d1x1_address),
      .avm_lm_conv2d1x1_writedata(avm_lm_conv2d1x1_writedata),
      .avm_lm_conv2d1x1_byteenable(avm_lm_conv2d1x1_byteenable),
      .avm_lm_conv2d1x1_waitrequest(avm_lm_conv2d1x1_waitrequest),
      .avm_lm_conv2d1x1_readdata(avm_lm_conv2d1x1_readdata),
      .avm_lm_conv2d1x1_readdatavalid(avm_lm_conv2d1x1_readdatavalid),
      .avm_lm_conv2d1x1_burstcount(avm_lm_conv2d1x1_burstcount),
      .avm_lm_conv2d1x1_writeack(avm_lm_conv2d1x1_writeack),
      // AVM avm_unnamed_conv2d1x113_conv2d1x1
      .avm_unnamed_conv2d1x113_conv2d1x1_enable(avm_unnamed_conv2d1x113_conv2d1x1_enable),
      .avm_unnamed_conv2d1x113_conv2d1x1_read(avm_unnamed_conv2d1x113_conv2d1x1_read),
      .avm_unnamed_conv2d1x113_conv2d1x1_write(avm_unnamed_conv2d1x113_conv2d1x1_write),
      .avm_unnamed_conv2d1x113_conv2d1x1_address(avm_unnamed_conv2d1x113_conv2d1x1_address),
      .avm_unnamed_conv2d1x113_conv2d1x1_writedata(avm_unnamed_conv2d1x113_conv2d1x1_writedata),
      .avm_unnamed_conv2d1x113_conv2d1x1_byteenable(avm_unnamed_conv2d1x113_conv2d1x1_byteenable),
      .avm_unnamed_conv2d1x113_conv2d1x1_waitrequest(avm_unnamed_conv2d1x113_conv2d1x1_waitrequest),
      .avm_unnamed_conv2d1x113_conv2d1x1_readdata(avm_unnamed_conv2d1x113_conv2d1x1_readdata),
      .avm_unnamed_conv2d1x113_conv2d1x1_readdatavalid(avm_unnamed_conv2d1x113_conv2d1x1_readdatavalid),
      .avm_unnamed_conv2d1x113_conv2d1x1_burstcount(avm_unnamed_conv2d1x113_conv2d1x1_burstcount),
      .avm_unnamed_conv2d1x113_conv2d1x1_writeack(avm_unnamed_conv2d1x113_conv2d1x1_writeack)
   );

   assign lmem_invalid_single_bit = 'b0;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE cra_ring_wrapper
/////////////////////////////////////////////////////////////////
module cra_ring_wrapper
(
   input logic clock,
   input logic resetn,
   // AVS cra_ring_root_avs
   input logic cra_ring_root_avs_enable,
   input logic cra_ring_root_avs_read,
   input logic cra_ring_root_avs_write,
   input logic [6:0] cra_ring_root_avs_address,
   input logic [63:0] cra_ring_root_avs_writedata,
   input logic [7:0] cra_ring_root_avs_byteenable,
   output logic cra_ring_root_avs_waitrequest,
   output logic [63:0] cra_ring_root_avs_readdata,
   output logic cra_ring_root_avs_readdatavalid,
   // AVM cra_ring_avm_0
   output logic cra_ring_avm_0_enable,
   output logic cra_ring_avm_0_read,
   output logic cra_ring_avm_0_write,
   output logic [4:0] cra_ring_avm_0_address,
   output logic [63:0] cra_ring_avm_0_writedata,
   output logic [7:0] cra_ring_avm_0_byteenable,
   input logic [63:0] cra_ring_avm_0_readdata,
   input logic cra_ring_avm_0_readdatavalid,
   output logic cra_ring_avm_0_burstcount
);
   logic cra_ring_root_ring_in_wire_read;
   logic cra_ring_root_ring_in_wire_write;
   logic [4:0] cra_ring_root_ring_in_wire_addr;
   logic [63:0] cra_ring_root_ring_in_wire_data;
   logic [7:0] cra_ring_root_ring_in_wire_byteena;
   logic cra_ring_root_ring_in_wire_datavalid;
   logic cra_ring_root_ring_out_wire_read;
   logic cra_ring_root_ring_out_wire_write;
   logic [6:0] cra_ring_root_ring_out_wire_addr;
   logic [63:0] cra_ring_root_ring_out_wire_data;
   logic [7:0] cra_ring_root_ring_out_wire_byteena;
   logic cra_ring_root_ring_out_wire_datavalid;
   logic cra_ring_rom_avm_enable;
   logic cra_ring_rom_avm_read;
   logic cra_ring_rom_avm_write;
   logic [5:0] cra_ring_rom_avm_address;
   logic [63:0] cra_ring_rom_avm_writedata;
   logic [7:0] cra_ring_rom_avm_byteenable;
   logic [63:0] cra_ring_rom_avm_readdata;
   logic cra_ring_rom_avm_readdatavalid;
   logic cra_ring_rom_avm_burstcount;
   logic cra_ring_rom_ring_out_wire_read;
   logic cra_ring_rom_ring_out_wire_write;
   logic [4:0] cra_ring_rom_ring_out_wire_addr;
   logic [63:0] cra_ring_rom_ring_out_wire_data;
   logic [7:0] cra_ring_rom_ring_out_wire_byteena;
   logic cra_ring_rom_ring_out_wire_datavalid;
   logic cra_ring_node_ring_out_wire_0_read;
   logic cra_ring_node_ring_out_wire_0_write;
   logic [4:0] cra_ring_node_ring_out_wire_0_addr;
   logic [63:0] cra_ring_node_ring_out_wire_0_data;
   logic [7:0] cra_ring_node_ring_out_wire_0_byteena;
   logic cra_ring_node_ring_out_wire_0_datavalid;

   // INST cra_root of cra_ring_root
   cra_ring_root
   #(
      .ADDR_W(5),
      .ALLOW_HIGH_SPEED_FIFO_USAGE(0),
      .ASYNC_RESET(1),
      .DATA_W(64),
      .ID_W(0),
      .ROM_ENABLE(1),
      .ROM_EXT_W(1),
      .SLAVE_PORT_WAITREQUEST_ALLOWANCE(0),
      .SYNCHRONIZE_RESET(0)
   )
   cra_root
   (
      // AVS avs
      .avs_enable(cra_ring_root_avs_enable),
      .avs_read(cra_ring_root_avs_read),
      .avs_write(cra_ring_root_avs_write),
      .avs_addr(cra_ring_root_avs_address),
      .avs_writedata(cra_ring_root_avs_writedata),
      .avs_byteena(cra_ring_root_avs_byteenable),
      .avs_waitrequest(cra_ring_root_avs_waitrequest),
      .avs_readdata(cra_ring_root_avs_readdata),
      .avs_readdatavalid(cra_ring_root_avs_readdatavalid),
      // AVS ri
      .ri_read(cra_ring_node_ring_out_wire_0_read),
      .ri_write(cra_ring_node_ring_out_wire_0_write),
      .ri_addr(cra_ring_node_ring_out_wire_0_addr),
      .ri_data(cra_ring_node_ring_out_wire_0_data),
      .ri_byteena(cra_ring_node_ring_out_wire_0_byteena),
      .ri_datavalid(cra_ring_node_ring_out_wire_0_datavalid),
      // AVS ro
      .ro_read(cra_ring_root_ring_out_wire_read),
      .ro_write(cra_ring_root_ring_out_wire_write),
      .ro_addr(cra_ring_root_ring_out_wire_addr),
      .ro_data(cra_ring_root_ring_out_wire_data),
      .ro_byteena(cra_ring_root_ring_out_wire_byteena),
      .ro_datavalid(cra_ring_root_ring_out_wire_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST cra_ring_rom of cra_ring_rom
   cra_ring_rom
   #(
      .ASYNC_RESET(1),
      .DATA_W(64),
      .ID_W(0),
      .RING_ADDR_W(5),
      .ROM_EXT_W(1),
      .ROM_W(6),
      .SYNCHRONIZE_RESET(0)
   )
   cra_ring_rom
   (
      // AVM avm
      .avm_enable(cra_ring_rom_avm_enable),
      .avm_read(cra_ring_rom_avm_read),
      .avm_write(cra_ring_rom_avm_write),
      .avm_addr(cra_ring_rom_avm_address),
      .avm_writedata(cra_ring_rom_avm_writedata),
      .avm_byteenable(cra_ring_rom_avm_byteenable),
      .avm_readdata(cra_ring_rom_avm_readdata),
      .avm_readdatavalid(cra_ring_rom_avm_readdatavalid),
      .avm_burstcount(cra_ring_rom_avm_burstcount),
      // AVS ri
      .ri_read(cra_ring_root_ring_out_wire_read),
      .ri_write(cra_ring_root_ring_out_wire_write),
      .ri_addr(cra_ring_root_ring_out_wire_addr),
      .ri_data(cra_ring_root_ring_out_wire_data),
      .ri_byteena(cra_ring_root_ring_out_wire_byteena),
      .ri_datavalid(cra_ring_root_ring_out_wire_datavalid),
      // AVS ro
      .ro_read(cra_ring_rom_ring_out_wire_read),
      .ro_write(cra_ring_rom_ring_out_wire_write),
      .ro_addr(cra_ring_rom_ring_out_wire_addr),
      .ro_data(cra_ring_rom_ring_out_wire_data),
      .ro_byteena(cra_ring_rom_ring_out_wire_byteena),
      .ro_datavalid(cra_ring_rom_ring_out_wire_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST cra_ring_node_avm_wire_0_cra_ring_inst_0 of cra_ring_node
   cra_ring_node
   #(
      .ASYNC_RESET(1),
      .CRA_ADDR_W(5),
      .DATA_W(64),
      .ID(0),
      .ID_W(0),
      .RING_ADDR_W(5),
      .SYNCHRONIZE_RESET(0)
   )
   cra_ring_node_avm_wire_0_cra_ring_inst_0
   (
      // AVM avm
      .avm_enable(cra_ring_avm_0_enable),
      .avm_read(cra_ring_avm_0_read),
      .avm_write(cra_ring_avm_0_write),
      .avm_addr(cra_ring_avm_0_address),
      .avm_writedata(cra_ring_avm_0_writedata),
      .avm_byteena(cra_ring_avm_0_byteenable),
      .avm_readdata(cra_ring_avm_0_readdata),
      .avm_readdatavalid(cra_ring_avm_0_readdatavalid),
      .avm_burstcount(cra_ring_avm_0_burstcount),
      // AVS ri
      .ri_read(cra_ring_rom_ring_out_wire_read),
      .ri_write(cra_ring_rom_ring_out_wire_write),
      .ri_addr(cra_ring_rom_ring_out_wire_addr),
      .ri_data(cra_ring_rom_ring_out_wire_data),
      .ri_byteena(cra_ring_rom_ring_out_wire_byteena),
      .ri_datavalid(cra_ring_rom_ring_out_wire_datavalid),
      // AVS ro
      .ro_read(cra_ring_node_ring_out_wire_0_read),
      .ro_write(cra_ring_node_ring_out_wire_0_write),
      .ro_addr(cra_ring_node_ring_out_wire_0_addr),
      .ro_data(cra_ring_node_ring_out_wire_0_data),
      .ro_byteena(cra_ring_node_ring_out_wire_0_byteena),
      .ro_datavalid(cra_ring_node_ring_out_wire_0_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST sys_description_rom of acl_rom_module
   acl_rom_module
   #(
      .ADDRESS_WIDTH(6),
      .ASYNC_RESET(1),
      .DATA_WIDTH(64),
      .FAMILY("Arria 10"),
      .INIT_FILE("sys_description.hex"),
      .SYNCHRONIZE_RESET(0)
   )
   sys_description_rom
   (
      .clk(clock),
      .rst_n(resetn),
      .read(cra_ring_rom_avm_read),
      .readdatavalid(cra_ring_rom_avm_readdatavalid),
      .address(cra_ring_rom_avm_address),
      .readdata(cra_ring_rom_avm_readdata)
   );

endmodule

