// (c) 1992-2021 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 
// Generated by Intel(R) FPGA SDK for OpenCL(TM), Version 21.1.0 Build 173.3 Pro Edition, Copyright (c) 2021 Intel Corporation

/////////////////////////////////////////////////////////////////
// MODULE float4_SR_sys
/////////////////////////////////////////////////////////////////
module float4_SR_sys
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic [63:0] device_exception_bus,
   output logic kernel_irq,
   // AVM avm_mem_gmem_0_DDR_port_0_0_rw
   output logic avm_mem_gmem_0_DDR_port_0_0_rw_enable,
   output logic avm_mem_gmem_0_DDR_port_0_0_rw_read,
   output logic avm_mem_gmem_0_DDR_port_0_0_rw_write,
   output logic [30:0] avm_mem_gmem_0_DDR_port_0_0_rw_address,
   output logic [511:0] avm_mem_gmem_0_DDR_port_0_0_rw_writedata,
   output logic [63:0] avm_mem_gmem_0_DDR_port_0_0_rw_byteenable,
   input logic avm_mem_gmem_0_DDR_port_0_0_rw_waitrequest,
   input logic [511:0] avm_mem_gmem_0_DDR_port_0_0_rw_readdata,
   input logic avm_mem_gmem_0_DDR_port_0_0_rw_readdatavalid,
   output logic [4:0] avm_mem_gmem_0_DDR_port_0_0_rw_burstcount,
   input logic avm_mem_gmem_0_DDR_port_0_0_rw_writeack,
   // AVS cra_ring_root_avs
   input logic cra_ring_root_avs_enable,
   input logic cra_ring_root_avs_read,
   input logic cra_ring_root_avs_write,
   input logic [6:0] cra_ring_root_avs_address,
   input logic [63:0] cra_ring_root_avs_writedata,
   input logic [7:0] cra_ring_root_avs_byteenable,
   output logic cra_ring_root_avs_waitrequest,
   output logic [63:0] cra_ring_root_avs_readdata,
   output logic cra_ring_root_avs_readdatavalid
);
   logic cra_ring_node_avm_wire_0_enable;
   logic cra_ring_node_avm_wire_0_read;
   logic cra_ring_node_avm_wire_0_write;
   logic [4:0] cra_ring_node_avm_wire_0_address;
   logic [63:0] cra_ring_node_avm_wire_0_writedata;
   logic [7:0] cra_ring_node_avm_wire_0_byteenable;
   logic [63:0] cra_ring_node_avm_wire_0_readdata;
   logic cra_ring_node_avm_wire_0_readdatavalid;
   logic cra_ring_node_avm_wire_0_burstcount;
   logic kernel_irqs;
   logic gmem_avm_kernel_rd_enable [6];
   logic gmem_avm_kernel_rd_read [6];
   logic gmem_avm_kernel_rd_write [6];
   logic [30:0] gmem_avm_kernel_rd_address [6];
   logic [511:0] gmem_avm_kernel_rd_writedata [6];
   logic [63:0] gmem_avm_kernel_rd_byteenable [6];
   logic gmem_avm_kernel_rd_waitrequest [6];
   logic [511:0] gmem_avm_kernel_rd_readdata [6];
   logic gmem_avm_kernel_rd_readdatavalid [6];
   logic [4:0] gmem_avm_kernel_rd_burstcount [6];
   logic gmem_avm_kernel_rd_writeack [6];
   logic gmem_avm_kernel_wr_enable [1];
   logic gmem_avm_kernel_wr_read [1];
   logic gmem_avm_kernel_wr_write [1];
   logic [30:0] gmem_avm_kernel_wr_address [1];
   logic [511:0] gmem_avm_kernel_wr_writedata [1];
   logic [63:0] gmem_avm_kernel_wr_byteenable [1];
   logic gmem_avm_kernel_wr_waitrequest [1];
   logic [511:0] gmem_avm_kernel_wr_readdata [1];
   logic gmem_avm_kernel_wr_readdatavalid [1];
   logic [4:0] gmem_avm_kernel_wr_burstcount [1];
   logic gmem_avm_kernel_wr_writeack [1];
   logic gmem_ic_avm_enable [1];
   logic gmem_ic_avm_read [1];
   logic gmem_ic_avm_write [1];
   logic [30:0] gmem_ic_avm_address [1];
   logic [511:0] gmem_ic_avm_writedata [1];
   logic [63:0] gmem_ic_avm_byteenable [1];
   logic gmem_ic_avm_waitrequest [1];
   logic [511:0] gmem_ic_avm_readdata [1];
   logic gmem_ic_avm_readdatavalid [1];
   logic [4:0] gmem_ic_avm_burstcount [1];
   logic gmem_ic_avm_writeack [1];

   // INST conv2d1x1_std_ic_inst of conv2d1x1_std_ic_partition_wrapper
   conv2d1x1_std_ic_partition_wrapper conv2d1x1_std_ic_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_conv2d1x1(kernel_irqs),
      // AVS avs_conv2d1x1_cra
      .avs_conv2d1x1_cra_enable(cra_ring_node_avm_wire_0_enable),
      .avs_conv2d1x1_cra_read(cra_ring_node_avm_wire_0_read),
      .avs_conv2d1x1_cra_write(cra_ring_node_avm_wire_0_write),
      .avs_conv2d1x1_cra_address(cra_ring_node_avm_wire_0_address),
      .avs_conv2d1x1_cra_writedata(cra_ring_node_avm_wire_0_writedata),
      .avs_conv2d1x1_cra_byteenable(cra_ring_node_avm_wire_0_byteenable),
      .avs_conv2d1x1_cra_readdata(cra_ring_node_avm_wire_0_readdata),
      .avs_conv2d1x1_cra_readdatavalid(cra_ring_node_avm_wire_0_readdatavalid),
      // AVM conv2d1x1_0_avm_lm148_conv2d1x1
      .conv2d1x1_0_avm_lm148_conv2d1x1_enable(gmem_avm_kernel_rd_enable[0]),
      .conv2d1x1_0_avm_lm148_conv2d1x1_read(gmem_avm_kernel_rd_read[0]),
      .conv2d1x1_0_avm_lm148_conv2d1x1_write(gmem_avm_kernel_rd_write[0]),
      .conv2d1x1_0_avm_lm148_conv2d1x1_address(gmem_avm_kernel_rd_address[0]),
      .conv2d1x1_0_avm_lm148_conv2d1x1_writedata(gmem_avm_kernel_rd_writedata[0]),
      .conv2d1x1_0_avm_lm148_conv2d1x1_byteenable(gmem_avm_kernel_rd_byteenable[0]),
      .conv2d1x1_0_avm_lm148_conv2d1x1_waitrequest(gmem_avm_kernel_rd_waitrequest[0]),
      .conv2d1x1_0_avm_lm148_conv2d1x1_readdata(gmem_avm_kernel_rd_readdata[0]),
      .conv2d1x1_0_avm_lm148_conv2d1x1_readdatavalid(gmem_avm_kernel_rd_readdatavalid[0]),
      .conv2d1x1_0_avm_lm148_conv2d1x1_burstcount(gmem_avm_kernel_rd_burstcount[0]),
      .conv2d1x1_0_avm_lm148_conv2d1x1_writeack(gmem_avm_kernel_rd_writeack[0]),
      // AVM conv2d1x1_0_avm_lm150_conv2d1x1
      .conv2d1x1_0_avm_lm150_conv2d1x1_enable(gmem_avm_kernel_rd_enable[1]),
      .conv2d1x1_0_avm_lm150_conv2d1x1_read(gmem_avm_kernel_rd_read[1]),
      .conv2d1x1_0_avm_lm150_conv2d1x1_write(gmem_avm_kernel_rd_write[1]),
      .conv2d1x1_0_avm_lm150_conv2d1x1_address(gmem_avm_kernel_rd_address[1]),
      .conv2d1x1_0_avm_lm150_conv2d1x1_writedata(gmem_avm_kernel_rd_writedata[1]),
      .conv2d1x1_0_avm_lm150_conv2d1x1_byteenable(gmem_avm_kernel_rd_byteenable[1]),
      .conv2d1x1_0_avm_lm150_conv2d1x1_waitrequest(gmem_avm_kernel_rd_waitrequest[1]),
      .conv2d1x1_0_avm_lm150_conv2d1x1_readdata(gmem_avm_kernel_rd_readdata[1]),
      .conv2d1x1_0_avm_lm150_conv2d1x1_readdatavalid(gmem_avm_kernel_rd_readdatavalid[1]),
      .conv2d1x1_0_avm_lm150_conv2d1x1_burstcount(gmem_avm_kernel_rd_burstcount[1]),
      .conv2d1x1_0_avm_lm150_conv2d1x1_writeack(gmem_avm_kernel_rd_writeack[1]),
      // AVM conv2d1x1_0_avm_lm151_conv2d1x1
      .conv2d1x1_0_avm_lm151_conv2d1x1_enable(gmem_avm_kernel_rd_enable[2]),
      .conv2d1x1_0_avm_lm151_conv2d1x1_read(gmem_avm_kernel_rd_read[2]),
      .conv2d1x1_0_avm_lm151_conv2d1x1_write(gmem_avm_kernel_rd_write[2]),
      .conv2d1x1_0_avm_lm151_conv2d1x1_address(gmem_avm_kernel_rd_address[2]),
      .conv2d1x1_0_avm_lm151_conv2d1x1_writedata(gmem_avm_kernel_rd_writedata[2]),
      .conv2d1x1_0_avm_lm151_conv2d1x1_byteenable(gmem_avm_kernel_rd_byteenable[2]),
      .conv2d1x1_0_avm_lm151_conv2d1x1_waitrequest(gmem_avm_kernel_rd_waitrequest[2]),
      .conv2d1x1_0_avm_lm151_conv2d1x1_readdata(gmem_avm_kernel_rd_readdata[2]),
      .conv2d1x1_0_avm_lm151_conv2d1x1_readdatavalid(gmem_avm_kernel_rd_readdatavalid[2]),
      .conv2d1x1_0_avm_lm151_conv2d1x1_burstcount(gmem_avm_kernel_rd_burstcount[2]),
      .conv2d1x1_0_avm_lm151_conv2d1x1_writeack(gmem_avm_kernel_rd_writeack[2]),
      // AVM conv2d1x1_0_avm_lm153_conv2d1x1
      .conv2d1x1_0_avm_lm153_conv2d1x1_enable(gmem_avm_kernel_rd_enable[3]),
      .conv2d1x1_0_avm_lm153_conv2d1x1_read(gmem_avm_kernel_rd_read[3]),
      .conv2d1x1_0_avm_lm153_conv2d1x1_write(gmem_avm_kernel_rd_write[3]),
      .conv2d1x1_0_avm_lm153_conv2d1x1_address(gmem_avm_kernel_rd_address[3]),
      .conv2d1x1_0_avm_lm153_conv2d1x1_writedata(gmem_avm_kernel_rd_writedata[3]),
      .conv2d1x1_0_avm_lm153_conv2d1x1_byteenable(gmem_avm_kernel_rd_byteenable[3]),
      .conv2d1x1_0_avm_lm153_conv2d1x1_waitrequest(gmem_avm_kernel_rd_waitrequest[3]),
      .conv2d1x1_0_avm_lm153_conv2d1x1_readdata(gmem_avm_kernel_rd_readdata[3]),
      .conv2d1x1_0_avm_lm153_conv2d1x1_readdatavalid(gmem_avm_kernel_rd_readdatavalid[3]),
      .conv2d1x1_0_avm_lm153_conv2d1x1_burstcount(gmem_avm_kernel_rd_burstcount[3]),
      .conv2d1x1_0_avm_lm153_conv2d1x1_writeack(gmem_avm_kernel_rd_writeack[3]),
      // AVM conv2d1x1_0_avm_lm155_conv2d1x1
      .conv2d1x1_0_avm_lm155_conv2d1x1_enable(gmem_avm_kernel_rd_enable[4]),
      .conv2d1x1_0_avm_lm155_conv2d1x1_read(gmem_avm_kernel_rd_read[4]),
      .conv2d1x1_0_avm_lm155_conv2d1x1_write(gmem_avm_kernel_rd_write[4]),
      .conv2d1x1_0_avm_lm155_conv2d1x1_address(gmem_avm_kernel_rd_address[4]),
      .conv2d1x1_0_avm_lm155_conv2d1x1_writedata(gmem_avm_kernel_rd_writedata[4]),
      .conv2d1x1_0_avm_lm155_conv2d1x1_byteenable(gmem_avm_kernel_rd_byteenable[4]),
      .conv2d1x1_0_avm_lm155_conv2d1x1_waitrequest(gmem_avm_kernel_rd_waitrequest[4]),
      .conv2d1x1_0_avm_lm155_conv2d1x1_readdata(gmem_avm_kernel_rd_readdata[4]),
      .conv2d1x1_0_avm_lm155_conv2d1x1_readdatavalid(gmem_avm_kernel_rd_readdatavalid[4]),
      .conv2d1x1_0_avm_lm155_conv2d1x1_burstcount(gmem_avm_kernel_rd_burstcount[4]),
      .conv2d1x1_0_avm_lm155_conv2d1x1_writeack(gmem_avm_kernel_rd_writeack[4]),
      // AVM conv2d1x1_0_avm_lm_conv2d1x1
      .conv2d1x1_0_avm_lm_conv2d1x1_enable(gmem_avm_kernel_rd_enable[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_read(gmem_avm_kernel_rd_read[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_write(gmem_avm_kernel_rd_write[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_address(gmem_avm_kernel_rd_address[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_writedata(gmem_avm_kernel_rd_writedata[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_byteenable(gmem_avm_kernel_rd_byteenable[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_waitrequest(gmem_avm_kernel_rd_waitrequest[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_readdata(gmem_avm_kernel_rd_readdata[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_readdatavalid(gmem_avm_kernel_rd_readdatavalid[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_burstcount(gmem_avm_kernel_rd_burstcount[5]),
      .conv2d1x1_0_avm_lm_conv2d1x1_writeack(gmem_avm_kernel_rd_writeack[5]),
      // AVM conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1
      .conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_enable(gmem_avm_kernel_wr_enable[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_read(gmem_avm_kernel_wr_read[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_write(gmem_avm_kernel_wr_write[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_address(gmem_avm_kernel_wr_address[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_writedata(gmem_avm_kernel_wr_writedata[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_byteenable(gmem_avm_kernel_wr_byteenable[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_waitrequest(gmem_avm_kernel_wr_waitrequest[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_readdata(gmem_avm_kernel_wr_readdata[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_readdatavalid(gmem_avm_kernel_wr_readdatavalid[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_burstcount(gmem_avm_kernel_wr_burstcount[0]),
      .conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_writeack(gmem_avm_kernel_wr_writeack[0])
   );

   assign kernel_irq = |kernel_irqs;
   // INST lsu_ic_top_gmem of lsu_ic_top
   lsu_ic_top
   #(
      .AWIDTH(31),
      .MWIDTH_BYTES(64),
      .BURST_CNT_W(5),
      .NUM_RD_PORT(6),
      .NUM_WR_PORT(1),
      .NUM_DIMM(1),
      .ENABLE_MULTIPLE_WR_RING(0),
      .ENABLE_LAST_WAIT(0),
      .NUM_REORDER(1),
      .HYPER_PIPELINE(0),
      .ENABLE_BSP_WAITREQUEST_ALLOWANCE(0),
      .ENABLE_BSP_AVMM_WRITE_ACK(0),
      .WRITE_ACK_FIFO_DEPTH(1024),
      .AVM_WRITE_DATA_LATENESS(0),
      .AVM_READ_DATA_LATENESS(0),
      .WIDE_DATA_SLICING(0),
      .ROOT_FIFO_STALL_IN_EARLINESS(0),
      .ROOT_WFIFO_VALID_IN_EARLINESS(0),
      .ALLOW_HIGH_SPEED_FIFO_USAGE(0),
      .PIPELINE_RD_RETURN(0),
      .NUM_AVM_OUTPUT_PIPE_STAGES(1),
      .ROOT_FIFO_DEPTH(512),
      .RETURN_DATA_FIFO_DEPTH(512),
      .MAX_REQUESTS_PER_LSU(4),
      .NUM_MEM_SYSTEMS(1),
      .NUM_BANKS_PER_MEM_SYSTEM({1}),
      .NUM_BANKS_W_PER_MEM_SYSTEM({1}),
      .PERMUTE_BIT_LSB_PER_MEM_SYSTEM({1}),
      .BANK_BIT_LSB_PER_MEM_SYSTEM({30}),
      .ENABLE_BANK_INTERLEAVING({0}),
      .ENABLE_SWDIMM(0),
      .LARGEST_NUM_BANKS(1),
      .ROOT_PORT_MAP('{'{0}}),
      .ROOT_ARB_BALANCED_RW(0),
      .SYNCHRONIZE_RESET(1)
   )
   lsu_ic_top_gmem
   (
      .clk(clock),
      .resetn(resetn),
      .i_rd_request(gmem_avm_kernel_rd_read),
      .i_rd_address(gmem_avm_kernel_rd_address),
      .i_rd_burstcount(gmem_avm_kernel_rd_burstcount),
      .o_rd_waitrequest(gmem_avm_kernel_rd_waitrequest),
      .o_avm_readdata(gmem_avm_kernel_rd_readdata),
      .o_avm_readdatavalid(gmem_avm_kernel_rd_readdatavalid),
      .i_wr_byteenable(gmem_avm_kernel_wr_byteenable),
      .i_wr_address(gmem_avm_kernel_wr_address),
      .i_wr_request(gmem_avm_kernel_wr_write),
      .i_wr_burstcount(gmem_avm_kernel_wr_burstcount),
      .i_wr_writedata(gmem_avm_kernel_wr_writedata),
      .o_wr_waitrequest(gmem_avm_kernel_wr_waitrequest),
      .o_avm_writeack(gmem_avm_kernel_wr_writeack),
      .i_avm_waitrequest(gmem_ic_avm_waitrequest),
      .i_avm_write_ack(gmem_ic_avm_writeack),
      .i_avm_readdata(gmem_ic_avm_readdata),
      .i_avm_readdatavalid(gmem_ic_avm_readdatavalid),
      .o_avm_byteenable(gmem_ic_avm_byteenable),
      .o_avm_address(gmem_ic_avm_address),
      .o_avm_read(gmem_ic_avm_read),
      .o_avm_write(gmem_ic_avm_write),
      .o_avm_burstcount(gmem_ic_avm_burstcount),
      .o_avm_writedata(gmem_ic_avm_writedata)
   );

   assign avm_mem_gmem_0_DDR_port_0_0_rw_read = gmem_ic_avm_read[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_write = gmem_ic_avm_write[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_burstcount = gmem_ic_avm_burstcount[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_address = gmem_ic_avm_address[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_writedata = gmem_ic_avm_writedata[0];
   assign avm_mem_gmem_0_DDR_port_0_0_rw_byteenable = gmem_ic_avm_byteenable[0];
   assign gmem_ic_avm_waitrequest[0] = avm_mem_gmem_0_DDR_port_0_0_rw_waitrequest;
   assign gmem_ic_avm_readdata[0] = avm_mem_gmem_0_DDR_port_0_0_rw_readdata;
   assign gmem_ic_avm_readdatavalid[0] = avm_mem_gmem_0_DDR_port_0_0_rw_readdatavalid;
   // INST cra_ring_wrapper_inst of cra_ring_wrapper
   cra_ring_wrapper cra_ring_wrapper_inst
   (
      .clock(clock),
      .resetn(resetn),
      // AVS cra_ring_root_avs
      .cra_ring_root_avs_enable(cra_ring_root_avs_enable),
      .cra_ring_root_avs_read(cra_ring_root_avs_read),
      .cra_ring_root_avs_write(cra_ring_root_avs_write),
      .cra_ring_root_avs_address(cra_ring_root_avs_address),
      .cra_ring_root_avs_writedata(cra_ring_root_avs_writedata),
      .cra_ring_root_avs_byteenable(cra_ring_root_avs_byteenable),
      .cra_ring_root_avs_waitrequest(cra_ring_root_avs_waitrequest),
      .cra_ring_root_avs_readdata(cra_ring_root_avs_readdata),
      .cra_ring_root_avs_readdatavalid(cra_ring_root_avs_readdatavalid),
      // AVM cra_ring_avm_0
      .cra_ring_avm_0_enable(cra_ring_node_avm_wire_0_enable),
      .cra_ring_avm_0_read(cra_ring_node_avm_wire_0_read),
      .cra_ring_avm_0_write(cra_ring_node_avm_wire_0_write),
      .cra_ring_avm_0_address(cra_ring_node_avm_wire_0_address),
      .cra_ring_avm_0_writedata(cra_ring_node_avm_wire_0_writedata),
      .cra_ring_avm_0_byteenable(cra_ring_node_avm_wire_0_byteenable),
      .cra_ring_avm_0_readdata(cra_ring_node_avm_wire_0_readdata),
      .cra_ring_avm_0_readdatavalid(cra_ring_node_avm_wire_0_readdatavalid),
      .cra_ring_avm_0_burstcount(cra_ring_node_avm_wire_0_burstcount)
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE conv2d1x1_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module conv2d1x1_std_ic_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_conv2d1x1,
   // AVS avs_conv2d1x1_cra
   input logic avs_conv2d1x1_cra_enable,
   input logic avs_conv2d1x1_cra_read,
   input logic avs_conv2d1x1_cra_write,
   input logic [4:0] avs_conv2d1x1_cra_address,
   input logic [63:0] avs_conv2d1x1_cra_writedata,
   input logic [7:0] avs_conv2d1x1_cra_byteenable,
   output logic [63:0] avs_conv2d1x1_cra_readdata,
   output logic avs_conv2d1x1_cra_readdatavalid,
   // AVM conv2d1x1_0_avm_lm148_conv2d1x1
   output logic conv2d1x1_0_avm_lm148_conv2d1x1_enable,
   output logic conv2d1x1_0_avm_lm148_conv2d1x1_read,
   output logic conv2d1x1_0_avm_lm148_conv2d1x1_write,
   output logic [30:0] conv2d1x1_0_avm_lm148_conv2d1x1_address,
   output logic [511:0] conv2d1x1_0_avm_lm148_conv2d1x1_writedata,
   output logic [63:0] conv2d1x1_0_avm_lm148_conv2d1x1_byteenable,
   input logic conv2d1x1_0_avm_lm148_conv2d1x1_waitrequest,
   input logic [511:0] conv2d1x1_0_avm_lm148_conv2d1x1_readdata,
   input logic conv2d1x1_0_avm_lm148_conv2d1x1_readdatavalid,
   output logic [4:0] conv2d1x1_0_avm_lm148_conv2d1x1_burstcount,
   input logic conv2d1x1_0_avm_lm148_conv2d1x1_writeack,
   // AVM conv2d1x1_0_avm_lm150_conv2d1x1
   output logic conv2d1x1_0_avm_lm150_conv2d1x1_enable,
   output logic conv2d1x1_0_avm_lm150_conv2d1x1_read,
   output logic conv2d1x1_0_avm_lm150_conv2d1x1_write,
   output logic [30:0] conv2d1x1_0_avm_lm150_conv2d1x1_address,
   output logic [511:0] conv2d1x1_0_avm_lm150_conv2d1x1_writedata,
   output logic [63:0] conv2d1x1_0_avm_lm150_conv2d1x1_byteenable,
   input logic conv2d1x1_0_avm_lm150_conv2d1x1_waitrequest,
   input logic [511:0] conv2d1x1_0_avm_lm150_conv2d1x1_readdata,
   input logic conv2d1x1_0_avm_lm150_conv2d1x1_readdatavalid,
   output logic [4:0] conv2d1x1_0_avm_lm150_conv2d1x1_burstcount,
   input logic conv2d1x1_0_avm_lm150_conv2d1x1_writeack,
   // AVM conv2d1x1_0_avm_lm151_conv2d1x1
   output logic conv2d1x1_0_avm_lm151_conv2d1x1_enable,
   output logic conv2d1x1_0_avm_lm151_conv2d1x1_read,
   output logic conv2d1x1_0_avm_lm151_conv2d1x1_write,
   output logic [30:0] conv2d1x1_0_avm_lm151_conv2d1x1_address,
   output logic [511:0] conv2d1x1_0_avm_lm151_conv2d1x1_writedata,
   output logic [63:0] conv2d1x1_0_avm_lm151_conv2d1x1_byteenable,
   input logic conv2d1x1_0_avm_lm151_conv2d1x1_waitrequest,
   input logic [511:0] conv2d1x1_0_avm_lm151_conv2d1x1_readdata,
   input logic conv2d1x1_0_avm_lm151_conv2d1x1_readdatavalid,
   output logic [4:0] conv2d1x1_0_avm_lm151_conv2d1x1_burstcount,
   input logic conv2d1x1_0_avm_lm151_conv2d1x1_writeack,
   // AVM conv2d1x1_0_avm_lm153_conv2d1x1
   output logic conv2d1x1_0_avm_lm153_conv2d1x1_enable,
   output logic conv2d1x1_0_avm_lm153_conv2d1x1_read,
   output logic conv2d1x1_0_avm_lm153_conv2d1x1_write,
   output logic [30:0] conv2d1x1_0_avm_lm153_conv2d1x1_address,
   output logic [511:0] conv2d1x1_0_avm_lm153_conv2d1x1_writedata,
   output logic [63:0] conv2d1x1_0_avm_lm153_conv2d1x1_byteenable,
   input logic conv2d1x1_0_avm_lm153_conv2d1x1_waitrequest,
   input logic [511:0] conv2d1x1_0_avm_lm153_conv2d1x1_readdata,
   input logic conv2d1x1_0_avm_lm153_conv2d1x1_readdatavalid,
   output logic [4:0] conv2d1x1_0_avm_lm153_conv2d1x1_burstcount,
   input logic conv2d1x1_0_avm_lm153_conv2d1x1_writeack,
   // AVM conv2d1x1_0_avm_lm155_conv2d1x1
   output logic conv2d1x1_0_avm_lm155_conv2d1x1_enable,
   output logic conv2d1x1_0_avm_lm155_conv2d1x1_read,
   output logic conv2d1x1_0_avm_lm155_conv2d1x1_write,
   output logic [30:0] conv2d1x1_0_avm_lm155_conv2d1x1_address,
   output logic [511:0] conv2d1x1_0_avm_lm155_conv2d1x1_writedata,
   output logic [63:0] conv2d1x1_0_avm_lm155_conv2d1x1_byteenable,
   input logic conv2d1x1_0_avm_lm155_conv2d1x1_waitrequest,
   input logic [511:0] conv2d1x1_0_avm_lm155_conv2d1x1_readdata,
   input logic conv2d1x1_0_avm_lm155_conv2d1x1_readdatavalid,
   output logic [4:0] conv2d1x1_0_avm_lm155_conv2d1x1_burstcount,
   input logic conv2d1x1_0_avm_lm155_conv2d1x1_writeack,
   // AVM conv2d1x1_0_avm_lm_conv2d1x1
   output logic conv2d1x1_0_avm_lm_conv2d1x1_enable,
   output logic conv2d1x1_0_avm_lm_conv2d1x1_read,
   output logic conv2d1x1_0_avm_lm_conv2d1x1_write,
   output logic [30:0] conv2d1x1_0_avm_lm_conv2d1x1_address,
   output logic [511:0] conv2d1x1_0_avm_lm_conv2d1x1_writedata,
   output logic [63:0] conv2d1x1_0_avm_lm_conv2d1x1_byteenable,
   input logic conv2d1x1_0_avm_lm_conv2d1x1_waitrequest,
   input logic [511:0] conv2d1x1_0_avm_lm_conv2d1x1_readdata,
   input logic conv2d1x1_0_avm_lm_conv2d1x1_readdatavalid,
   output logic [4:0] conv2d1x1_0_avm_lm_conv2d1x1_burstcount,
   input logic conv2d1x1_0_avm_lm_conv2d1x1_writeack,
   // AVM conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1
   output logic conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_enable,
   output logic conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_read,
   output logic conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_write,
   output logic [30:0] conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_address,
   output logic [511:0] conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_writedata,
   output logic [63:0] conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_byteenable,
   input logic conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_waitrequest,
   input logic [511:0] conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_readdata,
   input logic conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_readdatavalid,
   output logic [4:0] conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_burstcount,
   input logic conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_writeack
);
   logic conv2d1x1_start;
   logic [0:0] conv2d1x1_start_chain;
   logic [0:0] conv2d1x1_start_kernel_copy;
   logic [0:0] conv2d1x1_start_task_fd;
   logic [0:0] conv2d1x1_start_finish_element;
   logic conv2d1x1_finish;
   logic [0:0] conv2d1x1_finish_kernel_copy;
   logic [0:0] conv2d1x1_finish_chain;
   logic [63:0] conv2d1x1_global_size [2:0];
   logic [31:0] conv2d1x1_num_groups [2:0];
   logic [31:0] conv2d1x1_local_size [2:0];
   logic [63:0] conv2d1x1_global_offset [2:0];
   logic [31:0] conv2d1x1_work_dim;
   logic [31:0] conv2d1x1_wg_size;
   logic [0:0] conv2d1x1_wg_disp_stall_in;
   logic [0:0] conv2d1x1_wg_disp_stall_in_lookahead;
   logic [0:0] conv2d1x1_wg_disp_valid_out;
   logic conv2d1x1_wg_disp_start_out;
   logic [31:0] conv2d1x1_wg_disp_group_id_out [2:0];
   logic [31:0] conv2d1x1_wg_disp_global_id_base_out [2:0];
   logic conv2d1x1_wg_disp_dispatched_all_groups;
   logic [63:0] conv2d1x1_global_id [1][2:0];
   logic [31:0] conv2d1x1_local_id [1][2:0];
   logic [31:0] conv2d1x1_group_id [1][2:0];
   logic [0:0] conv2d1x1_pending_write;
   logic [0:0] conv2d1x1_lsu_active;
   logic [0:0] conv2d1x1_valid_in;
   logic [0:0] conv2d1x1_valid_out;
   logic [0:0] conv2d1x1_stall_in;
   logic [0:0] conv2d1x1_stall_out;
   logic conv2d1x1_cra_pending_write;
   logic conv2d1x1_cra_lsu_active;
   logic conv2d1x1_cra_valid_in;
   logic [351:0] conv2d1x1_kernel_arguments;

   assign conv2d1x1_start_chain[0] = conv2d1x1_start;
   assign conv2d1x1_finish_chain[0] = 1'b1;
   assign conv2d1x1_cra_pending_write = |conv2d1x1_pending_write;
   assign conv2d1x1_cra_lsu_active = |conv2d1x1_lsu_active;
   assign conv2d1x1_cra_valid_in = |conv2d1x1_valid_in;
   assign conv2d1x1_stall_in = 0;
   // INST conv2d1x1_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   conv2d1x1_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv2d1x1_start),
      .num_groups(conv2d1x1_num_groups),
      .local_size(conv2d1x1_local_size),
      .stall_in(conv2d1x1_wg_disp_stall_in),
      .stall_in_lookahead(conv2d1x1_wg_disp_stall_in_lookahead),
      .valid_out(conv2d1x1_wg_disp_valid_out),
      .group_id_out(conv2d1x1_wg_disp_group_id_out),
      .global_id_base_out(conv2d1x1_wg_disp_global_id_base_out),
      .start_out(conv2d1x1_wg_disp_start_out),
      .dispatched_all_groups(conv2d1x1_wg_disp_dispatched_all_groups)
   );

   // INST conv2d1x1_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(19),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   conv2d1x1_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv2d1x1_start),
      .wg_size(conv2d1x1_wg_size),
      .wg_dispatch_valid_out(conv2d1x1_wg_disp_valid_out),
      .wg_dispatch_stall_in(conv2d1x1_wg_disp_stall_in),
      .dispatched_all_groups(conv2d1x1_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(conv2d1x1_valid_out),
      .kernel_copy_stall_in(conv2d1x1_stall_in),
      .pending_writes(conv2d1x1_cra_pending_write),
      .finish(conv2d1x1_finish)
   );

   // INST conv2d1x1_cra_slave_inst of conv2d1x1_function_cra_slave
   conv2d1x1_function_cra_slave conv2d1x1_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv2d1x1_start),
      .finish(conv2d1x1_finish),
      .global_offset_0(conv2d1x1_global_offset[0]),
      .global_offset_1(conv2d1x1_global_offset[1]),
      .global_offset_2(conv2d1x1_global_offset[2]),
      .work_dim(conv2d1x1_work_dim),
      .has_a_lsu_active(conv2d1x1_cra_lsu_active),
      .has_a_write_pending(conv2d1x1_cra_pending_write),
      .valid_in(conv2d1x1_cra_valid_in),
      .global_size_0(conv2d1x1_global_size[0]),
      .global_size_1(conv2d1x1_global_size[1]),
      .global_size_2(conv2d1x1_global_size[2]),
      .num_groups_0(conv2d1x1_num_groups[0]),
      .num_groups_1(conv2d1x1_num_groups[1]),
      .num_groups_2(conv2d1x1_num_groups[2]),
      .local_size_0(conv2d1x1_local_size[0]),
      .local_size_1(conv2d1x1_local_size[1]),
      .local_size_2(conv2d1x1_local_size[2]),
      .workgroup_size(conv2d1x1_wg_size),
      .kernel_arguments(conv2d1x1_kernel_arguments),
      .cra_irq(cra_irq_conv2d1x1),
      // AVS avs_cra
      .avs_cra_enable(avs_conv2d1x1_cra_enable),
      .avs_cra_read(avs_conv2d1x1_cra_read),
      .avs_cra_write(avs_conv2d1x1_cra_write),
      .avs_cra_address(avs_conv2d1x1_cra_address),
      .avs_cra_writedata(avs_conv2d1x1_cra_writedata),
      .avs_cra_byteenable(avs_conv2d1x1_cra_byteenable),
      .avs_cra_readdata(avs_conv2d1x1_cra_readdata),
      .avs_cra_readdatavalid(avs_conv2d1x1_cra_readdatavalid)
   );

   // INST conv2d1x1_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(1),
      .LOCAL_WIDTH_Y(1),
      .LOCAL_WIDTH_Z(1),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(1),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0),
      .USE_GLOBAL_WORK_OFFSET(1)
   )
   conv2d1x1_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(conv2d1x1_wg_disp_start_out),
      .valid_in(conv2d1x1_wg_disp_valid_out[0]),
      .stall_out(conv2d1x1_wg_disp_stall_in[0]),
      .stall_out_lookahead(conv2d1x1_wg_disp_stall_in_lookahead[0]),
      .stall_in(conv2d1x1_stall_out[0]),
      .valid_out(conv2d1x1_valid_in[0]),
      .group_id_in(conv2d1x1_wg_disp_group_id_out),
      .global_id_base_in(conv2d1x1_wg_disp_global_id_base_out),
      .local_size(conv2d1x1_local_size),
      .global_size(conv2d1x1_global_size),
      .global_work_offset(conv2d1x1_global_offset),
      .local_id(conv2d1x1_local_id[0]),
      .global_id(conv2d1x1_global_id[0]),
      .group_id(conv2d1x1_group_id[0])
   );

   // INST conv2d1x1_inst_0 of conv2d1x1_top_wrapper_0
   conv2d1x1_top_wrapper_0 conv2d1x1_inst_0
   (
      .start(conv2d1x1_start_kernel_copy[0]),
      .kernel_arguments(conv2d1x1_kernel_arguments),
      .work_dim(conv2d1x1_work_dim),
      .global_offset(conv2d1x1_global_offset),
      .kernel_valid_out(conv2d1x1_valid_out[0]),
      .has_a_write_pending(conv2d1x1_pending_write[0]),
      .has_a_lsu_active(conv2d1x1_lsu_active[0]),
      .global_id(conv2d1x1_global_id[0]),
      .local_id(conv2d1x1_local_id[0]),
      .group_id(conv2d1x1_group_id[0]),
      .global_size(conv2d1x1_global_size),
      .local_size(conv2d1x1_local_size),
      .num_groups(conv2d1x1_num_groups),
      .workgroup_size(conv2d1x1_wg_size),
      .kernel_stall_out(conv2d1x1_stall_out[0]),
      .kernel_valid_in(conv2d1x1_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_lm148_conv2d1x1
      .avm_lm148_conv2d1x1_enable(conv2d1x1_0_avm_lm148_conv2d1x1_enable),
      .avm_lm148_conv2d1x1_read(conv2d1x1_0_avm_lm148_conv2d1x1_read),
      .avm_lm148_conv2d1x1_write(conv2d1x1_0_avm_lm148_conv2d1x1_write),
      .avm_lm148_conv2d1x1_address(conv2d1x1_0_avm_lm148_conv2d1x1_address),
      .avm_lm148_conv2d1x1_writedata(conv2d1x1_0_avm_lm148_conv2d1x1_writedata),
      .avm_lm148_conv2d1x1_byteenable(conv2d1x1_0_avm_lm148_conv2d1x1_byteenable),
      .avm_lm148_conv2d1x1_waitrequest(conv2d1x1_0_avm_lm148_conv2d1x1_waitrequest),
      .avm_lm148_conv2d1x1_readdata(conv2d1x1_0_avm_lm148_conv2d1x1_readdata),
      .avm_lm148_conv2d1x1_readdatavalid(conv2d1x1_0_avm_lm148_conv2d1x1_readdatavalid),
      .avm_lm148_conv2d1x1_burstcount(conv2d1x1_0_avm_lm148_conv2d1x1_burstcount),
      .avm_lm148_conv2d1x1_writeack(conv2d1x1_0_avm_lm148_conv2d1x1_writeack),
      // AVM avm_lm150_conv2d1x1
      .avm_lm150_conv2d1x1_enable(conv2d1x1_0_avm_lm150_conv2d1x1_enable),
      .avm_lm150_conv2d1x1_read(conv2d1x1_0_avm_lm150_conv2d1x1_read),
      .avm_lm150_conv2d1x1_write(conv2d1x1_0_avm_lm150_conv2d1x1_write),
      .avm_lm150_conv2d1x1_address(conv2d1x1_0_avm_lm150_conv2d1x1_address),
      .avm_lm150_conv2d1x1_writedata(conv2d1x1_0_avm_lm150_conv2d1x1_writedata),
      .avm_lm150_conv2d1x1_byteenable(conv2d1x1_0_avm_lm150_conv2d1x1_byteenable),
      .avm_lm150_conv2d1x1_waitrequest(conv2d1x1_0_avm_lm150_conv2d1x1_waitrequest),
      .avm_lm150_conv2d1x1_readdata(conv2d1x1_0_avm_lm150_conv2d1x1_readdata),
      .avm_lm150_conv2d1x1_readdatavalid(conv2d1x1_0_avm_lm150_conv2d1x1_readdatavalid),
      .avm_lm150_conv2d1x1_burstcount(conv2d1x1_0_avm_lm150_conv2d1x1_burstcount),
      .avm_lm150_conv2d1x1_writeack(conv2d1x1_0_avm_lm150_conv2d1x1_writeack),
      // AVM avm_lm151_conv2d1x1
      .avm_lm151_conv2d1x1_enable(conv2d1x1_0_avm_lm151_conv2d1x1_enable),
      .avm_lm151_conv2d1x1_read(conv2d1x1_0_avm_lm151_conv2d1x1_read),
      .avm_lm151_conv2d1x1_write(conv2d1x1_0_avm_lm151_conv2d1x1_write),
      .avm_lm151_conv2d1x1_address(conv2d1x1_0_avm_lm151_conv2d1x1_address),
      .avm_lm151_conv2d1x1_writedata(conv2d1x1_0_avm_lm151_conv2d1x1_writedata),
      .avm_lm151_conv2d1x1_byteenable(conv2d1x1_0_avm_lm151_conv2d1x1_byteenable),
      .avm_lm151_conv2d1x1_waitrequest(conv2d1x1_0_avm_lm151_conv2d1x1_waitrequest),
      .avm_lm151_conv2d1x1_readdata(conv2d1x1_0_avm_lm151_conv2d1x1_readdata),
      .avm_lm151_conv2d1x1_readdatavalid(conv2d1x1_0_avm_lm151_conv2d1x1_readdatavalid),
      .avm_lm151_conv2d1x1_burstcount(conv2d1x1_0_avm_lm151_conv2d1x1_burstcount),
      .avm_lm151_conv2d1x1_writeack(conv2d1x1_0_avm_lm151_conv2d1x1_writeack),
      // AVM avm_lm153_conv2d1x1
      .avm_lm153_conv2d1x1_enable(conv2d1x1_0_avm_lm153_conv2d1x1_enable),
      .avm_lm153_conv2d1x1_read(conv2d1x1_0_avm_lm153_conv2d1x1_read),
      .avm_lm153_conv2d1x1_write(conv2d1x1_0_avm_lm153_conv2d1x1_write),
      .avm_lm153_conv2d1x1_address(conv2d1x1_0_avm_lm153_conv2d1x1_address),
      .avm_lm153_conv2d1x1_writedata(conv2d1x1_0_avm_lm153_conv2d1x1_writedata),
      .avm_lm153_conv2d1x1_byteenable(conv2d1x1_0_avm_lm153_conv2d1x1_byteenable),
      .avm_lm153_conv2d1x1_waitrequest(conv2d1x1_0_avm_lm153_conv2d1x1_waitrequest),
      .avm_lm153_conv2d1x1_readdata(conv2d1x1_0_avm_lm153_conv2d1x1_readdata),
      .avm_lm153_conv2d1x1_readdatavalid(conv2d1x1_0_avm_lm153_conv2d1x1_readdatavalid),
      .avm_lm153_conv2d1x1_burstcount(conv2d1x1_0_avm_lm153_conv2d1x1_burstcount),
      .avm_lm153_conv2d1x1_writeack(conv2d1x1_0_avm_lm153_conv2d1x1_writeack),
      // AVM avm_lm155_conv2d1x1
      .avm_lm155_conv2d1x1_enable(conv2d1x1_0_avm_lm155_conv2d1x1_enable),
      .avm_lm155_conv2d1x1_read(conv2d1x1_0_avm_lm155_conv2d1x1_read),
      .avm_lm155_conv2d1x1_write(conv2d1x1_0_avm_lm155_conv2d1x1_write),
      .avm_lm155_conv2d1x1_address(conv2d1x1_0_avm_lm155_conv2d1x1_address),
      .avm_lm155_conv2d1x1_writedata(conv2d1x1_0_avm_lm155_conv2d1x1_writedata),
      .avm_lm155_conv2d1x1_byteenable(conv2d1x1_0_avm_lm155_conv2d1x1_byteenable),
      .avm_lm155_conv2d1x1_waitrequest(conv2d1x1_0_avm_lm155_conv2d1x1_waitrequest),
      .avm_lm155_conv2d1x1_readdata(conv2d1x1_0_avm_lm155_conv2d1x1_readdata),
      .avm_lm155_conv2d1x1_readdatavalid(conv2d1x1_0_avm_lm155_conv2d1x1_readdatavalid),
      .avm_lm155_conv2d1x1_burstcount(conv2d1x1_0_avm_lm155_conv2d1x1_burstcount),
      .avm_lm155_conv2d1x1_writeack(conv2d1x1_0_avm_lm155_conv2d1x1_writeack),
      // AVM avm_lm_conv2d1x1
      .avm_lm_conv2d1x1_enable(conv2d1x1_0_avm_lm_conv2d1x1_enable),
      .avm_lm_conv2d1x1_read(conv2d1x1_0_avm_lm_conv2d1x1_read),
      .avm_lm_conv2d1x1_write(conv2d1x1_0_avm_lm_conv2d1x1_write),
      .avm_lm_conv2d1x1_address(conv2d1x1_0_avm_lm_conv2d1x1_address),
      .avm_lm_conv2d1x1_writedata(conv2d1x1_0_avm_lm_conv2d1x1_writedata),
      .avm_lm_conv2d1x1_byteenable(conv2d1x1_0_avm_lm_conv2d1x1_byteenable),
      .avm_lm_conv2d1x1_waitrequest(conv2d1x1_0_avm_lm_conv2d1x1_waitrequest),
      .avm_lm_conv2d1x1_readdata(conv2d1x1_0_avm_lm_conv2d1x1_readdata),
      .avm_lm_conv2d1x1_readdatavalid(conv2d1x1_0_avm_lm_conv2d1x1_readdatavalid),
      .avm_lm_conv2d1x1_burstcount(conv2d1x1_0_avm_lm_conv2d1x1_burstcount),
      .avm_lm_conv2d1x1_writeack(conv2d1x1_0_avm_lm_conv2d1x1_writeack),
      // AVM avm_unnamed_conv2d1x116_conv2d1x1
      .avm_unnamed_conv2d1x116_conv2d1x1_enable(conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_enable),
      .avm_unnamed_conv2d1x116_conv2d1x1_read(conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_read),
      .avm_unnamed_conv2d1x116_conv2d1x1_write(conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_write),
      .avm_unnamed_conv2d1x116_conv2d1x1_address(conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_address),
      .avm_unnamed_conv2d1x116_conv2d1x1_writedata(conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_writedata),
      .avm_unnamed_conv2d1x116_conv2d1x1_byteenable(conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_byteenable),
      .avm_unnamed_conv2d1x116_conv2d1x1_waitrequest(conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_waitrequest),
      .avm_unnamed_conv2d1x116_conv2d1x1_readdata(conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_readdata),
      .avm_unnamed_conv2d1x116_conv2d1x1_readdatavalid(conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_readdatavalid),
      .avm_unnamed_conv2d1x116_conv2d1x1_burstcount(conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_burstcount),
      .avm_unnamed_conv2d1x116_conv2d1x1_writeack(conv2d1x1_0_avm_unnamed_conv2d1x116_conv2d1x1_writeack)
   );

   // INST conv2d1x1_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   conv2d1x1_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(conv2d1x1_start_chain[0]),
      .start_kernel(conv2d1x1_start_kernel_copy[0]),
      .start_finish_detector(conv2d1x1_start_task_fd[0]),
      .start_finish_chain_element(conv2d1x1_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE conv2d1x1_top_wrapper_0
/////////////////////////////////////////////////////////////////
module conv2d1x1_top_wrapper_0
(
   input logic start,
   input logic [351:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [63:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [63:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [63:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_lm148_conv2d1x1
   output logic avm_lm148_conv2d1x1_enable,
   output logic avm_lm148_conv2d1x1_read,
   output logic avm_lm148_conv2d1x1_write,
   output logic [30:0] avm_lm148_conv2d1x1_address,
   output logic [511:0] avm_lm148_conv2d1x1_writedata,
   output logic [63:0] avm_lm148_conv2d1x1_byteenable,
   input logic avm_lm148_conv2d1x1_waitrequest,
   input logic [511:0] avm_lm148_conv2d1x1_readdata,
   input logic avm_lm148_conv2d1x1_readdatavalid,
   output logic [4:0] avm_lm148_conv2d1x1_burstcount,
   input logic avm_lm148_conv2d1x1_writeack,
   // AVM avm_lm150_conv2d1x1
   output logic avm_lm150_conv2d1x1_enable,
   output logic avm_lm150_conv2d1x1_read,
   output logic avm_lm150_conv2d1x1_write,
   output logic [30:0] avm_lm150_conv2d1x1_address,
   output logic [511:0] avm_lm150_conv2d1x1_writedata,
   output logic [63:0] avm_lm150_conv2d1x1_byteenable,
   input logic avm_lm150_conv2d1x1_waitrequest,
   input logic [511:0] avm_lm150_conv2d1x1_readdata,
   input logic avm_lm150_conv2d1x1_readdatavalid,
   output logic [4:0] avm_lm150_conv2d1x1_burstcount,
   input logic avm_lm150_conv2d1x1_writeack,
   // AVM avm_lm151_conv2d1x1
   output logic avm_lm151_conv2d1x1_enable,
   output logic avm_lm151_conv2d1x1_read,
   output logic avm_lm151_conv2d1x1_write,
   output logic [30:0] avm_lm151_conv2d1x1_address,
   output logic [511:0] avm_lm151_conv2d1x1_writedata,
   output logic [63:0] avm_lm151_conv2d1x1_byteenable,
   input logic avm_lm151_conv2d1x1_waitrequest,
   input logic [511:0] avm_lm151_conv2d1x1_readdata,
   input logic avm_lm151_conv2d1x1_readdatavalid,
   output logic [4:0] avm_lm151_conv2d1x1_burstcount,
   input logic avm_lm151_conv2d1x1_writeack,
   // AVM avm_lm153_conv2d1x1
   output logic avm_lm153_conv2d1x1_enable,
   output logic avm_lm153_conv2d1x1_read,
   output logic avm_lm153_conv2d1x1_write,
   output logic [30:0] avm_lm153_conv2d1x1_address,
   output logic [511:0] avm_lm153_conv2d1x1_writedata,
   output logic [63:0] avm_lm153_conv2d1x1_byteenable,
   input logic avm_lm153_conv2d1x1_waitrequest,
   input logic [511:0] avm_lm153_conv2d1x1_readdata,
   input logic avm_lm153_conv2d1x1_readdatavalid,
   output logic [4:0] avm_lm153_conv2d1x1_burstcount,
   input logic avm_lm153_conv2d1x1_writeack,
   // AVM avm_lm155_conv2d1x1
   output logic avm_lm155_conv2d1x1_enable,
   output logic avm_lm155_conv2d1x1_read,
   output logic avm_lm155_conv2d1x1_write,
   output logic [30:0] avm_lm155_conv2d1x1_address,
   output logic [511:0] avm_lm155_conv2d1x1_writedata,
   output logic [63:0] avm_lm155_conv2d1x1_byteenable,
   input logic avm_lm155_conv2d1x1_waitrequest,
   input logic [511:0] avm_lm155_conv2d1x1_readdata,
   input logic avm_lm155_conv2d1x1_readdatavalid,
   output logic [4:0] avm_lm155_conv2d1x1_burstcount,
   input logic avm_lm155_conv2d1x1_writeack,
   // AVM avm_lm_conv2d1x1
   output logic avm_lm_conv2d1x1_enable,
   output logic avm_lm_conv2d1x1_read,
   output logic avm_lm_conv2d1x1_write,
   output logic [30:0] avm_lm_conv2d1x1_address,
   output logic [511:0] avm_lm_conv2d1x1_writedata,
   output logic [63:0] avm_lm_conv2d1x1_byteenable,
   input logic avm_lm_conv2d1x1_waitrequest,
   input logic [511:0] avm_lm_conv2d1x1_readdata,
   input logic avm_lm_conv2d1x1_readdatavalid,
   output logic [4:0] avm_lm_conv2d1x1_burstcount,
   input logic avm_lm_conv2d1x1_writeack,
   // AVM avm_unnamed_conv2d1x116_conv2d1x1
   output logic avm_unnamed_conv2d1x116_conv2d1x1_enable,
   output logic avm_unnamed_conv2d1x116_conv2d1x1_read,
   output logic avm_unnamed_conv2d1x116_conv2d1x1_write,
   output logic [30:0] avm_unnamed_conv2d1x116_conv2d1x1_address,
   output logic [511:0] avm_unnamed_conv2d1x116_conv2d1x1_writedata,
   output logic [63:0] avm_unnamed_conv2d1x116_conv2d1x1_byteenable,
   input logic avm_unnamed_conv2d1x116_conv2d1x1_waitrequest,
   input logic [511:0] avm_unnamed_conv2d1x116_conv2d1x1_readdata,
   input logic avm_unnamed_conv2d1x116_conv2d1x1_readdatavalid,
   output logic [4:0] avm_unnamed_conv2d1x116_conv2d1x1_burstcount,
   input logic avm_unnamed_conv2d1x116_conv2d1x1_writeack
);
   genvar __i;
   genvar __j;
   logic lmem_invalid_single_bit;
   logic lmem_invalid_aspaces;
   logic local_avm_aspace64_enable [1][4];
   logic local_avm_aspace64_read [1][4];
   logic local_avm_aspace64_write [1][4];
   logic [31:0] local_avm_aspace64_address [1][4];
   logic [511:0] local_avm_aspace64_writedata [1][4];
   logic [63:0] local_avm_aspace64_byteenable [1][4];
   logic local_avm_aspace64_waitrequest [1][4];
   logic [511:0] local_avm_aspace64_readdata [1][4];
   logic local_avm_aspace64_readdatavalid [1][4];
   logic local_avm_aspace64_burstcount [1][4];
   logic local_avm_aspace64_writeack [1][4];

   // INST kernel of conv2d1x1_function_wrapper
   conv2d1x1_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_lm148_conv2d1x1
      .avm_lm148_conv2d1x1_enable(avm_lm148_conv2d1x1_enable),
      .avm_lm148_conv2d1x1_read(avm_lm148_conv2d1x1_read),
      .avm_lm148_conv2d1x1_write(avm_lm148_conv2d1x1_write),
      .avm_lm148_conv2d1x1_address(avm_lm148_conv2d1x1_address),
      .avm_lm148_conv2d1x1_writedata(avm_lm148_conv2d1x1_writedata),
      .avm_lm148_conv2d1x1_byteenable(avm_lm148_conv2d1x1_byteenable),
      .avm_lm148_conv2d1x1_waitrequest(avm_lm148_conv2d1x1_waitrequest),
      .avm_lm148_conv2d1x1_readdata(avm_lm148_conv2d1x1_readdata),
      .avm_lm148_conv2d1x1_readdatavalid(avm_lm148_conv2d1x1_readdatavalid),
      .avm_lm148_conv2d1x1_burstcount(avm_lm148_conv2d1x1_burstcount),
      .avm_lm148_conv2d1x1_writeack(avm_lm148_conv2d1x1_writeack),
      // AVM avm_lm150_conv2d1x1
      .avm_lm150_conv2d1x1_enable(avm_lm150_conv2d1x1_enable),
      .avm_lm150_conv2d1x1_read(avm_lm150_conv2d1x1_read),
      .avm_lm150_conv2d1x1_write(avm_lm150_conv2d1x1_write),
      .avm_lm150_conv2d1x1_address(avm_lm150_conv2d1x1_address),
      .avm_lm150_conv2d1x1_writedata(avm_lm150_conv2d1x1_writedata),
      .avm_lm150_conv2d1x1_byteenable(avm_lm150_conv2d1x1_byteenable),
      .avm_lm150_conv2d1x1_waitrequest(avm_lm150_conv2d1x1_waitrequest),
      .avm_lm150_conv2d1x1_readdata(avm_lm150_conv2d1x1_readdata),
      .avm_lm150_conv2d1x1_readdatavalid(avm_lm150_conv2d1x1_readdatavalid),
      .avm_lm150_conv2d1x1_burstcount(avm_lm150_conv2d1x1_burstcount),
      .avm_lm150_conv2d1x1_writeack(avm_lm150_conv2d1x1_writeack),
      // AVM avm_lm151_conv2d1x1
      .avm_lm151_conv2d1x1_enable(avm_lm151_conv2d1x1_enable),
      .avm_lm151_conv2d1x1_read(avm_lm151_conv2d1x1_read),
      .avm_lm151_conv2d1x1_write(avm_lm151_conv2d1x1_write),
      .avm_lm151_conv2d1x1_address(avm_lm151_conv2d1x1_address),
      .avm_lm151_conv2d1x1_writedata(avm_lm151_conv2d1x1_writedata),
      .avm_lm151_conv2d1x1_byteenable(avm_lm151_conv2d1x1_byteenable),
      .avm_lm151_conv2d1x1_waitrequest(avm_lm151_conv2d1x1_waitrequest),
      .avm_lm151_conv2d1x1_readdata(avm_lm151_conv2d1x1_readdata),
      .avm_lm151_conv2d1x1_readdatavalid(avm_lm151_conv2d1x1_readdatavalid),
      .avm_lm151_conv2d1x1_burstcount(avm_lm151_conv2d1x1_burstcount),
      .avm_lm151_conv2d1x1_writeack(avm_lm151_conv2d1x1_writeack),
      // AVM avm_lm153_conv2d1x1
      .avm_lm153_conv2d1x1_enable(avm_lm153_conv2d1x1_enable),
      .avm_lm153_conv2d1x1_read(avm_lm153_conv2d1x1_read),
      .avm_lm153_conv2d1x1_write(avm_lm153_conv2d1x1_write),
      .avm_lm153_conv2d1x1_address(avm_lm153_conv2d1x1_address),
      .avm_lm153_conv2d1x1_writedata(avm_lm153_conv2d1x1_writedata),
      .avm_lm153_conv2d1x1_byteenable(avm_lm153_conv2d1x1_byteenable),
      .avm_lm153_conv2d1x1_waitrequest(avm_lm153_conv2d1x1_waitrequest),
      .avm_lm153_conv2d1x1_readdata(avm_lm153_conv2d1x1_readdata),
      .avm_lm153_conv2d1x1_readdatavalid(avm_lm153_conv2d1x1_readdatavalid),
      .avm_lm153_conv2d1x1_burstcount(avm_lm153_conv2d1x1_burstcount),
      .avm_lm153_conv2d1x1_writeack(avm_lm153_conv2d1x1_writeack),
      // AVM avm_lm155_conv2d1x1
      .avm_lm155_conv2d1x1_enable(avm_lm155_conv2d1x1_enable),
      .avm_lm155_conv2d1x1_read(avm_lm155_conv2d1x1_read),
      .avm_lm155_conv2d1x1_write(avm_lm155_conv2d1x1_write),
      .avm_lm155_conv2d1x1_address(avm_lm155_conv2d1x1_address),
      .avm_lm155_conv2d1x1_writedata(avm_lm155_conv2d1x1_writedata),
      .avm_lm155_conv2d1x1_byteenable(avm_lm155_conv2d1x1_byteenable),
      .avm_lm155_conv2d1x1_waitrequest(avm_lm155_conv2d1x1_waitrequest),
      .avm_lm155_conv2d1x1_readdata(avm_lm155_conv2d1x1_readdata),
      .avm_lm155_conv2d1x1_readdatavalid(avm_lm155_conv2d1x1_readdatavalid),
      .avm_lm155_conv2d1x1_burstcount(avm_lm155_conv2d1x1_burstcount),
      .avm_lm155_conv2d1x1_writeack(avm_lm155_conv2d1x1_writeack),
      // AVM avm_lm_conv2d1x1
      .avm_lm_conv2d1x1_enable(avm_lm_conv2d1x1_enable),
      .avm_lm_conv2d1x1_read(avm_lm_conv2d1x1_read),
      .avm_lm_conv2d1x1_write(avm_lm_conv2d1x1_write),
      .avm_lm_conv2d1x1_address(avm_lm_conv2d1x1_address),
      .avm_lm_conv2d1x1_writedata(avm_lm_conv2d1x1_writedata),
      .avm_lm_conv2d1x1_byteenable(avm_lm_conv2d1x1_byteenable),
      .avm_lm_conv2d1x1_waitrequest(avm_lm_conv2d1x1_waitrequest),
      .avm_lm_conv2d1x1_readdata(avm_lm_conv2d1x1_readdata),
      .avm_lm_conv2d1x1_readdatavalid(avm_lm_conv2d1x1_readdatavalid),
      .avm_lm_conv2d1x1_burstcount(avm_lm_conv2d1x1_burstcount),
      .avm_lm_conv2d1x1_writeack(avm_lm_conv2d1x1_writeack),
      // AVM avm_unnamed_conv2d1x116_conv2d1x1
      .avm_unnamed_conv2d1x116_conv2d1x1_enable(avm_unnamed_conv2d1x116_conv2d1x1_enable),
      .avm_unnamed_conv2d1x116_conv2d1x1_read(avm_unnamed_conv2d1x116_conv2d1x1_read),
      .avm_unnamed_conv2d1x116_conv2d1x1_write(avm_unnamed_conv2d1x116_conv2d1x1_write),
      .avm_unnamed_conv2d1x116_conv2d1x1_address(avm_unnamed_conv2d1x116_conv2d1x1_address),
      .avm_unnamed_conv2d1x116_conv2d1x1_writedata(avm_unnamed_conv2d1x116_conv2d1x1_writedata),
      .avm_unnamed_conv2d1x116_conv2d1x1_byteenable(avm_unnamed_conv2d1x116_conv2d1x1_byteenable),
      .avm_unnamed_conv2d1x116_conv2d1x1_waitrequest(avm_unnamed_conv2d1x116_conv2d1x1_waitrequest),
      .avm_unnamed_conv2d1x116_conv2d1x1_readdata(avm_unnamed_conv2d1x116_conv2d1x1_readdata),
      .avm_unnamed_conv2d1x116_conv2d1x1_readdatavalid(avm_unnamed_conv2d1x116_conv2d1x1_readdatavalid),
      .avm_unnamed_conv2d1x116_conv2d1x1_burstcount(avm_unnamed_conv2d1x116_conv2d1x1_burstcount),
      .avm_unnamed_conv2d1x116_conv2d1x1_writeack(avm_unnamed_conv2d1x116_conv2d1x1_writeack),
      // AVM avm_memcoalesce_load_conv2d1x1_fpgaunique_176_conv2d1x1
      .avm_memcoalesce_load_conv2d1x1_fpgaunique_176_conv2d1x1_enable(local_avm_aspace64_enable[0][0]),
      .avm_memcoalesce_load_conv2d1x1_fpgaunique_176_conv2d1x1_read(local_avm_aspace64_read[0][0]),
      .avm_memcoalesce_load_conv2d1x1_fpgaunique_176_conv2d1x1_write(local_avm_aspace64_write[0][0]),
      .avm_memcoalesce_load_conv2d1x1_fpgaunique_176_conv2d1x1_address(local_avm_aspace64_address[0][0]),
      .avm_memcoalesce_load_conv2d1x1_fpgaunique_176_conv2d1x1_writedata(local_avm_aspace64_writedata[0][0]),
      .avm_memcoalesce_load_conv2d1x1_fpgaunique_176_conv2d1x1_byteenable(local_avm_aspace64_byteenable[0][0]),
      .avm_memcoalesce_load_conv2d1x1_fpgaunique_176_conv2d1x1_waitrequest(local_avm_aspace64_waitrequest[0][0]),
      .avm_memcoalesce_load_conv2d1x1_fpgaunique_176_conv2d1x1_readdata(local_avm_aspace64_readdata[0][0]),
      .avm_memcoalesce_load_conv2d1x1_fpgaunique_176_conv2d1x1_readdatavalid(local_avm_aspace64_readdatavalid[0][0]),
      .avm_memcoalesce_load_conv2d1x1_fpgaunique_176_conv2d1x1_burstcount(local_avm_aspace64_burstcount[0][0]),
      .avm_memcoalesce_load_conv2d1x1_fpgaunique_176_conv2d1x1_writeack(local_avm_aspace64_writeack[0][0]),
      // AVM avm_memdep_15_conv2d1x1
      .avm_memdep_15_conv2d1x1_enable(local_avm_aspace64_enable[0][1]),
      .avm_memdep_15_conv2d1x1_read(local_avm_aspace64_read[0][1]),
      .avm_memdep_15_conv2d1x1_write(local_avm_aspace64_write[0][1]),
      .avm_memdep_15_conv2d1x1_address(local_avm_aspace64_address[0][1]),
      .avm_memdep_15_conv2d1x1_writedata(local_avm_aspace64_writedata[0][1]),
      .avm_memdep_15_conv2d1x1_byteenable(local_avm_aspace64_byteenable[0][1]),
      .avm_memdep_15_conv2d1x1_waitrequest(local_avm_aspace64_waitrequest[0][1]),
      .avm_memdep_15_conv2d1x1_readdata(local_avm_aspace64_readdata[0][1]),
      .avm_memdep_15_conv2d1x1_readdatavalid(local_avm_aspace64_readdatavalid[0][1]),
      .avm_memdep_15_conv2d1x1_burstcount(local_avm_aspace64_burstcount[0][1]),
      .avm_memdep_15_conv2d1x1_writeack(local_avm_aspace64_writeack[0][1]),
      // AVM avm_memdep_4_conv2d1x1
      .avm_memdep_4_conv2d1x1_enable(local_avm_aspace64_enable[0][2]),
      .avm_memdep_4_conv2d1x1_read(local_avm_aspace64_read[0][2]),
      .avm_memdep_4_conv2d1x1_write(local_avm_aspace64_write[0][2]),
      .avm_memdep_4_conv2d1x1_address(local_avm_aspace64_address[0][2]),
      .avm_memdep_4_conv2d1x1_writedata(local_avm_aspace64_writedata[0][2]),
      .avm_memdep_4_conv2d1x1_byteenable(local_avm_aspace64_byteenable[0][2]),
      .avm_memdep_4_conv2d1x1_waitrequest(local_avm_aspace64_waitrequest[0][2]),
      .avm_memdep_4_conv2d1x1_readdata(local_avm_aspace64_readdata[0][2]),
      .avm_memdep_4_conv2d1x1_readdatavalid(local_avm_aspace64_readdatavalid[0][2]),
      .avm_memdep_4_conv2d1x1_burstcount(local_avm_aspace64_burstcount[0][2]),
      .avm_memdep_4_conv2d1x1_writeack(local_avm_aspace64_writeack[0][2]),
      // AVM avm_unnamed_conv2d1x115_conv2d1x1
      .avm_unnamed_conv2d1x115_conv2d1x1_enable(local_avm_aspace64_enable[0][3]),
      .avm_unnamed_conv2d1x115_conv2d1x1_read(local_avm_aspace64_read[0][3]),
      .avm_unnamed_conv2d1x115_conv2d1x1_write(local_avm_aspace64_write[0][3]),
      .avm_unnamed_conv2d1x115_conv2d1x1_address(local_avm_aspace64_address[0][3]),
      .avm_unnamed_conv2d1x115_conv2d1x1_writedata(local_avm_aspace64_writedata[0][3]),
      .avm_unnamed_conv2d1x115_conv2d1x1_byteenable(local_avm_aspace64_byteenable[0][3]),
      .avm_unnamed_conv2d1x115_conv2d1x1_waitrequest(local_avm_aspace64_waitrequest[0][3]),
      .avm_unnamed_conv2d1x115_conv2d1x1_readdata(local_avm_aspace64_readdata[0][3]),
      .avm_unnamed_conv2d1x115_conv2d1x1_readdatavalid(local_avm_aspace64_readdatavalid[0][3]),
      .avm_unnamed_conv2d1x115_conv2d1x1_burstcount(local_avm_aspace64_burstcount[0][3]),
      .avm_unnamed_conv2d1x115_conv2d1x1_writeack(local_avm_aspace64_writeack[0][3])
   );

   assign lmem_invalid_single_bit = |lmem_invalid_aspaces;
   generate
   begin:local_mem_system_aspace64
      logic local_icm_arb_request [1][4];
      logic local_icm_arb_enable [1][4];
      logic local_icm_arb_read [1][4];
      logic local_icm_arb_write [1][4];
      logic local_icm_arb_burstcount [1][4];
      logic [2:0] local_icm_arb_address [1][4];
      logic [511:0] local_icm_arb_writedata [1][4];
      logic [63:0] local_icm_arb_byteenable [1][4];
      logic local_icm_arb_stall [1][4];
      logic local_icm_wrp_ack [1][4];
      logic local_icm_rrp_datavalid [1][4];
      logic [511:0] local_icm_rrp_data [1][4];
      logic invalid_access_grps;

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         logic [2:0] invalid_access_terms;

         for( __j = 0; __j < 4; __j = __j + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(512),
               .WRITEDATA_W(512),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(64)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace64_enable[__i][__j]),
               .avm_read(local_avm_aspace64_read[__i][__j]),
               .avm_write(local_avm_aspace64_write[__i][__j]),
               .avm_address(local_avm_aspace64_address[__i][__j]),
               .avm_writedata(local_avm_aspace64_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace64_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace64_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace64_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace64_readdatavalid[__i][__j]),
               .avm_burstcount(local_avm_aspace64_burstcount[__i][__j]),
               .avm_writeack(local_avm_aspace64_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 2; __j = __j + 1 )
         begin:bank
            logic port_enable [1:4];
            logic port_read [1:4];
            logic port_write [1:4];
            logic [1:0] port_address [1:4];
            logic [511:0] port_writedata [1:4];
            logic [63:0] port_byteenable [1:4];
            logic port_waitrequest [1:4];
            logic [511:0] port_readdata [1:4];
            logic port_readdatavalid [1:4];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(3),
               .WIDTH(512),
               .MEM_LATENCY(4),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

         end

         for( __j = 0; __j < 4; __j = __j + 1 )
         begin:router
            logic b_arb_request [2];
            logic b_arb_enable [2];
            logic b_arb_read [2];
            logic b_arb_write [2];
            logic b_arb_burstcount [2];
            logic [1:0] b_arb_address [2];
            logic [511:0] b_arb_writedata [2];
            logic [63:0] b_arb_byteenable [2];
            logic b_arb_stall [2];
            logic b_wrp_ack [2];
            logic b_rrp_datavalid [2];
            logic [511:0] b_rrp_data [2];
            logic [1:0] bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(512),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(3),
               .BYTEENA_W(64),
               .NUM_BANKS(2)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select[0] = (local_icm_arb_address[__i][__j][2] == 1'b0);
            assign bank_select[1] = (local_icm_arb_address[__i][__j][2] == 1'b1);
         end

         assign invalid_access_grps = |invalid_access_terms;
         // INST acl_ic_local_mem_router_terminator_m0b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(512),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         acl_ic_local_mem_router_terminator_m0b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[0].b_arb_request[1]),
            .b_arb_read(router[0].b_arb_read[1]),
            .b_arb_write(router[0].b_arb_write[1]),
            .b_arb_stall(router[0].b_arb_stall[1]),
            .b_wrp_ack(router[0].b_wrp_ack[1]),
            .b_rrp_datavalid(router[0].b_rrp_datavalid[1]),
            .b_rrp_data(router[0].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[0])
         );

         // INST acl_ic_local_mem_router_terminator_m1b1 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(512),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         acl_ic_local_mem_router_terminator_m1b1
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[1].b_arb_request[1]),
            .b_arb_read(router[1].b_arb_read[1]),
            .b_arb_write(router[1].b_arb_write[1]),
            .b_arb_stall(router[1].b_arb_stall[1]),
            .b_wrp_ack(router[1].b_wrp_ack[1]),
            .b_rrp_datavalid(router[1].b_rrp_datavalid[1]),
            .b_rrp_data(router[1].b_rrp_data[1]),
            .b_invalid_access(invalid_access_terms[1])
         );

         // INST acl_ic_local_mem_router_terminator_m2b0 of acl_ic_local_mem_router_terminator
         acl_ic_local_mem_router_terminator
         #(
            .DATA_W(512),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         acl_ic_local_mem_router_terminator_m2b0
         (
            .clock(clock),
            .resetn(resetn),
            .b_arb_request(router[2].b_arb_request[0]),
            .b_arb_read(router[2].b_arb_read[0]),
            .b_arb_write(router[2].b_arb_write[0]),
            .b_arb_stall(router[2].b_arb_stall[0]),
            .b_wrp_ack(router[2].b_wrp_ack[0]),
            .b_rrp_datavalid(router[2].b_rrp_datavalid[0]),
            .b_rrp_data(router[2].b_rrp_data[0]),
            .b_invalid_access(invalid_access_terms[2])
         );

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [1:0] icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [1:0] icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of float4_SR_sys_ic_16555887237062060970
            float4_SR_sys_ic_16555887237062060970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [1:0] icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [1:0] icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[3].b_arb_read[1];
            assign icm_in_arb_write[0] = router[3].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[3].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[1];
            assign router[3].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of float4_SR_sys_ic_16555887237062060970
            float4_SR_sys_ic_16555887237062060970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[1] = icm_out_arb_enable;
            assign bank[1].port_read[1] = icm_out_arb_read;
            assign bank[1].port_write[1] = icm_out_arb_write;
            assign bank[1].port_address[1] = icm_out_arb_address;
            assign bank[1].port_writedata[1] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[1];
            assign icm_out_rrp_data = bank[1].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [1:0] icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [1:0] icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of float4_SR_sys_ic_16555887237062060970
            float4_SR_sys_ic_16555887237062060970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank1
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [1:0] icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [1:0] icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[1];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[1];
            assign icm_in_arb_read[0] = router[2].b_arb_read[1];
            assign icm_in_arb_write[0] = router[2].b_arb_write[1];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[1];
            assign icm_in_arb_address[0] = router[2].b_arb_address[1];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[1];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[1];
            assign router[2].b_arb_stall[1] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[1] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[1] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[1] = icm_in_rrp_data[0];
            // INST data_ic of float4_SR_sys_ic_16555887237062060970
            float4_SR_sys_ic_16555887237062060970 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[1].port_enable[2] = icm_out_arb_enable;
            assign bank[1].port_read[2] = icm_out_arb_read;
            assign bank[1].port_write[2] = icm_out_arb_write;
            assign bank[1].port_address[2] = icm_out_arb_address;
            assign bank[1].port_writedata[2] = icm_out_arb_writedata;
            assign bank[1].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[1].port_waitrequest[2];
            assign icm_out_rrp_data = bank[1].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[1].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [1:0] icm_in_arb_address [1];
            logic [511:0] icm_in_arb_writedata [1];
            logic [63:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [511:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [1:0] icm_out_arb_address;
            logic [511:0] icm_out_arb_writedata;
            logic [63:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [511:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of float4_SR_sys_ic_6500269434899354312
            float4_SR_sys_ic_6500269434899354312 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port3bank1
            assign bank[1].port_enable[3] = '0;
            assign bank[1].port_read[3] = '0;
            assign bank[1].port_write[3] = '0;
            assign bank[1].port_address[3] = '0;
            assign bank[1].port_writedata[3] = '0;
            assign bank[1].port_byteenable[3] = '0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank0
            assign bank[0].port_enable[4] = '0;
            assign bank[0].port_read[4] = '0;
            assign bank[0].port_write[4] = '0;
            assign bank[0].port_address[4] = '0;
            assign bank[0].port_writedata[4] = '0;
            assign bank[0].port_byteenable[4] = '0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port4bank1
            assign bank[1].port_enable[4] = '0;
            assign bank[1].port_read[4] = '0;
            assign bank[1].port_write[4] = '0;
            assign bank[1].port_address[4] = '0;
            assign bank[1].port_writedata[4] = '0;
            assign bank[1].port_byteenable[4] = '0;
         end

      end

      assign lmem_invalid_aspaces = |invalid_access_grps;
   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE float4_SR_sys_ic_16555887237062060970
/////////////////////////////////////////////////////////////////
module float4_SR_sys_ic_16555887237062060970
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [1:0] m_arb_address [1],
   input logic [511:0] m_arb_writedata [1],
   input logic [63:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [511:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [1:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(2),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(2),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(2),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(2),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(2),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(2),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE float4_SR_sys_ic_6500269434899354312
/////////////////////////////////////////////////////////////////
module float4_SR_sys_ic_6500269434899354312
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [1:0] m_arb_address [1],
   input logic [511:0] m_arb_writedata [1],
   input logic [63:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [511:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [1:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(2),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(2),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(2),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(2),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(2),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(2),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE cra_ring_wrapper
/////////////////////////////////////////////////////////////////
module cra_ring_wrapper
(
   input logic clock,
   input logic resetn,
   // AVS cra_ring_root_avs
   input logic cra_ring_root_avs_enable,
   input logic cra_ring_root_avs_read,
   input logic cra_ring_root_avs_write,
   input logic [6:0] cra_ring_root_avs_address,
   input logic [63:0] cra_ring_root_avs_writedata,
   input logic [7:0] cra_ring_root_avs_byteenable,
   output logic cra_ring_root_avs_waitrequest,
   output logic [63:0] cra_ring_root_avs_readdata,
   output logic cra_ring_root_avs_readdatavalid,
   // AVM cra_ring_avm_0
   output logic cra_ring_avm_0_enable,
   output logic cra_ring_avm_0_read,
   output logic cra_ring_avm_0_write,
   output logic [4:0] cra_ring_avm_0_address,
   output logic [63:0] cra_ring_avm_0_writedata,
   output logic [7:0] cra_ring_avm_0_byteenable,
   input logic [63:0] cra_ring_avm_0_readdata,
   input logic cra_ring_avm_0_readdatavalid,
   output logic cra_ring_avm_0_burstcount
);
   logic cra_ring_root_ring_in_wire_read;
   logic cra_ring_root_ring_in_wire_write;
   logic [4:0] cra_ring_root_ring_in_wire_addr;
   logic [63:0] cra_ring_root_ring_in_wire_data;
   logic [7:0] cra_ring_root_ring_in_wire_byteena;
   logic cra_ring_root_ring_in_wire_datavalid;
   logic cra_ring_root_ring_out_wire_read;
   logic cra_ring_root_ring_out_wire_write;
   logic [6:0] cra_ring_root_ring_out_wire_addr;
   logic [63:0] cra_ring_root_ring_out_wire_data;
   logic [7:0] cra_ring_root_ring_out_wire_byteena;
   logic cra_ring_root_ring_out_wire_datavalid;
   logic cra_ring_rom_avm_enable;
   logic cra_ring_rom_avm_read;
   logic cra_ring_rom_avm_write;
   logic [5:0] cra_ring_rom_avm_address;
   logic [63:0] cra_ring_rom_avm_writedata;
   logic [7:0] cra_ring_rom_avm_byteenable;
   logic [63:0] cra_ring_rom_avm_readdata;
   logic cra_ring_rom_avm_readdatavalid;
   logic cra_ring_rom_avm_burstcount;
   logic cra_ring_rom_ring_out_wire_read;
   logic cra_ring_rom_ring_out_wire_write;
   logic [4:0] cra_ring_rom_ring_out_wire_addr;
   logic [63:0] cra_ring_rom_ring_out_wire_data;
   logic [7:0] cra_ring_rom_ring_out_wire_byteena;
   logic cra_ring_rom_ring_out_wire_datavalid;
   logic cra_ring_node_ring_out_wire_0_read;
   logic cra_ring_node_ring_out_wire_0_write;
   logic [4:0] cra_ring_node_ring_out_wire_0_addr;
   logic [63:0] cra_ring_node_ring_out_wire_0_data;
   logic [7:0] cra_ring_node_ring_out_wire_0_byteena;
   logic cra_ring_node_ring_out_wire_0_datavalid;

   // INST cra_root of cra_ring_root
   cra_ring_root
   #(
      .ADDR_W(5),
      .ALLOW_HIGH_SPEED_FIFO_USAGE(0),
      .ASYNC_RESET(1),
      .DATA_W(64),
      .ID_W(0),
      .ROM_ENABLE(1),
      .ROM_EXT_W(1),
      .SLAVE_PORT_WAITREQUEST_ALLOWANCE(0),
      .SYNCHRONIZE_RESET(0)
   )
   cra_root
   (
      // AVS avs
      .avs_enable(cra_ring_root_avs_enable),
      .avs_read(cra_ring_root_avs_read),
      .avs_write(cra_ring_root_avs_write),
      .avs_addr(cra_ring_root_avs_address),
      .avs_writedata(cra_ring_root_avs_writedata),
      .avs_byteena(cra_ring_root_avs_byteenable),
      .avs_waitrequest(cra_ring_root_avs_waitrequest),
      .avs_readdata(cra_ring_root_avs_readdata),
      .avs_readdatavalid(cra_ring_root_avs_readdatavalid),
      // AVS ri
      .ri_read(cra_ring_node_ring_out_wire_0_read),
      .ri_write(cra_ring_node_ring_out_wire_0_write),
      .ri_addr(cra_ring_node_ring_out_wire_0_addr),
      .ri_data(cra_ring_node_ring_out_wire_0_data),
      .ri_byteena(cra_ring_node_ring_out_wire_0_byteena),
      .ri_datavalid(cra_ring_node_ring_out_wire_0_datavalid),
      // AVS ro
      .ro_read(cra_ring_root_ring_out_wire_read),
      .ro_write(cra_ring_root_ring_out_wire_write),
      .ro_addr(cra_ring_root_ring_out_wire_addr),
      .ro_data(cra_ring_root_ring_out_wire_data),
      .ro_byteena(cra_ring_root_ring_out_wire_byteena),
      .ro_datavalid(cra_ring_root_ring_out_wire_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST cra_ring_rom of cra_ring_rom
   cra_ring_rom
   #(
      .ASYNC_RESET(1),
      .DATA_W(64),
      .ID_W(0),
      .RING_ADDR_W(5),
      .ROM_EXT_W(1),
      .ROM_W(6),
      .SYNCHRONIZE_RESET(0)
   )
   cra_ring_rom
   (
      // AVM avm
      .avm_enable(cra_ring_rom_avm_enable),
      .avm_read(cra_ring_rom_avm_read),
      .avm_write(cra_ring_rom_avm_write),
      .avm_addr(cra_ring_rom_avm_address),
      .avm_writedata(cra_ring_rom_avm_writedata),
      .avm_byteenable(cra_ring_rom_avm_byteenable),
      .avm_readdata(cra_ring_rom_avm_readdata),
      .avm_readdatavalid(cra_ring_rom_avm_readdatavalid),
      .avm_burstcount(cra_ring_rom_avm_burstcount),
      // AVS ri
      .ri_read(cra_ring_root_ring_out_wire_read),
      .ri_write(cra_ring_root_ring_out_wire_write),
      .ri_addr(cra_ring_root_ring_out_wire_addr),
      .ri_data(cra_ring_root_ring_out_wire_data),
      .ri_byteena(cra_ring_root_ring_out_wire_byteena),
      .ri_datavalid(cra_ring_root_ring_out_wire_datavalid),
      // AVS ro
      .ro_read(cra_ring_rom_ring_out_wire_read),
      .ro_write(cra_ring_rom_ring_out_wire_write),
      .ro_addr(cra_ring_rom_ring_out_wire_addr),
      .ro_data(cra_ring_rom_ring_out_wire_data),
      .ro_byteena(cra_ring_rom_ring_out_wire_byteena),
      .ro_datavalid(cra_ring_rom_ring_out_wire_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST cra_ring_node_avm_wire_0_cra_ring_inst_0 of cra_ring_node
   cra_ring_node
   #(
      .ASYNC_RESET(1),
      .CRA_ADDR_W(5),
      .DATA_W(64),
      .ID(0),
      .ID_W(0),
      .RING_ADDR_W(5),
      .SYNCHRONIZE_RESET(0)
   )
   cra_ring_node_avm_wire_0_cra_ring_inst_0
   (
      // AVM avm
      .avm_enable(cra_ring_avm_0_enable),
      .avm_read(cra_ring_avm_0_read),
      .avm_write(cra_ring_avm_0_write),
      .avm_addr(cra_ring_avm_0_address),
      .avm_writedata(cra_ring_avm_0_writedata),
      .avm_byteena(cra_ring_avm_0_byteenable),
      .avm_readdata(cra_ring_avm_0_readdata),
      .avm_readdatavalid(cra_ring_avm_0_readdatavalid),
      .avm_burstcount(cra_ring_avm_0_burstcount),
      // AVS ri
      .ri_read(cra_ring_rom_ring_out_wire_read),
      .ri_write(cra_ring_rom_ring_out_wire_write),
      .ri_addr(cra_ring_rom_ring_out_wire_addr),
      .ri_data(cra_ring_rom_ring_out_wire_data),
      .ri_byteena(cra_ring_rom_ring_out_wire_byteena),
      .ri_datavalid(cra_ring_rom_ring_out_wire_datavalid),
      // AVS ro
      .ro_read(cra_ring_node_ring_out_wire_0_read),
      .ro_write(cra_ring_node_ring_out_wire_0_write),
      .ro_addr(cra_ring_node_ring_out_wire_0_addr),
      .ro_data(cra_ring_node_ring_out_wire_0_data),
      .ro_byteena(cra_ring_node_ring_out_wire_0_byteena),
      .ro_datavalid(cra_ring_node_ring_out_wire_0_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST sys_description_rom of acl_rom_module
   acl_rom_module
   #(
      .ADDRESS_WIDTH(6),
      .ASYNC_RESET(1),
      .DATA_WIDTH(64),
      .FAMILY("Arria 10"),
      .INIT_FILE("sys_description.hex"),
      .SYNCHRONIZE_RESET(0)
   )
   sys_description_rom
   (
      .clk(clock),
      .rst_n(resetn),
      .read(cra_ring_rom_avm_read),
      .readdatavalid(cra_ring_rom_avm_readdatavalid),
      .address(cra_ring_rom_avm_address),
      .readdata(cra_ring_rom_avm_readdata)
   );

endmodule

