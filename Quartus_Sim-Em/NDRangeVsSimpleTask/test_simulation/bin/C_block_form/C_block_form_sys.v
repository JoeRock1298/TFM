// (c) 1992-2021 Intel Corporation.                            
// Intel, the Intel logo, Intel, MegaCore, NIOS II, Quartus and TalkBack words    
// and logos are trademarks of Intel Corporation or its subsidiaries in the U.S.  
// and/or other countries. Other marks and brands may be claimed as the property  
// of others. See Trademarks on intel.com for full list of Intel trademarks or    
// the Trademarks & Brands Names Database (if Intel) or See www.Intel.com/legal (if Altera) 
// Your use of Intel Corporation's design tools, logic functions and other        
// software and tools, and its AMPP partner logic functions, and any output       
// files any of the foregoing (including device programming or simulation         
// files), and any associated documentation or information are expressly subject  
// to the terms and conditions of the Altera Program License Subscription         
// Agreement, Intel MegaCore Function License Agreement, or other applicable      
// license agreement, including, without limitation, that your use is for the     
// sole purpose of programming logic devices manufactured by Intel and sold by    
// Intel or its authorized distributors.  Please refer to the applicable          
// agreement for further details.                                                 
// Generated by Intel(R) FPGA SDK for OpenCL(TM), Version 21.1.0 Build 173.3 Pro Edition, Copyright (c) 2021 Intel Corporation

/////////////////////////////////////////////////////////////////
// MODULE C_block_form_sys
/////////////////////////////////////////////////////////////////
module C_block_form_sys
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic [63:0] device_exception_bus,
   output logic kernel_irq,
   // AVM avm_mem_gmem0_DDR_port_0_0_rw
   output logic avm_mem_gmem0_DDR_port_0_0_rw_enable,
   output logic avm_mem_gmem0_DDR_port_0_0_rw_read,
   output logic avm_mem_gmem0_DDR_port_0_0_rw_write,
   output logic [30:0] avm_mem_gmem0_DDR_port_0_0_rw_address,
   output logic [511:0] avm_mem_gmem0_DDR_port_0_0_rw_writedata,
   output logic [63:0] avm_mem_gmem0_DDR_port_0_0_rw_byteenable,
   input logic avm_mem_gmem0_DDR_port_0_0_rw_waitrequest,
   input logic [511:0] avm_mem_gmem0_DDR_port_0_0_rw_readdata,
   input logic avm_mem_gmem0_DDR_port_0_0_rw_readdatavalid,
   output logic [4:0] avm_mem_gmem0_DDR_port_0_0_rw_burstcount,
   input logic avm_mem_gmem0_DDR_port_0_0_rw_writeack,
   // AVS cra_ring_root_avs
   input logic cra_ring_root_avs_enable,
   input logic cra_ring_root_avs_read,
   input logic cra_ring_root_avs_write,
   input logic [6:0] cra_ring_root_avs_address,
   input logic [63:0] cra_ring_root_avs_writedata,
   input logic [7:0] cra_ring_root_avs_byteenable,
   output logic cra_ring_root_avs_waitrequest,
   output logic [63:0] cra_ring_root_avs_readdata,
   output logic cra_ring_root_avs_readdatavalid
);
   logic cra_ring_node_avm_wire_0_enable;
   logic cra_ring_node_avm_wire_0_read;
   logic cra_ring_node_avm_wire_0_write;
   logic [4:0] cra_ring_node_avm_wire_0_address;
   logic [63:0] cra_ring_node_avm_wire_0_writedata;
   logic [7:0] cra_ring_node_avm_wire_0_byteenable;
   logic [63:0] cra_ring_node_avm_wire_0_readdata;
   logic cra_ring_node_avm_wire_0_readdatavalid;
   logic cra_ring_node_avm_wire_0_burstcount;
   logic kernel_irqs;
   logic gmem0_DDR_global_avm_enable [3];
   logic gmem0_DDR_global_avm_read [3];
   logic gmem0_DDR_global_avm_write [3];
   logic [30:0] gmem0_DDR_global_avm_address [3];
   logic [511:0] gmem0_DDR_global_avm_writedata [3];
   logic [63:0] gmem0_DDR_global_avm_byteenable [3];
   logic gmem0_DDR_global_avm_waitrequest [3];
   logic [511:0] gmem0_DDR_global_avm_readdata [3];
   logic gmem0_DDR_global_avm_readdatavalid [3];
   logic [4:0] gmem0_DDR_global_avm_burstcount [3];
   logic gmem0_DDR_global_avm_writeack [3];

   // INST mmul_std_ic_inst of mmul_std_ic_partition_wrapper
   mmul_std_ic_partition_wrapper mmul_std_ic_inst
   (
      .clock(clock),
      .clock2x(clock2x),
      .resetn(resetn),
      .cra_irq_mmul(kernel_irqs),
      // AVS avs_mmul_cra
      .avs_mmul_cra_enable(cra_ring_node_avm_wire_0_enable),
      .avs_mmul_cra_read(cra_ring_node_avm_wire_0_read),
      .avs_mmul_cra_write(cra_ring_node_avm_wire_0_write),
      .avs_mmul_cra_address(cra_ring_node_avm_wire_0_address),
      .avs_mmul_cra_writedata(cra_ring_node_avm_wire_0_writedata),
      .avs_mmul_cra_byteenable(cra_ring_node_avm_wire_0_byteenable),
      .avs_mmul_cra_readdata(cra_ring_node_avm_wire_0_readdata),
      .avs_mmul_cra_readdatavalid(cra_ring_node_avm_wire_0_readdatavalid),
      // AVM mmul_0_avm_lm76_mmul
      .mmul_0_avm_lm76_mmul_enable(gmem0_DDR_global_avm_enable[0]),
      .mmul_0_avm_lm76_mmul_read(gmem0_DDR_global_avm_read[0]),
      .mmul_0_avm_lm76_mmul_write(gmem0_DDR_global_avm_write[0]),
      .mmul_0_avm_lm76_mmul_address(gmem0_DDR_global_avm_address[0]),
      .mmul_0_avm_lm76_mmul_writedata(gmem0_DDR_global_avm_writedata[0]),
      .mmul_0_avm_lm76_mmul_byteenable(gmem0_DDR_global_avm_byteenable[0]),
      .mmul_0_avm_lm76_mmul_waitrequest(gmem0_DDR_global_avm_waitrequest[0]),
      .mmul_0_avm_lm76_mmul_readdata(gmem0_DDR_global_avm_readdata[0]),
      .mmul_0_avm_lm76_mmul_readdatavalid(gmem0_DDR_global_avm_readdatavalid[0]),
      .mmul_0_avm_lm76_mmul_burstcount(gmem0_DDR_global_avm_burstcount[0]),
      .mmul_0_avm_lm76_mmul_writeack(gmem0_DDR_global_avm_writeack[0]),
      // AVM mmul_0_avm_lm_mmul
      .mmul_0_avm_lm_mmul_enable(gmem0_DDR_global_avm_enable[1]),
      .mmul_0_avm_lm_mmul_read(gmem0_DDR_global_avm_read[1]),
      .mmul_0_avm_lm_mmul_write(gmem0_DDR_global_avm_write[1]),
      .mmul_0_avm_lm_mmul_address(gmem0_DDR_global_avm_address[1]),
      .mmul_0_avm_lm_mmul_writedata(gmem0_DDR_global_avm_writedata[1]),
      .mmul_0_avm_lm_mmul_byteenable(gmem0_DDR_global_avm_byteenable[1]),
      .mmul_0_avm_lm_mmul_waitrequest(gmem0_DDR_global_avm_waitrequest[1]),
      .mmul_0_avm_lm_mmul_readdata(gmem0_DDR_global_avm_readdata[1]),
      .mmul_0_avm_lm_mmul_readdatavalid(gmem0_DDR_global_avm_readdatavalid[1]),
      .mmul_0_avm_lm_mmul_burstcount(gmem0_DDR_global_avm_burstcount[1]),
      .mmul_0_avm_lm_mmul_writeack(gmem0_DDR_global_avm_writeack[1]),
      // AVM mmul_0_avm_unnamed_mmul7_mmul
      .mmul_0_avm_unnamed_mmul7_mmul_enable(gmem0_DDR_global_avm_enable[2]),
      .mmul_0_avm_unnamed_mmul7_mmul_read(gmem0_DDR_global_avm_read[2]),
      .mmul_0_avm_unnamed_mmul7_mmul_write(gmem0_DDR_global_avm_write[2]),
      .mmul_0_avm_unnamed_mmul7_mmul_address(gmem0_DDR_global_avm_address[2]),
      .mmul_0_avm_unnamed_mmul7_mmul_writedata(gmem0_DDR_global_avm_writedata[2]),
      .mmul_0_avm_unnamed_mmul7_mmul_byteenable(gmem0_DDR_global_avm_byteenable[2]),
      .mmul_0_avm_unnamed_mmul7_mmul_waitrequest(gmem0_DDR_global_avm_waitrequest[2]),
      .mmul_0_avm_unnamed_mmul7_mmul_readdata(gmem0_DDR_global_avm_readdata[2]),
      .mmul_0_avm_unnamed_mmul7_mmul_readdatavalid(gmem0_DDR_global_avm_readdatavalid[2]),
      .mmul_0_avm_unnamed_mmul7_mmul_burstcount(gmem0_DDR_global_avm_burstcount[2]),
      .mmul_0_avm_unnamed_mmul7_mmul_writeack(gmem0_DDR_global_avm_writeack[2])
   );

   assign kernel_irq = |kernel_irqs;
   // INST global_memory_tree0_inst0 of global_memory_tree0_mod
   global_memory_tree0_mod global_memory_tree0_inst0
   (
      .resetn(resetn),
      .clock(clock),
      .clock2x(clock2x),
      // AVM gmem0_DDR_mtree_avm
      .gmem0_DDR_mtree_avm_enable(gmem0_DDR_global_avm_enable),
      .gmem0_DDR_mtree_avm_read(gmem0_DDR_global_avm_read),
      .gmem0_DDR_mtree_avm_write(gmem0_DDR_global_avm_write),
      .gmem0_DDR_mtree_avm_address(gmem0_DDR_global_avm_address),
      .gmem0_DDR_mtree_avm_writedata(gmem0_DDR_global_avm_writedata),
      .gmem0_DDR_mtree_avm_byteenable(gmem0_DDR_global_avm_byteenable),
      .gmem0_DDR_mtree_avm_waitrequest(gmem0_DDR_global_avm_waitrequest),
      .gmem0_DDR_mtree_avm_readdata(gmem0_DDR_global_avm_readdata),
      .gmem0_DDR_mtree_avm_readdatavalid(gmem0_DDR_global_avm_readdatavalid),
      .gmem0_DDR_mtree_avm_burstcount(gmem0_DDR_global_avm_burstcount),
      .gmem0_DDR_mtree_avm_writeack(gmem0_DDR_global_avm_writeack),
      // AVM mtree_mem_gmem0_DDR_port_0_0_rw
      .mtree_mem_gmem0_DDR_port_0_0_rw_enable(avm_mem_gmem0_DDR_port_0_0_rw_enable),
      .mtree_mem_gmem0_DDR_port_0_0_rw_read(avm_mem_gmem0_DDR_port_0_0_rw_read),
      .mtree_mem_gmem0_DDR_port_0_0_rw_write(avm_mem_gmem0_DDR_port_0_0_rw_write),
      .mtree_mem_gmem0_DDR_port_0_0_rw_address(avm_mem_gmem0_DDR_port_0_0_rw_address),
      .mtree_mem_gmem0_DDR_port_0_0_rw_writedata(avm_mem_gmem0_DDR_port_0_0_rw_writedata),
      .mtree_mem_gmem0_DDR_port_0_0_rw_byteenable(avm_mem_gmem0_DDR_port_0_0_rw_byteenable),
      .mtree_mem_gmem0_DDR_port_0_0_rw_waitrequest(avm_mem_gmem0_DDR_port_0_0_rw_waitrequest),
      .mtree_mem_gmem0_DDR_port_0_0_rw_readdata(avm_mem_gmem0_DDR_port_0_0_rw_readdata),
      .mtree_mem_gmem0_DDR_port_0_0_rw_readdatavalid(avm_mem_gmem0_DDR_port_0_0_rw_readdatavalid),
      .mtree_mem_gmem0_DDR_port_0_0_rw_burstcount(avm_mem_gmem0_DDR_port_0_0_rw_burstcount),
      .mtree_mem_gmem0_DDR_port_0_0_rw_writeack(avm_mem_gmem0_DDR_port_0_0_rw_writeack)
   );

   // INST cra_ring_wrapper_inst of cra_ring_wrapper
   cra_ring_wrapper cra_ring_wrapper_inst
   (
      .clock(clock),
      .resetn(resetn),
      // AVS cra_ring_root_avs
      .cra_ring_root_avs_enable(cra_ring_root_avs_enable),
      .cra_ring_root_avs_read(cra_ring_root_avs_read),
      .cra_ring_root_avs_write(cra_ring_root_avs_write),
      .cra_ring_root_avs_address(cra_ring_root_avs_address),
      .cra_ring_root_avs_writedata(cra_ring_root_avs_writedata),
      .cra_ring_root_avs_byteenable(cra_ring_root_avs_byteenable),
      .cra_ring_root_avs_waitrequest(cra_ring_root_avs_waitrequest),
      .cra_ring_root_avs_readdata(cra_ring_root_avs_readdata),
      .cra_ring_root_avs_readdatavalid(cra_ring_root_avs_readdatavalid),
      // AVM cra_ring_avm_0
      .cra_ring_avm_0_enable(cra_ring_node_avm_wire_0_enable),
      .cra_ring_avm_0_read(cra_ring_node_avm_wire_0_read),
      .cra_ring_avm_0_write(cra_ring_node_avm_wire_0_write),
      .cra_ring_avm_0_address(cra_ring_node_avm_wire_0_address),
      .cra_ring_avm_0_writedata(cra_ring_node_avm_wire_0_writedata),
      .cra_ring_avm_0_byteenable(cra_ring_node_avm_wire_0_byteenable),
      .cra_ring_avm_0_readdata(cra_ring_node_avm_wire_0_readdata),
      .cra_ring_avm_0_readdatavalid(cra_ring_node_avm_wire_0_readdatavalid),
      .cra_ring_avm_0_burstcount(cra_ring_node_avm_wire_0_burstcount)
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE mmul_std_ic_partition_wrapper
/////////////////////////////////////////////////////////////////
module mmul_std_ic_partition_wrapper
(
   input logic clock,
   input logic clock2x,
   input logic resetn,
   output logic cra_irq_mmul,
   // AVS avs_mmul_cra
   input logic avs_mmul_cra_enable,
   input logic avs_mmul_cra_read,
   input logic avs_mmul_cra_write,
   input logic [4:0] avs_mmul_cra_address,
   input logic [63:0] avs_mmul_cra_writedata,
   input logic [7:0] avs_mmul_cra_byteenable,
   output logic [63:0] avs_mmul_cra_readdata,
   output logic avs_mmul_cra_readdatavalid,
   // AVM mmul_0_avm_lm76_mmul
   output logic mmul_0_avm_lm76_mmul_enable,
   output logic mmul_0_avm_lm76_mmul_read,
   output logic mmul_0_avm_lm76_mmul_write,
   output logic [30:0] mmul_0_avm_lm76_mmul_address,
   output logic [511:0] mmul_0_avm_lm76_mmul_writedata,
   output logic [63:0] mmul_0_avm_lm76_mmul_byteenable,
   input logic mmul_0_avm_lm76_mmul_waitrequest,
   input logic [511:0] mmul_0_avm_lm76_mmul_readdata,
   input logic mmul_0_avm_lm76_mmul_readdatavalid,
   output logic [4:0] mmul_0_avm_lm76_mmul_burstcount,
   input logic mmul_0_avm_lm76_mmul_writeack,
   // AVM mmul_0_avm_lm_mmul
   output logic mmul_0_avm_lm_mmul_enable,
   output logic mmul_0_avm_lm_mmul_read,
   output logic mmul_0_avm_lm_mmul_write,
   output logic [30:0] mmul_0_avm_lm_mmul_address,
   output logic [511:0] mmul_0_avm_lm_mmul_writedata,
   output logic [63:0] mmul_0_avm_lm_mmul_byteenable,
   input logic mmul_0_avm_lm_mmul_waitrequest,
   input logic [511:0] mmul_0_avm_lm_mmul_readdata,
   input logic mmul_0_avm_lm_mmul_readdatavalid,
   output logic [4:0] mmul_0_avm_lm_mmul_burstcount,
   input logic mmul_0_avm_lm_mmul_writeack,
   // AVM mmul_0_avm_unnamed_mmul7_mmul
   output logic mmul_0_avm_unnamed_mmul7_mmul_enable,
   output logic mmul_0_avm_unnamed_mmul7_mmul_read,
   output logic mmul_0_avm_unnamed_mmul7_mmul_write,
   output logic [30:0] mmul_0_avm_unnamed_mmul7_mmul_address,
   output logic [511:0] mmul_0_avm_unnamed_mmul7_mmul_writedata,
   output logic [63:0] mmul_0_avm_unnamed_mmul7_mmul_byteenable,
   input logic mmul_0_avm_unnamed_mmul7_mmul_waitrequest,
   input logic [511:0] mmul_0_avm_unnamed_mmul7_mmul_readdata,
   input logic mmul_0_avm_unnamed_mmul7_mmul_readdatavalid,
   output logic [4:0] mmul_0_avm_unnamed_mmul7_mmul_burstcount,
   input logic mmul_0_avm_unnamed_mmul7_mmul_writeack
);
   logic mmul_start;
   logic [0:0] mmul_start_chain;
   logic [0:0] mmul_start_kernel_copy;
   logic [0:0] mmul_start_task_fd;
   logic [0:0] mmul_start_finish_element;
   logic mmul_finish;
   logic [0:0] mmul_finish_kernel_copy;
   logic [0:0] mmul_finish_chain;
   logic [63:0] mmul_global_size [2:0];
   logic [31:0] mmul_num_groups [2:0];
   logic [31:0] mmul_local_size [2:0];
   logic [63:0] mmul_global_offset [2:0];
   logic [31:0] mmul_work_dim;
   logic [31:0] mmul_wg_size;
   logic [0:0] mmul_wg_disp_stall_in;
   logic [0:0] mmul_wg_disp_stall_in_lookahead;
   logic [0:0] mmul_wg_disp_valid_out;
   logic mmul_wg_disp_start_out;
   logic [31:0] mmul_wg_disp_group_id_out [2:0];
   logic [31:0] mmul_wg_disp_global_id_base_out [2:0];
   logic mmul_wg_disp_dispatched_all_groups;
   logic [63:0] mmul_global_id [1][2:0];
   logic [31:0] mmul_local_id [1][2:0];
   logic [31:0] mmul_group_id [1][2:0];
   logic [0:0] mmul_pending_write;
   logic [0:0] mmul_lsu_active;
   logic [0:0] mmul_valid_in;
   logic [0:0] mmul_valid_out;
   logic [0:0] mmul_stall_in;
   logic [0:0] mmul_stall_out;
   logic mmul_cra_pending_write;
   logic mmul_cra_lsu_active;
   logic mmul_cra_valid_in;
   logic [287:0] mmul_kernel_arguments;

   assign mmul_start_chain[0] = mmul_start;
   assign mmul_finish_chain[0] = 1'b1;
   assign mmul_cra_pending_write = |mmul_pending_write;
   assign mmul_cra_lsu_active = |mmul_lsu_active;
   assign mmul_cra_valid_in = |mmul_valid_in;
   assign mmul_stall_in = 0;
   // INST mmul_workgroup_dispatcher of acl_work_group_dispatcher
   acl_work_group_dispatcher
   #(
      .WIDTH(32),
      .NUM_COPIES(1),
      .RUN_FOREVER(0),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   mmul_workgroup_dispatcher
   (
      .clock(clock),
      .resetn(resetn),
      .start(mmul_start),
      .num_groups(mmul_num_groups),
      .local_size(mmul_local_size),
      .stall_in(mmul_wg_disp_stall_in),
      .stall_in_lookahead(mmul_wg_disp_stall_in_lookahead),
      .valid_out(mmul_wg_disp_valid_out),
      .group_id_out(mmul_wg_disp_group_id_out),
      .global_id_base_out(mmul_wg_disp_global_id_base_out),
      .start_out(mmul_wg_disp_start_out),
      .dispatched_all_groups(mmul_wg_disp_dispatched_all_groups)
   );

   // INST mmul_finish_detector of acl_kernel_finish_detector
   acl_kernel_finish_detector
   #(
      .NUM_COPIES(1),
      .WG_SIZE_W(32),
      .GLOBAL_ID_W(32),
      .TESSELLATION_SIZE(19),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0)
   )
   mmul_finish_detector
   (
      .clock(clock),
      .resetn(resetn),
      .start(mmul_start),
      .wg_size(mmul_wg_size),
      .wg_dispatch_valid_out(mmul_wg_disp_valid_out),
      .wg_dispatch_stall_in(mmul_wg_disp_stall_in),
      .dispatched_all_groups(mmul_wg_disp_dispatched_all_groups),
      .kernel_copy_valid_out(mmul_valid_out),
      .kernel_copy_stall_in(mmul_stall_in),
      .pending_writes(mmul_cra_pending_write),
      .finish(mmul_finish)
   );

   // INST mmul_cra_slave_inst of mmul_function_cra_slave
   mmul_function_cra_slave mmul_cra_slave_inst
   (
      .clock(clock),
      .resetn(resetn),
      .start(mmul_start),
      .finish(mmul_finish),
      .global_offset_0(mmul_global_offset[0]),
      .global_offset_1(mmul_global_offset[1]),
      .global_offset_2(mmul_global_offset[2]),
      .work_dim(mmul_work_dim),
      .has_a_lsu_active(mmul_cra_lsu_active),
      .has_a_write_pending(mmul_cra_pending_write),
      .valid_in(mmul_cra_valid_in),
      .global_size_0(mmul_global_size[0]),
      .global_size_1(mmul_global_size[1]),
      .global_size_2(mmul_global_size[2]),
      .num_groups_0(mmul_num_groups[0]),
      .num_groups_1(mmul_num_groups[1]),
      .num_groups_2(mmul_num_groups[2]),
      .local_size_0(mmul_local_size[0]),
      .local_size_1(mmul_local_size[1]),
      .local_size_2(mmul_local_size[2]),
      .workgroup_size(mmul_wg_size),
      .kernel_arguments(mmul_kernel_arguments),
      .cra_irq(cra_irq_mmul),
      // AVS avs_cra
      .avs_cra_enable(avs_mmul_cra_enable),
      .avs_cra_read(avs_mmul_cra_read),
      .avs_cra_write(avs_mmul_cra_write),
      .avs_cra_address(avs_mmul_cra_address),
      .avs_cra_writedata(avs_mmul_cra_writedata),
      .avs_cra_byteenable(avs_mmul_cra_byteenable),
      .avs_cra_readdata(avs_mmul_cra_readdata),
      .avs_cra_readdatavalid(avs_mmul_cra_readdatavalid)
   );

   // INST mmul_id_iter_inst_0 of acl_id_iterator
   acl_id_iterator
   #(
      .WIDTH(32),
      .LOCAL_WIDTH_X(7),
      .LOCAL_WIDTH_Y(7),
      .LOCAL_WIDTH_Z(7),
      .STALL_OUT_LOOKAHEAD_COUNT(1),
      .VALID_OUT_LOOKAHEAD_COUNT(3),
      .ENABLE_TESSELLATION(1),
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0),
      .HYPER_PIPELINE(0),
      .USE_GLOBAL_WORK_OFFSET(1)
   )
   mmul_id_iter_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start(mmul_wg_disp_start_out),
      .valid_in(mmul_wg_disp_valid_out[0]),
      .stall_out(mmul_wg_disp_stall_in[0]),
      .stall_out_lookahead(mmul_wg_disp_stall_in_lookahead[0]),
      .stall_in(mmul_stall_out[0]),
      .valid_out(mmul_valid_in[0]),
      .group_id_in(mmul_wg_disp_group_id_out),
      .global_id_base_in(mmul_wg_disp_global_id_base_out),
      .local_size(mmul_local_size),
      .global_size(mmul_global_size),
      .global_work_offset(mmul_global_offset),
      .local_id(mmul_local_id[0]),
      .global_id(mmul_global_id[0]),
      .group_id(mmul_group_id[0])
   );

   // INST mmul_inst_0 of mmul_top_wrapper_0
   mmul_top_wrapper_0 mmul_inst_0
   (
      .start(mmul_start_kernel_copy[0]),
      .kernel_arguments(mmul_kernel_arguments),
      .work_dim(mmul_work_dim),
      .global_offset(mmul_global_offset),
      .kernel_valid_out(mmul_valid_out[0]),
      .has_a_write_pending(mmul_pending_write[0]),
      .has_a_lsu_active(mmul_lsu_active[0]),
      .global_id(mmul_global_id[0]),
      .local_id(mmul_local_id[0]),
      .group_id(mmul_group_id[0]),
      .global_size(mmul_global_size),
      .local_size(mmul_local_size),
      .num_groups(mmul_num_groups),
      .workgroup_size(mmul_wg_size),
      .kernel_stall_out(mmul_stall_out[0]),
      .kernel_valid_in(mmul_valid_in[0]),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_lm76_mmul
      .avm_lm76_mmul_enable(mmul_0_avm_lm76_mmul_enable),
      .avm_lm76_mmul_read(mmul_0_avm_lm76_mmul_read),
      .avm_lm76_mmul_write(mmul_0_avm_lm76_mmul_write),
      .avm_lm76_mmul_address(mmul_0_avm_lm76_mmul_address),
      .avm_lm76_mmul_writedata(mmul_0_avm_lm76_mmul_writedata),
      .avm_lm76_mmul_byteenable(mmul_0_avm_lm76_mmul_byteenable),
      .avm_lm76_mmul_waitrequest(mmul_0_avm_lm76_mmul_waitrequest),
      .avm_lm76_mmul_readdata(mmul_0_avm_lm76_mmul_readdata),
      .avm_lm76_mmul_readdatavalid(mmul_0_avm_lm76_mmul_readdatavalid),
      .avm_lm76_mmul_burstcount(mmul_0_avm_lm76_mmul_burstcount),
      .avm_lm76_mmul_writeack(mmul_0_avm_lm76_mmul_writeack),
      // AVM avm_lm_mmul
      .avm_lm_mmul_enable(mmul_0_avm_lm_mmul_enable),
      .avm_lm_mmul_read(mmul_0_avm_lm_mmul_read),
      .avm_lm_mmul_write(mmul_0_avm_lm_mmul_write),
      .avm_lm_mmul_address(mmul_0_avm_lm_mmul_address),
      .avm_lm_mmul_writedata(mmul_0_avm_lm_mmul_writedata),
      .avm_lm_mmul_byteenable(mmul_0_avm_lm_mmul_byteenable),
      .avm_lm_mmul_waitrequest(mmul_0_avm_lm_mmul_waitrequest),
      .avm_lm_mmul_readdata(mmul_0_avm_lm_mmul_readdata),
      .avm_lm_mmul_readdatavalid(mmul_0_avm_lm_mmul_readdatavalid),
      .avm_lm_mmul_burstcount(mmul_0_avm_lm_mmul_burstcount),
      .avm_lm_mmul_writeack(mmul_0_avm_lm_mmul_writeack),
      // AVM avm_unnamed_mmul7_mmul
      .avm_unnamed_mmul7_mmul_enable(mmul_0_avm_unnamed_mmul7_mmul_enable),
      .avm_unnamed_mmul7_mmul_read(mmul_0_avm_unnamed_mmul7_mmul_read),
      .avm_unnamed_mmul7_mmul_write(mmul_0_avm_unnamed_mmul7_mmul_write),
      .avm_unnamed_mmul7_mmul_address(mmul_0_avm_unnamed_mmul7_mmul_address),
      .avm_unnamed_mmul7_mmul_writedata(mmul_0_avm_unnamed_mmul7_mmul_writedata),
      .avm_unnamed_mmul7_mmul_byteenable(mmul_0_avm_unnamed_mmul7_mmul_byteenable),
      .avm_unnamed_mmul7_mmul_waitrequest(mmul_0_avm_unnamed_mmul7_mmul_waitrequest),
      .avm_unnamed_mmul7_mmul_readdata(mmul_0_avm_unnamed_mmul7_mmul_readdata),
      .avm_unnamed_mmul7_mmul_readdatavalid(mmul_0_avm_unnamed_mmul7_mmul_readdatavalid),
      .avm_unnamed_mmul7_mmul_burstcount(mmul_0_avm_unnamed_mmul7_mmul_burstcount),
      .avm_unnamed_mmul7_mmul_writeack(mmul_0_avm_unnamed_mmul7_mmul_writeack)
   );

   // INST mmul_start_elem_inst_0 of acl_start_signal_chain_element
   acl_start_signal_chain_element
   #(
      .ASYNC_RESET(1),
      .SYNCHRONIZE_RESET(0)
   )
   mmul_start_elem_inst_0
   (
      .clock(clock),
      .resetn(resetn),
      .start_in(mmul_start_chain[0]),
      .start_kernel(mmul_start_kernel_copy[0]),
      .start_finish_detector(mmul_start_task_fd[0]),
      .start_finish_chain_element(mmul_start_finish_element[0]),
      .start_chain()
   );

endmodule

/////////////////////////////////////////////////////////////////
// MODULE mmul_top_wrapper_0
/////////////////////////////////////////////////////////////////
module mmul_top_wrapper_0
(
   input logic start,
   input logic [287:0] kernel_arguments,
   input logic [31:0] work_dim,
   input logic [63:0] global_offset [2:0],
   output logic kernel_valid_out,
   output logic has_a_write_pending,
   output logic has_a_lsu_active,
   input logic [63:0] global_id [2:0],
   input logic [31:0] local_id [2:0],
   input logic [31:0] group_id [2:0],
   input logic [63:0] global_size [2:0],
   input logic [31:0] local_size [2:0],
   input logic [31:0] num_groups [2:0],
   input logic [31:0] workgroup_size,
   output logic kernel_stall_out,
   input logic kernel_valid_in,
   input logic clock,
   input logic resetn,
   input logic clock2x,
   // AVM avm_lm76_mmul
   output logic avm_lm76_mmul_enable,
   output logic avm_lm76_mmul_read,
   output logic avm_lm76_mmul_write,
   output logic [30:0] avm_lm76_mmul_address,
   output logic [511:0] avm_lm76_mmul_writedata,
   output logic [63:0] avm_lm76_mmul_byteenable,
   input logic avm_lm76_mmul_waitrequest,
   input logic [511:0] avm_lm76_mmul_readdata,
   input logic avm_lm76_mmul_readdatavalid,
   output logic [4:0] avm_lm76_mmul_burstcount,
   input logic avm_lm76_mmul_writeack,
   // AVM avm_lm_mmul
   output logic avm_lm_mmul_enable,
   output logic avm_lm_mmul_read,
   output logic avm_lm_mmul_write,
   output logic [30:0] avm_lm_mmul_address,
   output logic [511:0] avm_lm_mmul_writedata,
   output logic [63:0] avm_lm_mmul_byteenable,
   input logic avm_lm_mmul_waitrequest,
   input logic [511:0] avm_lm_mmul_readdata,
   input logic avm_lm_mmul_readdatavalid,
   output logic [4:0] avm_lm_mmul_burstcount,
   input logic avm_lm_mmul_writeack,
   // AVM avm_unnamed_mmul7_mmul
   output logic avm_unnamed_mmul7_mmul_enable,
   output logic avm_unnamed_mmul7_mmul_read,
   output logic avm_unnamed_mmul7_mmul_write,
   output logic [30:0] avm_unnamed_mmul7_mmul_address,
   output logic [511:0] avm_unnamed_mmul7_mmul_writedata,
   output logic [63:0] avm_unnamed_mmul7_mmul_byteenable,
   input logic avm_unnamed_mmul7_mmul_waitrequest,
   input logic [511:0] avm_unnamed_mmul7_mmul_readdata,
   input logic avm_unnamed_mmul7_mmul_readdatavalid,
   output logic [4:0] avm_unnamed_mmul7_mmul_burstcount,
   input logic avm_unnamed_mmul7_mmul_writeack
);
   genvar __i;
   genvar __j;
   genvar __k;
   logic lmem_invalid_single_bit;
   logic [2:0] lmem_invalid_aspaces;
   logic local_avm_aspace64_enable [1][2];
   logic local_avm_aspace64_read [1][2];
   logic local_avm_aspace64_write [1][2];
   logic [31:0] local_avm_aspace64_address [1][2];
   logic [1023:0] local_avm_aspace64_writedata [1][2];
   logic [127:0] local_avm_aspace64_byteenable [1][2];
   logic local_avm_aspace64_waitrequest [1][2];
   logic [1023:0] local_avm_aspace64_readdata [1][2];
   logic local_avm_aspace64_readdatavalid [1][2];
   logic local_avm_aspace64_burstcount [1][2];
   logic local_avm_aspace64_writeack [1][2];
   logic local_avm_aspace65_enable [1][33];
   logic local_avm_aspace65_read [1][33];
   logic local_avm_aspace65_write [1][33];
   logic [31:0] local_avm_aspace65_address [1][33];
   logic [31:0] local_avm_aspace65_writedata [1][33];
   logic [3:0] local_avm_aspace65_byteenable [1][33];
   logic local_avm_aspace65_waitrequest [1][33];
   logic [31:0] local_avm_aspace65_readdata [1][33];
   logic local_avm_aspace65_readdatavalid [1][33];
   logic local_avm_aspace65_burstcount [1][33];
   logic local_avm_aspace65_writeack [1][33];

   // INST kernel of mmul_function_wrapper
   mmul_function_wrapper kernel
   (
      .local_router_hang(lmem_invalid_single_bit),
      .start(start),
      .kernel_arguments(kernel_arguments),
      .work_dim(work_dim),
      .global_offset_0(global_offset[0]),
      .global_offset_1(global_offset[1]),
      .global_offset_2(global_offset[2]),
      .kernel_valid_out(kernel_valid_out),
      .has_a_write_pending(has_a_write_pending),
      .has_a_lsu_active(has_a_lsu_active),
      .global_id_0(global_id[0]),
      .global_id_1(global_id[1]),
      .global_id_2(global_id[2]),
      .local_id_0(local_id[0]),
      .local_id_1(local_id[1]),
      .local_id_2(local_id[2]),
      .group_id_0(group_id[0]),
      .group_id_1(group_id[1]),
      .group_id_2(group_id[2]),
      .global_size_0(global_size[0]),
      .global_size_1(global_size[1]),
      .global_size_2(global_size[2]),
      .local_size_0(local_size[0]),
      .local_size_1(local_size[1]),
      .local_size_2(local_size[2]),
      .num_groups_0(num_groups[0]),
      .num_groups_1(num_groups[1]),
      .num_groups_2(num_groups[2]),
      .workgroup_size(workgroup_size),
      .kernel_stall_out(kernel_stall_out),
      .kernel_valid_in(kernel_valid_in),
      .clock(clock),
      .resetn(resetn),
      .clock2x(clock2x),
      // AVM avm_lm76_mmul
      .avm_lm76_mmul_enable(avm_lm76_mmul_enable),
      .avm_lm76_mmul_read(avm_lm76_mmul_read),
      .avm_lm76_mmul_write(avm_lm76_mmul_write),
      .avm_lm76_mmul_address(avm_lm76_mmul_address),
      .avm_lm76_mmul_writedata(avm_lm76_mmul_writedata),
      .avm_lm76_mmul_byteenable(avm_lm76_mmul_byteenable),
      .avm_lm76_mmul_waitrequest(avm_lm76_mmul_waitrequest),
      .avm_lm76_mmul_readdata(avm_lm76_mmul_readdata),
      .avm_lm76_mmul_readdatavalid(avm_lm76_mmul_readdatavalid),
      .avm_lm76_mmul_burstcount(avm_lm76_mmul_burstcount),
      .avm_lm76_mmul_writeack(avm_lm76_mmul_writeack),
      // AVM avm_lm_mmul
      .avm_lm_mmul_enable(avm_lm_mmul_enable),
      .avm_lm_mmul_read(avm_lm_mmul_read),
      .avm_lm_mmul_write(avm_lm_mmul_write),
      .avm_lm_mmul_address(avm_lm_mmul_address),
      .avm_lm_mmul_writedata(avm_lm_mmul_writedata),
      .avm_lm_mmul_byteenable(avm_lm_mmul_byteenable),
      .avm_lm_mmul_waitrequest(avm_lm_mmul_waitrequest),
      .avm_lm_mmul_readdata(avm_lm_mmul_readdata),
      .avm_lm_mmul_readdatavalid(avm_lm_mmul_readdatavalid),
      .avm_lm_mmul_burstcount(avm_lm_mmul_burstcount),
      .avm_lm_mmul_writeack(avm_lm_mmul_writeack),
      // AVM avm_unnamed_mmul7_mmul
      .avm_unnamed_mmul7_mmul_enable(avm_unnamed_mmul7_mmul_enable),
      .avm_unnamed_mmul7_mmul_read(avm_unnamed_mmul7_mmul_read),
      .avm_unnamed_mmul7_mmul_write(avm_unnamed_mmul7_mmul_write),
      .avm_unnamed_mmul7_mmul_address(avm_unnamed_mmul7_mmul_address),
      .avm_unnamed_mmul7_mmul_writedata(avm_unnamed_mmul7_mmul_writedata),
      .avm_unnamed_mmul7_mmul_byteenable(avm_unnamed_mmul7_mmul_byteenable),
      .avm_unnamed_mmul7_mmul_waitrequest(avm_unnamed_mmul7_mmul_waitrequest),
      .avm_unnamed_mmul7_mmul_readdata(avm_unnamed_mmul7_mmul_readdata),
      .avm_unnamed_mmul7_mmul_readdatavalid(avm_unnamed_mmul7_mmul_readdatavalid),
      .avm_unnamed_mmul7_mmul_burstcount(avm_unnamed_mmul7_mmul_burstcount),
      .avm_unnamed_mmul7_mmul_writeack(avm_unnamed_mmul7_mmul_writeack),
      // AVM avm_memcoalesce_load_mmul_fpgaunique_321_mmul
      .avm_memcoalesce_load_mmul_fpgaunique_321_mmul_enable(local_avm_aspace64_enable[0][0]),
      .avm_memcoalesce_load_mmul_fpgaunique_321_mmul_read(local_avm_aspace64_read[0][0]),
      .avm_memcoalesce_load_mmul_fpgaunique_321_mmul_write(local_avm_aspace64_write[0][0]),
      .avm_memcoalesce_load_mmul_fpgaunique_321_mmul_address(local_avm_aspace64_address[0][0]),
      .avm_memcoalesce_load_mmul_fpgaunique_321_mmul_writedata(local_avm_aspace64_writedata[0][0]),
      .avm_memcoalesce_load_mmul_fpgaunique_321_mmul_byteenable(local_avm_aspace64_byteenable[0][0]),
      .avm_memcoalesce_load_mmul_fpgaunique_321_mmul_waitrequest(local_avm_aspace64_waitrequest[0][0]),
      .avm_memcoalesce_load_mmul_fpgaunique_321_mmul_readdata(local_avm_aspace64_readdata[0][0]),
      .avm_memcoalesce_load_mmul_fpgaunique_321_mmul_readdatavalid(local_avm_aspace64_readdatavalid[0][0]),
      .avm_memcoalesce_load_mmul_fpgaunique_321_mmul_burstcount(local_avm_aspace64_burstcount[0][0]),
      .avm_memcoalesce_load_mmul_fpgaunique_321_mmul_writeack(local_avm_aspace64_writeack[0][0]),
      // AVM avm_memdep_95_mmul
      .avm_memdep_95_mmul_enable(local_avm_aspace64_enable[0][1]),
      .avm_memdep_95_mmul_read(local_avm_aspace64_read[0][1]),
      .avm_memdep_95_mmul_write(local_avm_aspace64_write[0][1]),
      .avm_memdep_95_mmul_address(local_avm_aspace64_address[0][1]),
      .avm_memdep_95_mmul_writedata(local_avm_aspace64_writedata[0][1]),
      .avm_memdep_95_mmul_byteenable(local_avm_aspace64_byteenable[0][1]),
      .avm_memdep_95_mmul_waitrequest(local_avm_aspace64_waitrequest[0][1]),
      .avm_memdep_95_mmul_readdata(local_avm_aspace64_readdata[0][1]),
      .avm_memdep_95_mmul_readdatavalid(local_avm_aspace64_readdatavalid[0][1]),
      .avm_memdep_95_mmul_burstcount(local_avm_aspace64_burstcount[0][1]),
      .avm_memdep_95_mmul_writeack(local_avm_aspace64_writeack[0][1]),
      // AVM avm_lm1007_mmul
      .avm_lm1007_mmul_enable(local_avm_aspace65_enable[0][0]),
      .avm_lm1007_mmul_read(local_avm_aspace65_read[0][0]),
      .avm_lm1007_mmul_write(local_avm_aspace65_write[0][0]),
      .avm_lm1007_mmul_address(local_avm_aspace65_address[0][0]),
      .avm_lm1007_mmul_writedata(local_avm_aspace65_writedata[0][0]),
      .avm_lm1007_mmul_byteenable(local_avm_aspace65_byteenable[0][0]),
      .avm_lm1007_mmul_waitrequest(local_avm_aspace65_waitrequest[0][0]),
      .avm_lm1007_mmul_readdata(local_avm_aspace65_readdata[0][0]),
      .avm_lm1007_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][0]),
      .avm_lm1007_mmul_burstcount(local_avm_aspace65_burstcount[0][0]),
      .avm_lm1007_mmul_writeack(local_avm_aspace65_writeack[0][0]),
      // AVM avm_lm1048_mmul
      .avm_lm1048_mmul_enable(local_avm_aspace65_enable[0][1]),
      .avm_lm1048_mmul_read(local_avm_aspace65_read[0][1]),
      .avm_lm1048_mmul_write(local_avm_aspace65_write[0][1]),
      .avm_lm1048_mmul_address(local_avm_aspace65_address[0][1]),
      .avm_lm1048_mmul_writedata(local_avm_aspace65_writedata[0][1]),
      .avm_lm1048_mmul_byteenable(local_avm_aspace65_byteenable[0][1]),
      .avm_lm1048_mmul_waitrequest(local_avm_aspace65_waitrequest[0][1]),
      .avm_lm1048_mmul_readdata(local_avm_aspace65_readdata[0][1]),
      .avm_lm1048_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][1]),
      .avm_lm1048_mmul_burstcount(local_avm_aspace65_burstcount[0][1]),
      .avm_lm1048_mmul_writeack(local_avm_aspace65_writeack[0][1]),
      // AVM avm_lm1089_mmul
      .avm_lm1089_mmul_enable(local_avm_aspace65_enable[0][2]),
      .avm_lm1089_mmul_read(local_avm_aspace65_read[0][2]),
      .avm_lm1089_mmul_write(local_avm_aspace65_write[0][2]),
      .avm_lm1089_mmul_address(local_avm_aspace65_address[0][2]),
      .avm_lm1089_mmul_writedata(local_avm_aspace65_writedata[0][2]),
      .avm_lm1089_mmul_byteenable(local_avm_aspace65_byteenable[0][2]),
      .avm_lm1089_mmul_waitrequest(local_avm_aspace65_waitrequest[0][2]),
      .avm_lm1089_mmul_readdata(local_avm_aspace65_readdata[0][2]),
      .avm_lm1089_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][2]),
      .avm_lm1089_mmul_burstcount(local_avm_aspace65_burstcount[0][2]),
      .avm_lm1089_mmul_writeack(local_avm_aspace65_writeack[0][2]),
      // AVM avm_lm11210_mmul
      .avm_lm11210_mmul_enable(local_avm_aspace65_enable[0][3]),
      .avm_lm11210_mmul_read(local_avm_aspace65_read[0][3]),
      .avm_lm11210_mmul_write(local_avm_aspace65_write[0][3]),
      .avm_lm11210_mmul_address(local_avm_aspace65_address[0][3]),
      .avm_lm11210_mmul_writedata(local_avm_aspace65_writedata[0][3]),
      .avm_lm11210_mmul_byteenable(local_avm_aspace65_byteenable[0][3]),
      .avm_lm11210_mmul_waitrequest(local_avm_aspace65_waitrequest[0][3]),
      .avm_lm11210_mmul_readdata(local_avm_aspace65_readdata[0][3]),
      .avm_lm11210_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][3]),
      .avm_lm11210_mmul_burstcount(local_avm_aspace65_burstcount[0][3]),
      .avm_lm11210_mmul_writeack(local_avm_aspace65_writeack[0][3]),
      // AVM avm_lm11611_mmul
      .avm_lm11611_mmul_enable(local_avm_aspace65_enable[0][4]),
      .avm_lm11611_mmul_read(local_avm_aspace65_read[0][4]),
      .avm_lm11611_mmul_write(local_avm_aspace65_write[0][4]),
      .avm_lm11611_mmul_address(local_avm_aspace65_address[0][4]),
      .avm_lm11611_mmul_writedata(local_avm_aspace65_writedata[0][4]),
      .avm_lm11611_mmul_byteenable(local_avm_aspace65_byteenable[0][4]),
      .avm_lm11611_mmul_waitrequest(local_avm_aspace65_waitrequest[0][4]),
      .avm_lm11611_mmul_readdata(local_avm_aspace65_readdata[0][4]),
      .avm_lm11611_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][4]),
      .avm_lm11611_mmul_burstcount(local_avm_aspace65_burstcount[0][4]),
      .avm_lm11611_mmul_writeack(local_avm_aspace65_writeack[0][4]),
      // AVM avm_lm12012_mmul
      .avm_lm12012_mmul_enable(local_avm_aspace65_enable[0][5]),
      .avm_lm12012_mmul_read(local_avm_aspace65_read[0][5]),
      .avm_lm12012_mmul_write(local_avm_aspace65_write[0][5]),
      .avm_lm12012_mmul_address(local_avm_aspace65_address[0][5]),
      .avm_lm12012_mmul_writedata(local_avm_aspace65_writedata[0][5]),
      .avm_lm12012_mmul_byteenable(local_avm_aspace65_byteenable[0][5]),
      .avm_lm12012_mmul_waitrequest(local_avm_aspace65_waitrequest[0][5]),
      .avm_lm12012_mmul_readdata(local_avm_aspace65_readdata[0][5]),
      .avm_lm12012_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][5]),
      .avm_lm12012_mmul_burstcount(local_avm_aspace65_burstcount[0][5]),
      .avm_lm12012_mmul_writeack(local_avm_aspace65_writeack[0][5]),
      // AVM avm_lm12413_mmul
      .avm_lm12413_mmul_enable(local_avm_aspace65_enable[0][6]),
      .avm_lm12413_mmul_read(local_avm_aspace65_read[0][6]),
      .avm_lm12413_mmul_write(local_avm_aspace65_write[0][6]),
      .avm_lm12413_mmul_address(local_avm_aspace65_address[0][6]),
      .avm_lm12413_mmul_writedata(local_avm_aspace65_writedata[0][6]),
      .avm_lm12413_mmul_byteenable(local_avm_aspace65_byteenable[0][6]),
      .avm_lm12413_mmul_waitrequest(local_avm_aspace65_waitrequest[0][6]),
      .avm_lm12413_mmul_readdata(local_avm_aspace65_readdata[0][6]),
      .avm_lm12413_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][6]),
      .avm_lm12413_mmul_burstcount(local_avm_aspace65_burstcount[0][6]),
      .avm_lm12413_mmul_writeack(local_avm_aspace65_writeack[0][6]),
      // AVM avm_lm12814_mmul
      .avm_lm12814_mmul_enable(local_avm_aspace65_enable[0][7]),
      .avm_lm12814_mmul_read(local_avm_aspace65_read[0][7]),
      .avm_lm12814_mmul_write(local_avm_aspace65_write[0][7]),
      .avm_lm12814_mmul_address(local_avm_aspace65_address[0][7]),
      .avm_lm12814_mmul_writedata(local_avm_aspace65_writedata[0][7]),
      .avm_lm12814_mmul_byteenable(local_avm_aspace65_byteenable[0][7]),
      .avm_lm12814_mmul_waitrequest(local_avm_aspace65_waitrequest[0][7]),
      .avm_lm12814_mmul_readdata(local_avm_aspace65_readdata[0][7]),
      .avm_lm12814_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][7]),
      .avm_lm12814_mmul_burstcount(local_avm_aspace65_burstcount[0][7]),
      .avm_lm12814_mmul_writeack(local_avm_aspace65_writeack[0][7]),
      // AVM avm_lm13215_mmul
      .avm_lm13215_mmul_enable(local_avm_aspace65_enable[0][8]),
      .avm_lm13215_mmul_read(local_avm_aspace65_read[0][8]),
      .avm_lm13215_mmul_write(local_avm_aspace65_write[0][8]),
      .avm_lm13215_mmul_address(local_avm_aspace65_address[0][8]),
      .avm_lm13215_mmul_writedata(local_avm_aspace65_writedata[0][8]),
      .avm_lm13215_mmul_byteenable(local_avm_aspace65_byteenable[0][8]),
      .avm_lm13215_mmul_waitrequest(local_avm_aspace65_waitrequest[0][8]),
      .avm_lm13215_mmul_readdata(local_avm_aspace65_readdata[0][8]),
      .avm_lm13215_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][8]),
      .avm_lm13215_mmul_burstcount(local_avm_aspace65_burstcount[0][8]),
      .avm_lm13215_mmul_writeack(local_avm_aspace65_writeack[0][8]),
      // AVM avm_lm13616_mmul
      .avm_lm13616_mmul_enable(local_avm_aspace65_enable[0][9]),
      .avm_lm13616_mmul_read(local_avm_aspace65_read[0][9]),
      .avm_lm13616_mmul_write(local_avm_aspace65_write[0][9]),
      .avm_lm13616_mmul_address(local_avm_aspace65_address[0][9]),
      .avm_lm13616_mmul_writedata(local_avm_aspace65_writedata[0][9]),
      .avm_lm13616_mmul_byteenable(local_avm_aspace65_byteenable[0][9]),
      .avm_lm13616_mmul_waitrequest(local_avm_aspace65_waitrequest[0][9]),
      .avm_lm13616_mmul_readdata(local_avm_aspace65_readdata[0][9]),
      .avm_lm13616_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][9]),
      .avm_lm13616_mmul_burstcount(local_avm_aspace65_burstcount[0][9]),
      .avm_lm13616_mmul_writeack(local_avm_aspace65_writeack[0][9]),
      // AVM avm_lm14017_mmul
      .avm_lm14017_mmul_enable(local_avm_aspace65_enable[0][10]),
      .avm_lm14017_mmul_read(local_avm_aspace65_read[0][10]),
      .avm_lm14017_mmul_write(local_avm_aspace65_write[0][10]),
      .avm_lm14017_mmul_address(local_avm_aspace65_address[0][10]),
      .avm_lm14017_mmul_writedata(local_avm_aspace65_writedata[0][10]),
      .avm_lm14017_mmul_byteenable(local_avm_aspace65_byteenable[0][10]),
      .avm_lm14017_mmul_waitrequest(local_avm_aspace65_waitrequest[0][10]),
      .avm_lm14017_mmul_readdata(local_avm_aspace65_readdata[0][10]),
      .avm_lm14017_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][10]),
      .avm_lm14017_mmul_burstcount(local_avm_aspace65_burstcount[0][10]),
      .avm_lm14017_mmul_writeack(local_avm_aspace65_writeack[0][10]),
      // AVM avm_lm14418_mmul
      .avm_lm14418_mmul_enable(local_avm_aspace65_enable[0][11]),
      .avm_lm14418_mmul_read(local_avm_aspace65_read[0][11]),
      .avm_lm14418_mmul_write(local_avm_aspace65_write[0][11]),
      .avm_lm14418_mmul_address(local_avm_aspace65_address[0][11]),
      .avm_lm14418_mmul_writedata(local_avm_aspace65_writedata[0][11]),
      .avm_lm14418_mmul_byteenable(local_avm_aspace65_byteenable[0][11]),
      .avm_lm14418_mmul_waitrequest(local_avm_aspace65_waitrequest[0][11]),
      .avm_lm14418_mmul_readdata(local_avm_aspace65_readdata[0][11]),
      .avm_lm14418_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][11]),
      .avm_lm14418_mmul_burstcount(local_avm_aspace65_burstcount[0][11]),
      .avm_lm14418_mmul_writeack(local_avm_aspace65_writeack[0][11]),
      // AVM avm_lm14819_mmul
      .avm_lm14819_mmul_enable(local_avm_aspace65_enable[0][12]),
      .avm_lm14819_mmul_read(local_avm_aspace65_read[0][12]),
      .avm_lm14819_mmul_write(local_avm_aspace65_write[0][12]),
      .avm_lm14819_mmul_address(local_avm_aspace65_address[0][12]),
      .avm_lm14819_mmul_writedata(local_avm_aspace65_writedata[0][12]),
      .avm_lm14819_mmul_byteenable(local_avm_aspace65_byteenable[0][12]),
      .avm_lm14819_mmul_waitrequest(local_avm_aspace65_waitrequest[0][12]),
      .avm_lm14819_mmul_readdata(local_avm_aspace65_readdata[0][12]),
      .avm_lm14819_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][12]),
      .avm_lm14819_mmul_burstcount(local_avm_aspace65_burstcount[0][12]),
      .avm_lm14819_mmul_writeack(local_avm_aspace65_writeack[0][12]),
      // AVM avm_lm15220_mmul
      .avm_lm15220_mmul_enable(local_avm_aspace65_enable[0][13]),
      .avm_lm15220_mmul_read(local_avm_aspace65_read[0][13]),
      .avm_lm15220_mmul_write(local_avm_aspace65_write[0][13]),
      .avm_lm15220_mmul_address(local_avm_aspace65_address[0][13]),
      .avm_lm15220_mmul_writedata(local_avm_aspace65_writedata[0][13]),
      .avm_lm15220_mmul_byteenable(local_avm_aspace65_byteenable[0][13]),
      .avm_lm15220_mmul_waitrequest(local_avm_aspace65_waitrequest[0][13]),
      .avm_lm15220_mmul_readdata(local_avm_aspace65_readdata[0][13]),
      .avm_lm15220_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][13]),
      .avm_lm15220_mmul_burstcount(local_avm_aspace65_burstcount[0][13]),
      .avm_lm15220_mmul_writeack(local_avm_aspace65_writeack[0][13]),
      // AVM avm_lm15621_mmul
      .avm_lm15621_mmul_enable(local_avm_aspace65_enable[0][14]),
      .avm_lm15621_mmul_read(local_avm_aspace65_read[0][14]),
      .avm_lm15621_mmul_write(local_avm_aspace65_write[0][14]),
      .avm_lm15621_mmul_address(local_avm_aspace65_address[0][14]),
      .avm_lm15621_mmul_writedata(local_avm_aspace65_writedata[0][14]),
      .avm_lm15621_mmul_byteenable(local_avm_aspace65_byteenable[0][14]),
      .avm_lm15621_mmul_waitrequest(local_avm_aspace65_waitrequest[0][14]),
      .avm_lm15621_mmul_readdata(local_avm_aspace65_readdata[0][14]),
      .avm_lm15621_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][14]),
      .avm_lm15621_mmul_burstcount(local_avm_aspace65_burstcount[0][14]),
      .avm_lm15621_mmul_writeack(local_avm_aspace65_writeack[0][14]),
      // AVM avm_lm16022_mmul
      .avm_lm16022_mmul_enable(local_avm_aspace65_enable[0][15]),
      .avm_lm16022_mmul_read(local_avm_aspace65_read[0][15]),
      .avm_lm16022_mmul_write(local_avm_aspace65_write[0][15]),
      .avm_lm16022_mmul_address(local_avm_aspace65_address[0][15]),
      .avm_lm16022_mmul_writedata(local_avm_aspace65_writedata[0][15]),
      .avm_lm16022_mmul_byteenable(local_avm_aspace65_byteenable[0][15]),
      .avm_lm16022_mmul_waitrequest(local_avm_aspace65_waitrequest[0][15]),
      .avm_lm16022_mmul_readdata(local_avm_aspace65_readdata[0][15]),
      .avm_lm16022_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][15]),
      .avm_lm16022_mmul_burstcount(local_avm_aspace65_burstcount[0][15]),
      .avm_lm16022_mmul_writeack(local_avm_aspace65_writeack[0][15]),
      // AVM avm_lm16423_mmul
      .avm_lm16423_mmul_enable(local_avm_aspace65_enable[0][16]),
      .avm_lm16423_mmul_read(local_avm_aspace65_read[0][16]),
      .avm_lm16423_mmul_write(local_avm_aspace65_write[0][16]),
      .avm_lm16423_mmul_address(local_avm_aspace65_address[0][16]),
      .avm_lm16423_mmul_writedata(local_avm_aspace65_writedata[0][16]),
      .avm_lm16423_mmul_byteenable(local_avm_aspace65_byteenable[0][16]),
      .avm_lm16423_mmul_waitrequest(local_avm_aspace65_waitrequest[0][16]),
      .avm_lm16423_mmul_readdata(local_avm_aspace65_readdata[0][16]),
      .avm_lm16423_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][16]),
      .avm_lm16423_mmul_burstcount(local_avm_aspace65_burstcount[0][16]),
      .avm_lm16423_mmul_writeack(local_avm_aspace65_writeack[0][16]),
      // AVM avm_lm16824_mmul
      .avm_lm16824_mmul_enable(local_avm_aspace65_enable[0][17]),
      .avm_lm16824_mmul_read(local_avm_aspace65_read[0][17]),
      .avm_lm16824_mmul_write(local_avm_aspace65_write[0][17]),
      .avm_lm16824_mmul_address(local_avm_aspace65_address[0][17]),
      .avm_lm16824_mmul_writedata(local_avm_aspace65_writedata[0][17]),
      .avm_lm16824_mmul_byteenable(local_avm_aspace65_byteenable[0][17]),
      .avm_lm16824_mmul_waitrequest(local_avm_aspace65_waitrequest[0][17]),
      .avm_lm16824_mmul_readdata(local_avm_aspace65_readdata[0][17]),
      .avm_lm16824_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][17]),
      .avm_lm16824_mmul_burstcount(local_avm_aspace65_burstcount[0][17]),
      .avm_lm16824_mmul_writeack(local_avm_aspace65_writeack[0][17]),
      // AVM avm_lm17225_mmul
      .avm_lm17225_mmul_enable(local_avm_aspace65_enable[0][18]),
      .avm_lm17225_mmul_read(local_avm_aspace65_read[0][18]),
      .avm_lm17225_mmul_write(local_avm_aspace65_write[0][18]),
      .avm_lm17225_mmul_address(local_avm_aspace65_address[0][18]),
      .avm_lm17225_mmul_writedata(local_avm_aspace65_writedata[0][18]),
      .avm_lm17225_mmul_byteenable(local_avm_aspace65_byteenable[0][18]),
      .avm_lm17225_mmul_waitrequest(local_avm_aspace65_waitrequest[0][18]),
      .avm_lm17225_mmul_readdata(local_avm_aspace65_readdata[0][18]),
      .avm_lm17225_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][18]),
      .avm_lm17225_mmul_burstcount(local_avm_aspace65_burstcount[0][18]),
      .avm_lm17225_mmul_writeack(local_avm_aspace65_writeack[0][18]),
      // AVM avm_lm17626_mmul
      .avm_lm17626_mmul_enable(local_avm_aspace65_enable[0][19]),
      .avm_lm17626_mmul_read(local_avm_aspace65_read[0][19]),
      .avm_lm17626_mmul_write(local_avm_aspace65_write[0][19]),
      .avm_lm17626_mmul_address(local_avm_aspace65_address[0][19]),
      .avm_lm17626_mmul_writedata(local_avm_aspace65_writedata[0][19]),
      .avm_lm17626_mmul_byteenable(local_avm_aspace65_byteenable[0][19]),
      .avm_lm17626_mmul_waitrequest(local_avm_aspace65_waitrequest[0][19]),
      .avm_lm17626_mmul_readdata(local_avm_aspace65_readdata[0][19]),
      .avm_lm17626_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][19]),
      .avm_lm17626_mmul_burstcount(local_avm_aspace65_burstcount[0][19]),
      .avm_lm17626_mmul_writeack(local_avm_aspace65_writeack[0][19]),
      // AVM avm_lm18027_mmul
      .avm_lm18027_mmul_enable(local_avm_aspace65_enable[0][20]),
      .avm_lm18027_mmul_read(local_avm_aspace65_read[0][20]),
      .avm_lm18027_mmul_write(local_avm_aspace65_write[0][20]),
      .avm_lm18027_mmul_address(local_avm_aspace65_address[0][20]),
      .avm_lm18027_mmul_writedata(local_avm_aspace65_writedata[0][20]),
      .avm_lm18027_mmul_byteenable(local_avm_aspace65_byteenable[0][20]),
      .avm_lm18027_mmul_waitrequest(local_avm_aspace65_waitrequest[0][20]),
      .avm_lm18027_mmul_readdata(local_avm_aspace65_readdata[0][20]),
      .avm_lm18027_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][20]),
      .avm_lm18027_mmul_burstcount(local_avm_aspace65_burstcount[0][20]),
      .avm_lm18027_mmul_writeack(local_avm_aspace65_writeack[0][20]),
      // AVM avm_lm18428_mmul
      .avm_lm18428_mmul_enable(local_avm_aspace65_enable[0][21]),
      .avm_lm18428_mmul_read(local_avm_aspace65_read[0][21]),
      .avm_lm18428_mmul_write(local_avm_aspace65_write[0][21]),
      .avm_lm18428_mmul_address(local_avm_aspace65_address[0][21]),
      .avm_lm18428_mmul_writedata(local_avm_aspace65_writedata[0][21]),
      .avm_lm18428_mmul_byteenable(local_avm_aspace65_byteenable[0][21]),
      .avm_lm18428_mmul_waitrequest(local_avm_aspace65_waitrequest[0][21]),
      .avm_lm18428_mmul_readdata(local_avm_aspace65_readdata[0][21]),
      .avm_lm18428_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][21]),
      .avm_lm18428_mmul_burstcount(local_avm_aspace65_burstcount[0][21]),
      .avm_lm18428_mmul_writeack(local_avm_aspace65_writeack[0][21]),
      // AVM avm_lm18829_mmul
      .avm_lm18829_mmul_enable(local_avm_aspace65_enable[0][22]),
      .avm_lm18829_mmul_read(local_avm_aspace65_read[0][22]),
      .avm_lm18829_mmul_write(local_avm_aspace65_write[0][22]),
      .avm_lm18829_mmul_address(local_avm_aspace65_address[0][22]),
      .avm_lm18829_mmul_writedata(local_avm_aspace65_writedata[0][22]),
      .avm_lm18829_mmul_byteenable(local_avm_aspace65_byteenable[0][22]),
      .avm_lm18829_mmul_waitrequest(local_avm_aspace65_waitrequest[0][22]),
      .avm_lm18829_mmul_readdata(local_avm_aspace65_readdata[0][22]),
      .avm_lm18829_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][22]),
      .avm_lm18829_mmul_burstcount(local_avm_aspace65_burstcount[0][22]),
      .avm_lm18829_mmul_writeack(local_avm_aspace65_writeack[0][22]),
      // AVM avm_lm19230_mmul
      .avm_lm19230_mmul_enable(local_avm_aspace65_enable[0][23]),
      .avm_lm19230_mmul_read(local_avm_aspace65_read[0][23]),
      .avm_lm19230_mmul_write(local_avm_aspace65_write[0][23]),
      .avm_lm19230_mmul_address(local_avm_aspace65_address[0][23]),
      .avm_lm19230_mmul_writedata(local_avm_aspace65_writedata[0][23]),
      .avm_lm19230_mmul_byteenable(local_avm_aspace65_byteenable[0][23]),
      .avm_lm19230_mmul_waitrequest(local_avm_aspace65_waitrequest[0][23]),
      .avm_lm19230_mmul_readdata(local_avm_aspace65_readdata[0][23]),
      .avm_lm19230_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][23]),
      .avm_lm19230_mmul_burstcount(local_avm_aspace65_burstcount[0][23]),
      .avm_lm19230_mmul_writeack(local_avm_aspace65_writeack[0][23]),
      // AVM avm_lm19631_mmul
      .avm_lm19631_mmul_enable(local_avm_aspace65_enable[0][24]),
      .avm_lm19631_mmul_read(local_avm_aspace65_read[0][24]),
      .avm_lm19631_mmul_write(local_avm_aspace65_write[0][24]),
      .avm_lm19631_mmul_address(local_avm_aspace65_address[0][24]),
      .avm_lm19631_mmul_writedata(local_avm_aspace65_writedata[0][24]),
      .avm_lm19631_mmul_byteenable(local_avm_aspace65_byteenable[0][24]),
      .avm_lm19631_mmul_waitrequest(local_avm_aspace65_waitrequest[0][24]),
      .avm_lm19631_mmul_readdata(local_avm_aspace65_readdata[0][24]),
      .avm_lm19631_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][24]),
      .avm_lm19631_mmul_burstcount(local_avm_aspace65_burstcount[0][24]),
      .avm_lm19631_mmul_writeack(local_avm_aspace65_writeack[0][24]),
      // AVM avm_lm20032_mmul
      .avm_lm20032_mmul_enable(local_avm_aspace65_enable[0][25]),
      .avm_lm20032_mmul_read(local_avm_aspace65_read[0][25]),
      .avm_lm20032_mmul_write(local_avm_aspace65_write[0][25]),
      .avm_lm20032_mmul_address(local_avm_aspace65_address[0][25]),
      .avm_lm20032_mmul_writedata(local_avm_aspace65_writedata[0][25]),
      .avm_lm20032_mmul_byteenable(local_avm_aspace65_byteenable[0][25]),
      .avm_lm20032_mmul_waitrequest(local_avm_aspace65_waitrequest[0][25]),
      .avm_lm20032_mmul_readdata(local_avm_aspace65_readdata[0][25]),
      .avm_lm20032_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][25]),
      .avm_lm20032_mmul_burstcount(local_avm_aspace65_burstcount[0][25]),
      .avm_lm20032_mmul_writeack(local_avm_aspace65_writeack[0][25]),
      // AVM avm_lm20433_mmul
      .avm_lm20433_mmul_enable(local_avm_aspace65_enable[0][26]),
      .avm_lm20433_mmul_read(local_avm_aspace65_read[0][26]),
      .avm_lm20433_mmul_write(local_avm_aspace65_write[0][26]),
      .avm_lm20433_mmul_address(local_avm_aspace65_address[0][26]),
      .avm_lm20433_mmul_writedata(local_avm_aspace65_writedata[0][26]),
      .avm_lm20433_mmul_byteenable(local_avm_aspace65_byteenable[0][26]),
      .avm_lm20433_mmul_waitrequest(local_avm_aspace65_waitrequest[0][26]),
      .avm_lm20433_mmul_readdata(local_avm_aspace65_readdata[0][26]),
      .avm_lm20433_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][26]),
      .avm_lm20433_mmul_burstcount(local_avm_aspace65_burstcount[0][26]),
      .avm_lm20433_mmul_writeack(local_avm_aspace65_writeack[0][26]),
      // AVM avm_lm802_mmul
      .avm_lm802_mmul_enable(local_avm_aspace65_enable[0][27]),
      .avm_lm802_mmul_read(local_avm_aspace65_read[0][27]),
      .avm_lm802_mmul_write(local_avm_aspace65_write[0][27]),
      .avm_lm802_mmul_address(local_avm_aspace65_address[0][27]),
      .avm_lm802_mmul_writedata(local_avm_aspace65_writedata[0][27]),
      .avm_lm802_mmul_byteenable(local_avm_aspace65_byteenable[0][27]),
      .avm_lm802_mmul_waitrequest(local_avm_aspace65_waitrequest[0][27]),
      .avm_lm802_mmul_readdata(local_avm_aspace65_readdata[0][27]),
      .avm_lm802_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][27]),
      .avm_lm802_mmul_burstcount(local_avm_aspace65_burstcount[0][27]),
      .avm_lm802_mmul_writeack(local_avm_aspace65_writeack[0][27]),
      // AVM avm_lm843_mmul
      .avm_lm843_mmul_enable(local_avm_aspace65_enable[0][28]),
      .avm_lm843_mmul_read(local_avm_aspace65_read[0][28]),
      .avm_lm843_mmul_write(local_avm_aspace65_write[0][28]),
      .avm_lm843_mmul_address(local_avm_aspace65_address[0][28]),
      .avm_lm843_mmul_writedata(local_avm_aspace65_writedata[0][28]),
      .avm_lm843_mmul_byteenable(local_avm_aspace65_byteenable[0][28]),
      .avm_lm843_mmul_waitrequest(local_avm_aspace65_waitrequest[0][28]),
      .avm_lm843_mmul_readdata(local_avm_aspace65_readdata[0][28]),
      .avm_lm843_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][28]),
      .avm_lm843_mmul_burstcount(local_avm_aspace65_burstcount[0][28]),
      .avm_lm843_mmul_writeack(local_avm_aspace65_writeack[0][28]),
      // AVM avm_lm884_mmul
      .avm_lm884_mmul_enable(local_avm_aspace65_enable[0][29]),
      .avm_lm884_mmul_read(local_avm_aspace65_read[0][29]),
      .avm_lm884_mmul_write(local_avm_aspace65_write[0][29]),
      .avm_lm884_mmul_address(local_avm_aspace65_address[0][29]),
      .avm_lm884_mmul_writedata(local_avm_aspace65_writedata[0][29]),
      .avm_lm884_mmul_byteenable(local_avm_aspace65_byteenable[0][29]),
      .avm_lm884_mmul_waitrequest(local_avm_aspace65_waitrequest[0][29]),
      .avm_lm884_mmul_readdata(local_avm_aspace65_readdata[0][29]),
      .avm_lm884_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][29]),
      .avm_lm884_mmul_burstcount(local_avm_aspace65_burstcount[0][29]),
      .avm_lm884_mmul_writeack(local_avm_aspace65_writeack[0][29]),
      // AVM avm_lm925_mmul
      .avm_lm925_mmul_enable(local_avm_aspace65_enable[0][30]),
      .avm_lm925_mmul_read(local_avm_aspace65_read[0][30]),
      .avm_lm925_mmul_write(local_avm_aspace65_write[0][30]),
      .avm_lm925_mmul_address(local_avm_aspace65_address[0][30]),
      .avm_lm925_mmul_writedata(local_avm_aspace65_writedata[0][30]),
      .avm_lm925_mmul_byteenable(local_avm_aspace65_byteenable[0][30]),
      .avm_lm925_mmul_waitrequest(local_avm_aspace65_waitrequest[0][30]),
      .avm_lm925_mmul_readdata(local_avm_aspace65_readdata[0][30]),
      .avm_lm925_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][30]),
      .avm_lm925_mmul_burstcount(local_avm_aspace65_burstcount[0][30]),
      .avm_lm925_mmul_writeack(local_avm_aspace65_writeack[0][30]),
      // AVM avm_lm966_mmul
      .avm_lm966_mmul_enable(local_avm_aspace65_enable[0][31]),
      .avm_lm966_mmul_read(local_avm_aspace65_read[0][31]),
      .avm_lm966_mmul_write(local_avm_aspace65_write[0][31]),
      .avm_lm966_mmul_address(local_avm_aspace65_address[0][31]),
      .avm_lm966_mmul_writedata(local_avm_aspace65_writedata[0][31]),
      .avm_lm966_mmul_byteenable(local_avm_aspace65_byteenable[0][31]),
      .avm_lm966_mmul_waitrequest(local_avm_aspace65_waitrequest[0][31]),
      .avm_lm966_mmul_readdata(local_avm_aspace65_readdata[0][31]),
      .avm_lm966_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][31]),
      .avm_lm966_mmul_burstcount(local_avm_aspace65_burstcount[0][31]),
      .avm_lm966_mmul_writeack(local_avm_aspace65_writeack[0][31]),
      // AVM avm_memdep_mmul
      .avm_memdep_mmul_enable(local_avm_aspace65_enable[0][32]),
      .avm_memdep_mmul_read(local_avm_aspace65_read[0][32]),
      .avm_memdep_mmul_write(local_avm_aspace65_write[0][32]),
      .avm_memdep_mmul_address(local_avm_aspace65_address[0][32]),
      .avm_memdep_mmul_writedata(local_avm_aspace65_writedata[0][32]),
      .avm_memdep_mmul_byteenable(local_avm_aspace65_byteenable[0][32]),
      .avm_memdep_mmul_waitrequest(local_avm_aspace65_waitrequest[0][32]),
      .avm_memdep_mmul_readdata(local_avm_aspace65_readdata[0][32]),
      .avm_memdep_mmul_readdatavalid(local_avm_aspace65_readdatavalid[0][32]),
      .avm_memdep_mmul_burstcount(local_avm_aspace65_burstcount[0][32]),
      .avm_memdep_mmul_writeack(local_avm_aspace65_writeack[0][32])
   );

   assign lmem_invalid_single_bit = |lmem_invalid_aspaces;
   generate
   begin:local_mem_system_aspace64
      logic local_icm_arb_request [1][2];
      logic local_icm_arb_enable [1][2];
      logic local_icm_arb_read [1][2];
      logic local_icm_arb_write [1][2];
      logic local_icm_arb_burstcount [1][2];
      logic [8:0] local_icm_arb_address [1][2];
      logic [1023:0] local_icm_arb_writedata [1][2];
      logic [127:0] local_icm_arb_byteenable [1][2];
      logic local_icm_arb_stall [1][2];
      logic local_icm_wrp_ack [1][2];
      logic local_icm_rrp_datavalid [1][2];
      logic [1023:0] local_icm_rrp_data [1][2];

      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:local_mem_group
         for( __j = 0; __j < 2; __j = __j + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(1024),
               .WRITEDATA_W(1024),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(128)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace64_enable[__i][__j]),
               .avm_read(local_avm_aspace64_read[__i][__j]),
               .avm_write(local_avm_aspace64_write[__i][__j]),
               .avm_address(local_avm_aspace64_address[__i][__j]),
               .avm_writedata(local_avm_aspace64_writedata[__i][__j]),
               .avm_byteenable(local_avm_aspace64_byteenable[__i][__j]),
               .avm_waitrequest(local_avm_aspace64_waitrequest[__i][__j]),
               .avm_readdata(local_avm_aspace64_readdata[__i][__j]),
               .avm_readdatavalid(local_avm_aspace64_readdatavalid[__i][__j]),
               .avm_burstcount(local_avm_aspace64_burstcount[__i][__j]),
               .avm_writeack(local_avm_aspace64_writeack[__i][__j]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__i][__j]),
               .ic_arb_enable(local_icm_arb_enable[__i][__j]),
               .ic_arb_read(local_icm_arb_read[__i][__j]),
               .ic_arb_write(local_icm_arb_write[__i][__j]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .ic_arb_address(local_icm_arb_address[__i][__j]),
               .ic_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .ic_arb_stall(local_icm_arb_stall[__i][__j]),
               .ic_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .ic_rrp_data(local_icm_rrp_data[__i][__j])
            );

         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:bank
            logic port_enable [1:2];
            logic port_read [1:2];
            logic port_write [1:2];
            logic [8:0] port_address [1:2];
            logic [1023:0] port_writedata [1:2];
            logic [127:0] port_byteenable [1:2];
            logic port_waitrequest [1:2];
            logic [1023:0] port_readdata [1:2];
            logic port_readdatavalid [1:2];

            // INST mem0 of acl_mem1x
            acl_mem1x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(384),
               .WIDTH(1024),
               .MEM_LATENCY(3),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(1),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2])
            );

         end

         for( __j = 0; __j < 2; __j = __j + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [8:0] b_arb_address [1];
            logic [1023:0] b_arb_writedata [1];
            logic [127:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [1023:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(1024),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(9),
               .BYTEENA_W(128),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__i][__j]),
               .m_arb_enable(local_icm_arb_enable[__i][__j]),
               .m_arb_read(local_icm_arb_read[__i][__j]),
               .m_arb_write(local_icm_arb_write[__i][__j]),
               .m_arb_burstcount(local_icm_arb_burstcount[__i][__j]),
               .m_arb_address(local_icm_arb_address[__i][__j]),
               .m_arb_writedata(local_icm_arb_writedata[__i][__j]),
               .m_arb_byteenable(local_icm_arb_byteenable[__i][__j]),
               .m_arb_stall(local_icm_arb_stall[__i][__j]),
               .m_wrp_ack(local_icm_wrp_ack[__i][__j]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__i][__j]),
               .m_rrp_data(local_icm_rrp_data[__i][__j]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [8:0] icm_in_arb_address [1];
            logic [1023:0] icm_in_arb_writedata [1];
            logic [127:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [1023:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [8:0] icm_out_arb_address;
            logic [1023:0] icm_out_arb_writedata;
            logic [127:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [1023:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_622775450004236210
            C_block_form_sys_ic_622775450004236210 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __j = 0; __j < 1; __j = __j + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [8:0] icm_in_arb_address [1];
            logic [1023:0] icm_in_arb_writedata [1];
            logic [127:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [1023:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [8:0] icm_out_arb_address;
            logic [1023:0] icm_out_arb_writedata;
            logic [127:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [1023:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_7252278650241567440
            C_block_form_sys_ic_7252278650241567440 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   generate
   begin:local_mem_system_aspace65
      logic local_icm_arb_request [1][33];
      logic local_icm_arb_enable [1][33];
      logic local_icm_arb_read [1][33];
      logic local_icm_arb_write [1][33];
      logic local_icm_arb_burstcount [1][33];
      logic [13:0] local_icm_arb_address [1][33];
      logic [31:0] local_icm_arb_writedata [1][33];
      logic [3:0] local_icm_arb_byteenable [1][33];
      logic local_icm_arb_stall [1][33];
      logic local_icm_wrp_ack [1][33];
      logic local_icm_rrp_datavalid [1][33];
      logic [31:0] local_icm_rrp_data [1][33];

      for( __j = 0; __j < 1; __j = __j + 1 )
      begin:local_mem_group
         for( __k = 0; __k < 33; __k = __k + 1 )
         begin:master
            // INST avm_to_ic of acl_avm_to_ic
            acl_avm_to_ic
            #(
               .DATA_W(32),
               .WRITEDATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(32),
               .BYTEENA_W(4)
            )
            avm_to_ic
            (
               // AVM avm
               .avm_enable(local_avm_aspace65_enable[__j][__k]),
               .avm_read(local_avm_aspace65_read[__j][__k]),
               .avm_write(local_avm_aspace65_write[__j][__k]),
               .avm_address(local_avm_aspace65_address[__j][__k]),
               .avm_writedata(local_avm_aspace65_writedata[__j][__k]),
               .avm_byteenable(local_avm_aspace65_byteenable[__j][__k]),
               .avm_waitrequest(local_avm_aspace65_waitrequest[__j][__k]),
               .avm_readdata(local_avm_aspace65_readdata[__j][__k]),
               .avm_readdatavalid(local_avm_aspace65_readdatavalid[__j][__k]),
               .avm_burstcount(local_avm_aspace65_burstcount[__j][__k]),
               .avm_writeack(local_avm_aspace65_writeack[__j][__k]),
               // ICM ic
               .ic_arb_request(local_icm_arb_request[__j][__k]),
               .ic_arb_enable(local_icm_arb_enable[__j][__k]),
               .ic_arb_read(local_icm_arb_read[__j][__k]),
               .ic_arb_write(local_icm_arb_write[__j][__k]),
               .ic_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .ic_arb_address(local_icm_arb_address[__j][__k]),
               .ic_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .ic_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .ic_arb_stall(local_icm_arb_stall[__j][__k]),
               .ic_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .ic_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .ic_rrp_data(local_icm_rrp_data[__j][__k])
            );

         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:bank
            logic port_enable [1:44];
            logic port_read [1:44];
            logic port_write [1:44];
            logic [13:0] port_address [1:44];
            logic [31:0] port_writedata [1:44];
            logic [3:0] port_byteenable [1:44];
            logic port_waitrequest [1:44];
            logic [31:0] port_readdata [1:44];
            logic port_readdatavalid [1:44];

            // INST mem0 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(12288),
               .WIDTH(32),
               .MEM_LATENCY(4),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem0
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[1]),
               .avs_port1_read(port_read[1]),
               .avs_port1_write(port_write[1]),
               .avs_port1_address(port_address[1]),
               .avs_port1_writedata(port_writedata[1]),
               .avs_port1_byteenable(port_byteenable[1]),
               .avs_port1_waitrequest(port_waitrequest[1]),
               .avs_port1_readdata(port_readdata[1]),
               .avs_port1_readdatavalid(port_readdatavalid[1]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[2]),
               .avs_port2_read(port_read[2]),
               .avs_port2_write(port_write[2]),
               .avs_port2_address(port_address[2]),
               .avs_port2_writedata(port_writedata[2]),
               .avs_port2_byteenable(port_byteenable[2]),
               .avs_port2_waitrequest(port_waitrequest[2]),
               .avs_port2_readdata(port_readdata[2]),
               .avs_port2_readdatavalid(port_readdatavalid[2]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[3]),
               .avs_port3_read(port_read[3]),
               .avs_port3_write(port_write[3]),
               .avs_port3_address(port_address[3]),
               .avs_port3_writedata(port_writedata[3]),
               .avs_port3_byteenable(port_byteenable[3]),
               .avs_port3_waitrequest(port_waitrequest[3]),
               .avs_port3_readdata(port_readdata[3]),
               .avs_port3_readdatavalid(port_readdatavalid[3]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[4]),
               .avs_port4_read(port_read[4]),
               .avs_port4_write(port_write[4]),
               .avs_port4_address(port_address[4]),
               .avs_port4_writedata(port_writedata[4]),
               .avs_port4_byteenable(port_byteenable[4]),
               .avs_port4_waitrequest(port_waitrequest[4]),
               .avs_port4_readdata(port_readdata[4]),
               .avs_port4_readdatavalid(port_readdatavalid[4])
            );

            // INST mem1 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(12288),
               .WIDTH(32),
               .MEM_LATENCY(4),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem1
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[5]),
               .avs_port1_read(port_read[5]),
               .avs_port1_write(port_write[5]),
               .avs_port1_address(port_address[5]),
               .avs_port1_writedata(port_writedata[5]),
               .avs_port1_byteenable(port_byteenable[5]),
               .avs_port1_waitrequest(port_waitrequest[5]),
               .avs_port1_readdata(port_readdata[5]),
               .avs_port1_readdatavalid(port_readdatavalid[5]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[6]),
               .avs_port2_read(port_read[6]),
               .avs_port2_write(port_write[6]),
               .avs_port2_address(port_address[6]),
               .avs_port2_writedata(port_writedata[6]),
               .avs_port2_byteenable(port_byteenable[6]),
               .avs_port2_waitrequest(port_waitrequest[6]),
               .avs_port2_readdata(port_readdata[6]),
               .avs_port2_readdatavalid(port_readdatavalid[6]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[7]),
               .avs_port3_read(port_read[7]),
               .avs_port3_write(port_write[7]),
               .avs_port3_address(port_address[7]),
               .avs_port3_writedata(port_writedata[7]),
               .avs_port3_byteenable(port_byteenable[7]),
               .avs_port3_waitrequest(port_waitrequest[7]),
               .avs_port3_readdata(port_readdata[7]),
               .avs_port3_readdatavalid(port_readdatavalid[7]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[8]),
               .avs_port4_read(port_read[8]),
               .avs_port4_write(port_write[8]),
               .avs_port4_address(port_address[8]),
               .avs_port4_writedata(port_writedata[8]),
               .avs_port4_byteenable(port_byteenable[8]),
               .avs_port4_waitrequest(port_waitrequest[8]),
               .avs_port4_readdata(port_readdata[8]),
               .avs_port4_readdatavalid(port_readdatavalid[8])
            );

            // INST mem2 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(12288),
               .WIDTH(32),
               .MEM_LATENCY(4),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem2
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[9]),
               .avs_port1_read(port_read[9]),
               .avs_port1_write(port_write[9]),
               .avs_port1_address(port_address[9]),
               .avs_port1_writedata(port_writedata[9]),
               .avs_port1_byteenable(port_byteenable[9]),
               .avs_port1_waitrequest(port_waitrequest[9]),
               .avs_port1_readdata(port_readdata[9]),
               .avs_port1_readdatavalid(port_readdatavalid[9]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[10]),
               .avs_port2_read(port_read[10]),
               .avs_port2_write(port_write[10]),
               .avs_port2_address(port_address[10]),
               .avs_port2_writedata(port_writedata[10]),
               .avs_port2_byteenable(port_byteenable[10]),
               .avs_port2_waitrequest(port_waitrequest[10]),
               .avs_port2_readdata(port_readdata[10]),
               .avs_port2_readdatavalid(port_readdatavalid[10]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[11]),
               .avs_port3_read(port_read[11]),
               .avs_port3_write(port_write[11]),
               .avs_port3_address(port_address[11]),
               .avs_port3_writedata(port_writedata[11]),
               .avs_port3_byteenable(port_byteenable[11]),
               .avs_port3_waitrequest(port_waitrequest[11]),
               .avs_port3_readdata(port_readdata[11]),
               .avs_port3_readdatavalid(port_readdatavalid[11]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[12]),
               .avs_port4_read(port_read[12]),
               .avs_port4_write(port_write[12]),
               .avs_port4_address(port_address[12]),
               .avs_port4_writedata(port_writedata[12]),
               .avs_port4_byteenable(port_byteenable[12]),
               .avs_port4_waitrequest(port_waitrequest[12]),
               .avs_port4_readdata(port_readdata[12]),
               .avs_port4_readdatavalid(port_readdatavalid[12])
            );

            // INST mem3 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(12288),
               .WIDTH(32),
               .MEM_LATENCY(4),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem3
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[13]),
               .avs_port1_read(port_read[13]),
               .avs_port1_write(port_write[13]),
               .avs_port1_address(port_address[13]),
               .avs_port1_writedata(port_writedata[13]),
               .avs_port1_byteenable(port_byteenable[13]),
               .avs_port1_waitrequest(port_waitrequest[13]),
               .avs_port1_readdata(port_readdata[13]),
               .avs_port1_readdatavalid(port_readdatavalid[13]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[14]),
               .avs_port2_read(port_read[14]),
               .avs_port2_write(port_write[14]),
               .avs_port2_address(port_address[14]),
               .avs_port2_writedata(port_writedata[14]),
               .avs_port2_byteenable(port_byteenable[14]),
               .avs_port2_waitrequest(port_waitrequest[14]),
               .avs_port2_readdata(port_readdata[14]),
               .avs_port2_readdatavalid(port_readdatavalid[14]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[15]),
               .avs_port3_read(port_read[15]),
               .avs_port3_write(port_write[15]),
               .avs_port3_address(port_address[15]),
               .avs_port3_writedata(port_writedata[15]),
               .avs_port3_byteenable(port_byteenable[15]),
               .avs_port3_waitrequest(port_waitrequest[15]),
               .avs_port3_readdata(port_readdata[15]),
               .avs_port3_readdatavalid(port_readdatavalid[15]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[16]),
               .avs_port4_read(port_read[16]),
               .avs_port4_write(port_write[16]),
               .avs_port4_address(port_address[16]),
               .avs_port4_writedata(port_writedata[16]),
               .avs_port4_byteenable(port_byteenable[16]),
               .avs_port4_waitrequest(port_waitrequest[16]),
               .avs_port4_readdata(port_readdata[16]),
               .avs_port4_readdatavalid(port_readdatavalid[16])
            );

            // INST mem4 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(12288),
               .WIDTH(32),
               .MEM_LATENCY(4),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem4
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[17]),
               .avs_port1_read(port_read[17]),
               .avs_port1_write(port_write[17]),
               .avs_port1_address(port_address[17]),
               .avs_port1_writedata(port_writedata[17]),
               .avs_port1_byteenable(port_byteenable[17]),
               .avs_port1_waitrequest(port_waitrequest[17]),
               .avs_port1_readdata(port_readdata[17]),
               .avs_port1_readdatavalid(port_readdatavalid[17]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[18]),
               .avs_port2_read(port_read[18]),
               .avs_port2_write(port_write[18]),
               .avs_port2_address(port_address[18]),
               .avs_port2_writedata(port_writedata[18]),
               .avs_port2_byteenable(port_byteenable[18]),
               .avs_port2_waitrequest(port_waitrequest[18]),
               .avs_port2_readdata(port_readdata[18]),
               .avs_port2_readdatavalid(port_readdatavalid[18]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[19]),
               .avs_port3_read(port_read[19]),
               .avs_port3_write(port_write[19]),
               .avs_port3_address(port_address[19]),
               .avs_port3_writedata(port_writedata[19]),
               .avs_port3_byteenable(port_byteenable[19]),
               .avs_port3_waitrequest(port_waitrequest[19]),
               .avs_port3_readdata(port_readdata[19]),
               .avs_port3_readdatavalid(port_readdatavalid[19]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[20]),
               .avs_port4_read(port_read[20]),
               .avs_port4_write(port_write[20]),
               .avs_port4_address(port_address[20]),
               .avs_port4_writedata(port_writedata[20]),
               .avs_port4_byteenable(port_byteenable[20]),
               .avs_port4_waitrequest(port_waitrequest[20]),
               .avs_port4_readdata(port_readdata[20]),
               .avs_port4_readdatavalid(port_readdatavalid[20])
            );

            // INST mem5 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(12288),
               .WIDTH(32),
               .MEM_LATENCY(4),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem5
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[21]),
               .avs_port1_read(port_read[21]),
               .avs_port1_write(port_write[21]),
               .avs_port1_address(port_address[21]),
               .avs_port1_writedata(port_writedata[21]),
               .avs_port1_byteenable(port_byteenable[21]),
               .avs_port1_waitrequest(port_waitrequest[21]),
               .avs_port1_readdata(port_readdata[21]),
               .avs_port1_readdatavalid(port_readdatavalid[21]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[22]),
               .avs_port2_read(port_read[22]),
               .avs_port2_write(port_write[22]),
               .avs_port2_address(port_address[22]),
               .avs_port2_writedata(port_writedata[22]),
               .avs_port2_byteenable(port_byteenable[22]),
               .avs_port2_waitrequest(port_waitrequest[22]),
               .avs_port2_readdata(port_readdata[22]),
               .avs_port2_readdatavalid(port_readdatavalid[22]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[23]),
               .avs_port3_read(port_read[23]),
               .avs_port3_write(port_write[23]),
               .avs_port3_address(port_address[23]),
               .avs_port3_writedata(port_writedata[23]),
               .avs_port3_byteenable(port_byteenable[23]),
               .avs_port3_waitrequest(port_waitrequest[23]),
               .avs_port3_readdata(port_readdata[23]),
               .avs_port3_readdatavalid(port_readdatavalid[23]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[24]),
               .avs_port4_read(port_read[24]),
               .avs_port4_write(port_write[24]),
               .avs_port4_address(port_address[24]),
               .avs_port4_writedata(port_writedata[24]),
               .avs_port4_byteenable(port_byteenable[24]),
               .avs_port4_waitrequest(port_waitrequest[24]),
               .avs_port4_readdata(port_readdata[24]),
               .avs_port4_readdatavalid(port_readdatavalid[24])
            );

            // INST mem6 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(12288),
               .WIDTH(32),
               .MEM_LATENCY(4),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem6
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[25]),
               .avs_port1_read(port_read[25]),
               .avs_port1_write(port_write[25]),
               .avs_port1_address(port_address[25]),
               .avs_port1_writedata(port_writedata[25]),
               .avs_port1_byteenable(port_byteenable[25]),
               .avs_port1_waitrequest(port_waitrequest[25]),
               .avs_port1_readdata(port_readdata[25]),
               .avs_port1_readdatavalid(port_readdatavalid[25]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[26]),
               .avs_port2_read(port_read[26]),
               .avs_port2_write(port_write[26]),
               .avs_port2_address(port_address[26]),
               .avs_port2_writedata(port_writedata[26]),
               .avs_port2_byteenable(port_byteenable[26]),
               .avs_port2_waitrequest(port_waitrequest[26]),
               .avs_port2_readdata(port_readdata[26]),
               .avs_port2_readdatavalid(port_readdatavalid[26]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[27]),
               .avs_port3_read(port_read[27]),
               .avs_port3_write(port_write[27]),
               .avs_port3_address(port_address[27]),
               .avs_port3_writedata(port_writedata[27]),
               .avs_port3_byteenable(port_byteenable[27]),
               .avs_port3_waitrequest(port_waitrequest[27]),
               .avs_port3_readdata(port_readdata[27]),
               .avs_port3_readdatavalid(port_readdatavalid[27]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[28]),
               .avs_port4_read(port_read[28]),
               .avs_port4_write(port_write[28]),
               .avs_port4_address(port_address[28]),
               .avs_port4_writedata(port_writedata[28]),
               .avs_port4_byteenable(port_byteenable[28]),
               .avs_port4_waitrequest(port_waitrequest[28]),
               .avs_port4_readdata(port_readdata[28]),
               .avs_port4_readdatavalid(port_readdatavalid[28])
            );

            // INST mem7 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(12288),
               .WIDTH(32),
               .MEM_LATENCY(4),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem7
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[29]),
               .avs_port1_read(port_read[29]),
               .avs_port1_write(port_write[29]),
               .avs_port1_address(port_address[29]),
               .avs_port1_writedata(port_writedata[29]),
               .avs_port1_byteenable(port_byteenable[29]),
               .avs_port1_waitrequest(port_waitrequest[29]),
               .avs_port1_readdata(port_readdata[29]),
               .avs_port1_readdatavalid(port_readdatavalid[29]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[30]),
               .avs_port2_read(port_read[30]),
               .avs_port2_write(port_write[30]),
               .avs_port2_address(port_address[30]),
               .avs_port2_writedata(port_writedata[30]),
               .avs_port2_byteenable(port_byteenable[30]),
               .avs_port2_waitrequest(port_waitrequest[30]),
               .avs_port2_readdata(port_readdata[30]),
               .avs_port2_readdatavalid(port_readdatavalid[30]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[31]),
               .avs_port3_read(port_read[31]),
               .avs_port3_write(port_write[31]),
               .avs_port3_address(port_address[31]),
               .avs_port3_writedata(port_writedata[31]),
               .avs_port3_byteenable(port_byteenable[31]),
               .avs_port3_waitrequest(port_waitrequest[31]),
               .avs_port3_readdata(port_readdata[31]),
               .avs_port3_readdatavalid(port_readdatavalid[31]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[32]),
               .avs_port4_read(port_read[32]),
               .avs_port4_write(port_write[32]),
               .avs_port4_address(port_address[32]),
               .avs_port4_writedata(port_writedata[32]),
               .avs_port4_byteenable(port_byteenable[32]),
               .avs_port4_waitrequest(port_waitrequest[32]),
               .avs_port4_readdata(port_readdata[32]),
               .avs_port4_readdatavalid(port_readdatavalid[32])
            );

            // INST mem8 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(12288),
               .WIDTH(32),
               .MEM_LATENCY(4),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem8
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[33]),
               .avs_port1_read(port_read[33]),
               .avs_port1_write(port_write[33]),
               .avs_port1_address(port_address[33]),
               .avs_port1_writedata(port_writedata[33]),
               .avs_port1_byteenable(port_byteenable[33]),
               .avs_port1_waitrequest(port_waitrequest[33]),
               .avs_port1_readdata(port_readdata[33]),
               .avs_port1_readdatavalid(port_readdatavalid[33]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[34]),
               .avs_port2_read(port_read[34]),
               .avs_port2_write(port_write[34]),
               .avs_port2_address(port_address[34]),
               .avs_port2_writedata(port_writedata[34]),
               .avs_port2_byteenable(port_byteenable[34]),
               .avs_port2_waitrequest(port_waitrequest[34]),
               .avs_port2_readdata(port_readdata[34]),
               .avs_port2_readdatavalid(port_readdatavalid[34]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[35]),
               .avs_port3_read(port_read[35]),
               .avs_port3_write(port_write[35]),
               .avs_port3_address(port_address[35]),
               .avs_port3_writedata(port_writedata[35]),
               .avs_port3_byteenable(port_byteenable[35]),
               .avs_port3_waitrequest(port_waitrequest[35]),
               .avs_port3_readdata(port_readdata[35]),
               .avs_port3_readdatavalid(port_readdatavalid[35]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[36]),
               .avs_port4_read(port_read[36]),
               .avs_port4_write(port_write[36]),
               .avs_port4_address(port_address[36]),
               .avs_port4_writedata(port_writedata[36]),
               .avs_port4_byteenable(port_byteenable[36]),
               .avs_port4_waitrequest(port_waitrequest[36]),
               .avs_port4_readdata(port_readdata[36]),
               .avs_port4_readdatavalid(port_readdatavalid[36])
            );

            // INST mem9 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(12288),
               .WIDTH(32),
               .MEM_LATENCY(4),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem9
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[37]),
               .avs_port1_read(port_read[37]),
               .avs_port1_write(port_write[37]),
               .avs_port1_address(port_address[37]),
               .avs_port1_writedata(port_writedata[37]),
               .avs_port1_byteenable(port_byteenable[37]),
               .avs_port1_waitrequest(port_waitrequest[37]),
               .avs_port1_readdata(port_readdata[37]),
               .avs_port1_readdatavalid(port_readdatavalid[37]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[38]),
               .avs_port2_read(port_read[38]),
               .avs_port2_write(port_write[38]),
               .avs_port2_address(port_address[38]),
               .avs_port2_writedata(port_writedata[38]),
               .avs_port2_byteenable(port_byteenable[38]),
               .avs_port2_waitrequest(port_waitrequest[38]),
               .avs_port2_readdata(port_readdata[38]),
               .avs_port2_readdatavalid(port_readdatavalid[38]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[39]),
               .avs_port3_read(port_read[39]),
               .avs_port3_write(port_write[39]),
               .avs_port3_address(port_address[39]),
               .avs_port3_writedata(port_writedata[39]),
               .avs_port3_byteenable(port_byteenable[39]),
               .avs_port3_waitrequest(port_waitrequest[39]),
               .avs_port3_readdata(port_readdata[39]),
               .avs_port3_readdatavalid(port_readdatavalid[39]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[40]),
               .avs_port4_read(port_read[40]),
               .avs_port4_write(port_write[40]),
               .avs_port4_address(port_address[40]),
               .avs_port4_writedata(port_writedata[40]),
               .avs_port4_byteenable(port_byteenable[40]),
               .avs_port4_waitrequest(port_waitrequest[40]),
               .avs_port4_readdata(port_readdata[40]),
               .avs_port4_readdatavalid(port_readdatavalid[40])
            );

            // INST mem10 of acl_mem2x
            acl_mem2x
            #(
               .INTENDED_DEVICE_FAMILY("Arria 10"),
               .DEPTH_WORDS(12288),
               .WIDTH(32),
               .MEM_LATENCY(4),
               .ASYNC_RESET(1),
               .SYNCHRONIZE_RESET(0),
               .ENABLED(0),
               .RDW_MODE("DONT_CARE"),
               .RAM_OPERATION_MODE("BIDIR_DUAL_PORT"),
               .MINIMIZE_MEMORY_USAGE(0),
               .USE_BYTEENA(0),
               .RAM_BLOCK_TYPE("AUTO")
            )
            mem10
            (
               .clk(clock),
               .clk2x(clock2x),
               .resetn(resetn),
               // AVS avs_port1
               .avs_port1_enable(port_enable[41]),
               .avs_port1_read(port_read[41]),
               .avs_port1_write(port_write[41]),
               .avs_port1_address(port_address[41]),
               .avs_port1_writedata(port_writedata[41]),
               .avs_port1_byteenable(port_byteenable[41]),
               .avs_port1_waitrequest(port_waitrequest[41]),
               .avs_port1_readdata(port_readdata[41]),
               .avs_port1_readdatavalid(port_readdatavalid[41]),
               // AVS avs_port2
               .avs_port2_enable(port_enable[42]),
               .avs_port2_read(port_read[42]),
               .avs_port2_write(port_write[42]),
               .avs_port2_address(port_address[42]),
               .avs_port2_writedata(port_writedata[42]),
               .avs_port2_byteenable(port_byteenable[42]),
               .avs_port2_waitrequest(port_waitrequest[42]),
               .avs_port2_readdata(port_readdata[42]),
               .avs_port2_readdatavalid(port_readdatavalid[42]),
               // AVS avs_port3
               .avs_port3_enable(port_enable[43]),
               .avs_port3_read(port_read[43]),
               .avs_port3_write(port_write[43]),
               .avs_port3_address(port_address[43]),
               .avs_port3_writedata(port_writedata[43]),
               .avs_port3_byteenable(port_byteenable[43]),
               .avs_port3_waitrequest(port_waitrequest[43]),
               .avs_port3_readdata(port_readdata[43]),
               .avs_port3_readdatavalid(port_readdatavalid[43]),
               // AVS avs_port4
               .avs_port4_enable(port_enable[44]),
               .avs_port4_read(port_read[44]),
               .avs_port4_write(port_write[44]),
               .avs_port4_address(port_address[44]),
               .avs_port4_writedata(port_writedata[44]),
               .avs_port4_byteenable(port_byteenable[44]),
               .avs_port4_waitrequest(port_waitrequest[44]),
               .avs_port4_readdata(port_readdata[44]),
               .avs_port4_readdatavalid(port_readdatavalid[44])
            );

         end

         for( __k = 0; __k < 33; __k = __k + 1 )
         begin:router
            logic b_arb_request [1];
            logic b_arb_enable [1];
            logic b_arb_read [1];
            logic b_arb_write [1];
            logic b_arb_burstcount [1];
            logic [13:0] b_arb_address [1];
            logic [31:0] b_arb_writedata [1];
            logic [3:0] b_arb_byteenable [1];
            logic b_arb_stall [1];
            logic b_wrp_ack [1];
            logic b_rrp_datavalid [1];
            logic [31:0] b_rrp_data [1];
            logic bank_select;

            // INST router of acl_ic_local_mem_router
            acl_ic_local_mem_router
            #(
               .DATA_W(32),
               .BURSTCOUNT_W(1),
               .ADDRESS_W(14),
               .BYTEENA_W(4),
               .NUM_BANKS(1)
            )
            router
            (
               .clock(clock),
               .resetn(resetn),
               .bank_select(bank_select),
               // ICM m
               .m_arb_request(local_icm_arb_request[__j][__k]),
               .m_arb_enable(local_icm_arb_enable[__j][__k]),
               .m_arb_read(local_icm_arb_read[__j][__k]),
               .m_arb_write(local_icm_arb_write[__j][__k]),
               .m_arb_burstcount(local_icm_arb_burstcount[__j][__k]),
               .m_arb_address(local_icm_arb_address[__j][__k]),
               .m_arb_writedata(local_icm_arb_writedata[__j][__k]),
               .m_arb_byteenable(local_icm_arb_byteenable[__j][__k]),
               .m_arb_stall(local_icm_arb_stall[__j][__k]),
               .m_wrp_ack(local_icm_wrp_ack[__j][__k]),
               .m_rrp_datavalid(local_icm_rrp_datavalid[__j][__k]),
               .m_rrp_data(local_icm_rrp_data[__j][__k]),
               // ICM b
               .b_arb_request(b_arb_request),
               .b_arb_enable(b_arb_enable),
               .b_arb_read(b_arb_read),
               .b_arb_write(b_arb_write),
               .b_arb_burstcount(b_arb_burstcount),
               .b_arb_address(b_arb_address),
               .b_arb_writedata(b_arb_writedata),
               .b_arb_byteenable(b_arb_byteenable),
               .b_arb_stall(b_arb_stall),
               .b_wrp_ack(b_wrp_ack),
               .b_rrp_datavalid(b_rrp_datavalid),
               .b_rrp_data(b_rrp_data)
            );

            assign bank_select = 1'b1;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port1bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[32].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[32].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[32].b_arb_read[0];
            assign icm_in_arb_write[0] = router[32].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[32].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[32].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[32].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[32].b_arb_byteenable[0];
            assign router[32].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[32].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[32].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[32].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_3054207334098509163
            C_block_form_sys_ic_3054207334098509163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[1] = icm_out_arb_enable;
            assign bank[0].port_read[1] = icm_out_arb_read;
            assign bank[0].port_write[1] = icm_out_arb_write;
            assign bank[0].port_address[1] = icm_out_arb_address;
            assign bank[0].port_writedata[1] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[1] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[1];
            assign icm_out_rrp_data = bank[0].port_readdata[1];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[1];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port2bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[30].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[30].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[30].b_arb_read[0];
            assign icm_in_arb_write[0] = router[30].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[30].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[30].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[30].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[30].b_arb_byteenable[0];
            assign router[30].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[30].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[30].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[30].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[2] = icm_out_arb_enable;
            assign bank[0].port_read[2] = icm_out_arb_read;
            assign bank[0].port_write[2] = icm_out_arb_write;
            assign bank[0].port_address[2] = icm_out_arb_address;
            assign bank[0].port_writedata[2] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[2] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[2];
            assign icm_out_rrp_data = bank[0].port_readdata[2];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[2];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port3bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[28].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[28].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[28].b_arb_read[0];
            assign icm_in_arb_write[0] = router[28].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[28].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[28].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[28].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[28].b_arb_byteenable[0];
            assign router[28].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[28].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[28].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[28].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[3] = icm_out_arb_enable;
            assign bank[0].port_read[3] = icm_out_arb_read;
            assign bank[0].port_write[3] = icm_out_arb_write;
            assign bank[0].port_address[3] = icm_out_arb_address;
            assign bank[0].port_writedata[3] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[3] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[3];
            assign icm_out_rrp_data = bank[0].port_readdata[3];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[3];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port4bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[29].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[29].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[29].b_arb_read[0];
            assign icm_in_arb_write[0] = router[29].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[29].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[29].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[29].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[29].b_arb_byteenable[0];
            assign router[29].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[29].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[29].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[29].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[4] = icm_out_arb_enable;
            assign bank[0].port_read[4] = icm_out_arb_read;
            assign bank[0].port_write[4] = icm_out_arb_write;
            assign bank[0].port_address[4] = icm_out_arb_address;
            assign bank[0].port_writedata[4] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[4] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[4];
            assign icm_out_rrp_data = bank[0].port_readdata[4];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[4];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port5bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[32].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[32].b_arb_request[0];
            assign icm_in_arb_read[0] = router[32].b_arb_read[0];
            assign icm_in_arb_write[0] = router[32].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[32].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[32].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[32].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[32].b_arb_byteenable[0];
            // INST data_ic of C_block_form_sys_ic_3054207334098509163
            C_block_form_sys_ic_3054207334098509163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[5] = icm_out_arb_enable;
            assign bank[0].port_read[5] = icm_out_arb_read;
            assign bank[0].port_write[5] = icm_out_arb_write;
            assign bank[0].port_address[5] = icm_out_arb_address;
            assign bank[0].port_writedata[5] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[5] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[5];
            assign icm_out_rrp_data = bank[0].port_readdata[5];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[5];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port6bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[2].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[2].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[2].b_arb_read[0];
            assign icm_in_arb_write[0] = router[2].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[2].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[2].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[2].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[2].b_arb_byteenable[0];
            assign router[2].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[2].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[2].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[2].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[6] = icm_out_arb_enable;
            assign bank[0].port_read[6] = icm_out_arb_read;
            assign bank[0].port_write[6] = icm_out_arb_write;
            assign bank[0].port_address[6] = icm_out_arb_address;
            assign bank[0].port_writedata[6] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[6] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[6];
            assign icm_out_rrp_data = bank[0].port_readdata[6];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[6];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port7bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[0].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[0].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[0].b_arb_read[0];
            assign icm_in_arb_write[0] = router[0].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[0].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[0].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[0].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[0].b_arb_byteenable[0];
            assign router[0].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[0].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[0].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[0].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[7] = icm_out_arb_enable;
            assign bank[0].port_read[7] = icm_out_arb_read;
            assign bank[0].port_write[7] = icm_out_arb_write;
            assign bank[0].port_address[7] = icm_out_arb_address;
            assign bank[0].port_writedata[7] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[7] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[7];
            assign icm_out_rrp_data = bank[0].port_readdata[7];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[7];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port8bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[1].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[1].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[1].b_arb_read[0];
            assign icm_in_arb_write[0] = router[1].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[1].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[1].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[1].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[1].b_arb_byteenable[0];
            assign router[1].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[1].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[1].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[1].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[8] = icm_out_arb_enable;
            assign bank[0].port_read[8] = icm_out_arb_read;
            assign bank[0].port_write[8] = icm_out_arb_write;
            assign bank[0].port_address[8] = icm_out_arb_address;
            assign bank[0].port_writedata[8] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[8] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[8];
            assign icm_out_rrp_data = bank[0].port_readdata[8];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[8];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port9bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[32].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[32].b_arb_request[0];
            assign icm_in_arb_read[0] = router[32].b_arb_read[0];
            assign icm_in_arb_write[0] = router[32].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[32].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[32].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[32].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[32].b_arb_byteenable[0];
            // INST data_ic of C_block_form_sys_ic_3054207334098509163
            C_block_form_sys_ic_3054207334098509163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[9] = icm_out_arb_enable;
            assign bank[0].port_read[9] = icm_out_arb_read;
            assign bank[0].port_write[9] = icm_out_arb_write;
            assign bank[0].port_address[9] = icm_out_arb_address;
            assign bank[0].port_writedata[9] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[9] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[9];
            assign icm_out_rrp_data = bank[0].port_readdata[9];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[9];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port10bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[6].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[6].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[6].b_arb_read[0];
            assign icm_in_arb_write[0] = router[6].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[6].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[6].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[6].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[6].b_arb_byteenable[0];
            assign router[6].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[6].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[6].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[6].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[10] = icm_out_arb_enable;
            assign bank[0].port_read[10] = icm_out_arb_read;
            assign bank[0].port_write[10] = icm_out_arb_write;
            assign bank[0].port_address[10] = icm_out_arb_address;
            assign bank[0].port_writedata[10] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[10] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[10];
            assign icm_out_rrp_data = bank[0].port_readdata[10];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[10];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port11bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[4].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[4].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[4].b_arb_read[0];
            assign icm_in_arb_write[0] = router[4].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[4].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[4].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[4].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[4].b_arb_byteenable[0];
            assign router[4].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[4].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[4].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[4].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[11] = icm_out_arb_enable;
            assign bank[0].port_read[11] = icm_out_arb_read;
            assign bank[0].port_write[11] = icm_out_arb_write;
            assign bank[0].port_address[11] = icm_out_arb_address;
            assign bank[0].port_writedata[11] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[11] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[11];
            assign icm_out_rrp_data = bank[0].port_readdata[11];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[11];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port12bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[5].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[5].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[5].b_arb_read[0];
            assign icm_in_arb_write[0] = router[5].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[5].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[5].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[5].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[5].b_arb_byteenable[0];
            assign router[5].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[5].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[5].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[5].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[12] = icm_out_arb_enable;
            assign bank[0].port_read[12] = icm_out_arb_read;
            assign bank[0].port_write[12] = icm_out_arb_write;
            assign bank[0].port_address[12] = icm_out_arb_address;
            assign bank[0].port_writedata[12] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[12] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[12];
            assign icm_out_rrp_data = bank[0].port_readdata[12];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[12];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port13bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[32].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[32].b_arb_request[0];
            assign icm_in_arb_read[0] = router[32].b_arb_read[0];
            assign icm_in_arb_write[0] = router[32].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[32].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[32].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[32].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[32].b_arb_byteenable[0];
            // INST data_ic of C_block_form_sys_ic_3054207334098509163
            C_block_form_sys_ic_3054207334098509163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[13] = icm_out_arb_enable;
            assign bank[0].port_read[13] = icm_out_arb_read;
            assign bank[0].port_write[13] = icm_out_arb_write;
            assign bank[0].port_address[13] = icm_out_arb_address;
            assign bank[0].port_writedata[13] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[13] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[13];
            assign icm_out_rrp_data = bank[0].port_readdata[13];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[13];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port14bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[10].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[10].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[10].b_arb_read[0];
            assign icm_in_arb_write[0] = router[10].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[10].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[10].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[10].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[10].b_arb_byteenable[0];
            assign router[10].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[10].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[10].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[10].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[14] = icm_out_arb_enable;
            assign bank[0].port_read[14] = icm_out_arb_read;
            assign bank[0].port_write[14] = icm_out_arb_write;
            assign bank[0].port_address[14] = icm_out_arb_address;
            assign bank[0].port_writedata[14] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[14] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[14];
            assign icm_out_rrp_data = bank[0].port_readdata[14];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[14];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port15bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[8].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[8].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[8].b_arb_read[0];
            assign icm_in_arb_write[0] = router[8].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[8].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[8].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[8].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[8].b_arb_byteenable[0];
            assign router[8].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[8].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[8].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[8].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[15] = icm_out_arb_enable;
            assign bank[0].port_read[15] = icm_out_arb_read;
            assign bank[0].port_write[15] = icm_out_arb_write;
            assign bank[0].port_address[15] = icm_out_arb_address;
            assign bank[0].port_writedata[15] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[15] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[15];
            assign icm_out_rrp_data = bank[0].port_readdata[15];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[15];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port16bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[9].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[9].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[9].b_arb_read[0];
            assign icm_in_arb_write[0] = router[9].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[9].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[9].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[9].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[9].b_arb_byteenable[0];
            assign router[9].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[9].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[9].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[9].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[16] = icm_out_arb_enable;
            assign bank[0].port_read[16] = icm_out_arb_read;
            assign bank[0].port_write[16] = icm_out_arb_write;
            assign bank[0].port_address[16] = icm_out_arb_address;
            assign bank[0].port_writedata[16] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[16] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[16];
            assign icm_out_rrp_data = bank[0].port_readdata[16];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[16];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port17bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[32].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[32].b_arb_request[0];
            assign icm_in_arb_read[0] = router[32].b_arb_read[0];
            assign icm_in_arb_write[0] = router[32].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[32].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[32].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[32].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[32].b_arb_byteenable[0];
            // INST data_ic of C_block_form_sys_ic_3054207334098509163
            C_block_form_sys_ic_3054207334098509163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[17] = icm_out_arb_enable;
            assign bank[0].port_read[17] = icm_out_arb_read;
            assign bank[0].port_write[17] = icm_out_arb_write;
            assign bank[0].port_address[17] = icm_out_arb_address;
            assign bank[0].port_writedata[17] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[17] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[17];
            assign icm_out_rrp_data = bank[0].port_readdata[17];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[17];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port18bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[14].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[14].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[14].b_arb_read[0];
            assign icm_in_arb_write[0] = router[14].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[14].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[14].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[14].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[14].b_arb_byteenable[0];
            assign router[14].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[14].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[14].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[14].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[18] = icm_out_arb_enable;
            assign bank[0].port_read[18] = icm_out_arb_read;
            assign bank[0].port_write[18] = icm_out_arb_write;
            assign bank[0].port_address[18] = icm_out_arb_address;
            assign bank[0].port_writedata[18] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[18] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[18];
            assign icm_out_rrp_data = bank[0].port_readdata[18];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[18];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port19bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[12].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[12].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[12].b_arb_read[0];
            assign icm_in_arb_write[0] = router[12].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[12].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[12].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[12].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[12].b_arb_byteenable[0];
            assign router[12].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[12].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[12].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[12].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[19] = icm_out_arb_enable;
            assign bank[0].port_read[19] = icm_out_arb_read;
            assign bank[0].port_write[19] = icm_out_arb_write;
            assign bank[0].port_address[19] = icm_out_arb_address;
            assign bank[0].port_writedata[19] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[19] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[19];
            assign icm_out_rrp_data = bank[0].port_readdata[19];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[19];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port20bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[13].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[13].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[13].b_arb_read[0];
            assign icm_in_arb_write[0] = router[13].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[13].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[13].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[13].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[13].b_arb_byteenable[0];
            assign router[13].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[13].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[13].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[13].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[20] = icm_out_arb_enable;
            assign bank[0].port_read[20] = icm_out_arb_read;
            assign bank[0].port_write[20] = icm_out_arb_write;
            assign bank[0].port_address[20] = icm_out_arb_address;
            assign bank[0].port_writedata[20] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[20] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[20];
            assign icm_out_rrp_data = bank[0].port_readdata[20];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[20];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port21bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[32].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[32].b_arb_request[0];
            assign icm_in_arb_read[0] = router[32].b_arb_read[0];
            assign icm_in_arb_write[0] = router[32].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[32].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[32].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[32].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[32].b_arb_byteenable[0];
            // INST data_ic of C_block_form_sys_ic_3054207334098509163
            C_block_form_sys_ic_3054207334098509163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[21] = icm_out_arb_enable;
            assign bank[0].port_read[21] = icm_out_arb_read;
            assign bank[0].port_write[21] = icm_out_arb_write;
            assign bank[0].port_address[21] = icm_out_arb_address;
            assign bank[0].port_writedata[21] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[21] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[21];
            assign icm_out_rrp_data = bank[0].port_readdata[21];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[21];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port22bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[18].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[18].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[18].b_arb_read[0];
            assign icm_in_arb_write[0] = router[18].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[18].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[18].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[18].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[18].b_arb_byteenable[0];
            assign router[18].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[18].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[18].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[18].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[22] = icm_out_arb_enable;
            assign bank[0].port_read[22] = icm_out_arb_read;
            assign bank[0].port_write[22] = icm_out_arb_write;
            assign bank[0].port_address[22] = icm_out_arb_address;
            assign bank[0].port_writedata[22] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[22] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[22];
            assign icm_out_rrp_data = bank[0].port_readdata[22];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[22];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port23bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[16].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[16].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[16].b_arb_read[0];
            assign icm_in_arb_write[0] = router[16].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[16].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[16].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[16].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[16].b_arb_byteenable[0];
            assign router[16].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[16].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[16].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[16].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[23] = icm_out_arb_enable;
            assign bank[0].port_read[23] = icm_out_arb_read;
            assign bank[0].port_write[23] = icm_out_arb_write;
            assign bank[0].port_address[23] = icm_out_arb_address;
            assign bank[0].port_writedata[23] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[23] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[23];
            assign icm_out_rrp_data = bank[0].port_readdata[23];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[23];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port24bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[17].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[17].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[17].b_arb_read[0];
            assign icm_in_arb_write[0] = router[17].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[17].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[17].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[17].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[17].b_arb_byteenable[0];
            assign router[17].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[17].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[17].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[17].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[24] = icm_out_arb_enable;
            assign bank[0].port_read[24] = icm_out_arb_read;
            assign bank[0].port_write[24] = icm_out_arb_write;
            assign bank[0].port_address[24] = icm_out_arb_address;
            assign bank[0].port_writedata[24] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[24] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[24];
            assign icm_out_rrp_data = bank[0].port_readdata[24];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[24];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port25bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[32].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[32].b_arb_request[0];
            assign icm_in_arb_read[0] = router[32].b_arb_read[0];
            assign icm_in_arb_write[0] = router[32].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[32].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[32].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[32].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[32].b_arb_byteenable[0];
            // INST data_ic of C_block_form_sys_ic_3054207334098509163
            C_block_form_sys_ic_3054207334098509163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[25] = icm_out_arb_enable;
            assign bank[0].port_read[25] = icm_out_arb_read;
            assign bank[0].port_write[25] = icm_out_arb_write;
            assign bank[0].port_address[25] = icm_out_arb_address;
            assign bank[0].port_writedata[25] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[25] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[25];
            assign icm_out_rrp_data = bank[0].port_readdata[25];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[25];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port26bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[19].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[19].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[19].b_arb_read[0];
            assign icm_in_arb_write[0] = router[19].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[19].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[19].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[19].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[19].b_arb_byteenable[0];
            assign router[19].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[19].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[19].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[19].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[26] = icm_out_arb_enable;
            assign bank[0].port_read[26] = icm_out_arb_read;
            assign bank[0].port_write[26] = icm_out_arb_write;
            assign bank[0].port_address[26] = icm_out_arb_address;
            assign bank[0].port_writedata[26] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[26] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[26];
            assign icm_out_rrp_data = bank[0].port_readdata[26];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[26];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port27bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[20].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[20].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[20].b_arb_read[0];
            assign icm_in_arb_write[0] = router[20].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[20].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[20].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[20].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[20].b_arb_byteenable[0];
            assign router[20].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[20].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[20].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[20].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[27] = icm_out_arb_enable;
            assign bank[0].port_read[27] = icm_out_arb_read;
            assign bank[0].port_write[27] = icm_out_arb_write;
            assign bank[0].port_address[27] = icm_out_arb_address;
            assign bank[0].port_writedata[27] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[27] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[27];
            assign icm_out_rrp_data = bank[0].port_readdata[27];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[27];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port28bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[21].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[21].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[21].b_arb_read[0];
            assign icm_in_arb_write[0] = router[21].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[21].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[21].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[21].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[21].b_arb_byteenable[0];
            assign router[21].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[21].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[21].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[21].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[28] = icm_out_arb_enable;
            assign bank[0].port_read[28] = icm_out_arb_read;
            assign bank[0].port_write[28] = icm_out_arb_write;
            assign bank[0].port_address[28] = icm_out_arb_address;
            assign bank[0].port_writedata[28] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[28] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[28];
            assign icm_out_rrp_data = bank[0].port_readdata[28];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[28];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port29bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[32].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[32].b_arb_request[0];
            assign icm_in_arb_read[0] = router[32].b_arb_read[0];
            assign icm_in_arb_write[0] = router[32].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[32].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[32].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[32].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[32].b_arb_byteenable[0];
            // INST data_ic of C_block_form_sys_ic_3054207334098509163
            C_block_form_sys_ic_3054207334098509163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[29] = icm_out_arb_enable;
            assign bank[0].port_read[29] = icm_out_arb_read;
            assign bank[0].port_write[29] = icm_out_arb_write;
            assign bank[0].port_address[29] = icm_out_arb_address;
            assign bank[0].port_writedata[29] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[29] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[29];
            assign icm_out_rrp_data = bank[0].port_readdata[29];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[29];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port30bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[23].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[23].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[23].b_arb_read[0];
            assign icm_in_arb_write[0] = router[23].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[23].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[23].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[23].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[23].b_arb_byteenable[0];
            assign router[23].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[23].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[23].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[23].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[30] = icm_out_arb_enable;
            assign bank[0].port_read[30] = icm_out_arb_read;
            assign bank[0].port_write[30] = icm_out_arb_write;
            assign bank[0].port_address[30] = icm_out_arb_address;
            assign bank[0].port_writedata[30] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[30] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[30];
            assign icm_out_rrp_data = bank[0].port_readdata[30];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[30];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port31bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[24].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[24].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[24].b_arb_read[0];
            assign icm_in_arb_write[0] = router[24].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[24].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[24].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[24].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[24].b_arb_byteenable[0];
            assign router[24].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[24].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[24].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[24].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[31] = icm_out_arb_enable;
            assign bank[0].port_read[31] = icm_out_arb_read;
            assign bank[0].port_write[31] = icm_out_arb_write;
            assign bank[0].port_address[31] = icm_out_arb_address;
            assign bank[0].port_writedata[31] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[31] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[31];
            assign icm_out_rrp_data = bank[0].port_readdata[31];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[31];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port32bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[25].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[25].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[25].b_arb_read[0];
            assign icm_in_arb_write[0] = router[25].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[25].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[25].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[25].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[25].b_arb_byteenable[0];
            assign router[25].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[25].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[25].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[25].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[32] = icm_out_arb_enable;
            assign bank[0].port_read[32] = icm_out_arb_read;
            assign bank[0].port_write[32] = icm_out_arb_write;
            assign bank[0].port_address[32] = icm_out_arb_address;
            assign bank[0].port_writedata[32] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[32] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[32];
            assign icm_out_rrp_data = bank[0].port_readdata[32];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[32];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port33bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[32].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[32].b_arb_request[0];
            assign icm_in_arb_read[0] = router[32].b_arb_read[0];
            assign icm_in_arb_write[0] = router[32].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[32].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[32].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[32].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[32].b_arb_byteenable[0];
            // INST data_ic of C_block_form_sys_ic_3054207334098509163
            C_block_form_sys_ic_3054207334098509163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[33] = icm_out_arb_enable;
            assign bank[0].port_read[33] = icm_out_arb_read;
            assign bank[0].port_write[33] = icm_out_arb_write;
            assign bank[0].port_address[33] = icm_out_arb_address;
            assign bank[0].port_writedata[33] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[33] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[33];
            assign icm_out_rrp_data = bank[0].port_readdata[33];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[33];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port34bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[22].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[22].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[22].b_arb_read[0];
            assign icm_in_arb_write[0] = router[22].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[22].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[22].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[22].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[22].b_arb_byteenable[0];
            assign router[22].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[22].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[22].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[22].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[34] = icm_out_arb_enable;
            assign bank[0].port_read[34] = icm_out_arb_read;
            assign bank[0].port_write[34] = icm_out_arb_write;
            assign bank[0].port_address[34] = icm_out_arb_address;
            assign bank[0].port_writedata[34] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[34] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[34];
            assign icm_out_rrp_data = bank[0].port_readdata[34];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[34];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port35bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[27].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[27].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[27].b_arb_read[0];
            assign icm_in_arb_write[0] = router[27].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[27].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[27].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[27].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[27].b_arb_byteenable[0];
            assign router[27].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[27].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[27].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[27].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[35] = icm_out_arb_enable;
            assign bank[0].port_read[35] = icm_out_arb_read;
            assign bank[0].port_write[35] = icm_out_arb_write;
            assign bank[0].port_address[35] = icm_out_arb_address;
            assign bank[0].port_writedata[35] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[35] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[35];
            assign icm_out_rrp_data = bank[0].port_readdata[35];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[35];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port36bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[31].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[31].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[31].b_arb_read[0];
            assign icm_in_arb_write[0] = router[31].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[31].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[31].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[31].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[31].b_arb_byteenable[0];
            assign router[31].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[31].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[31].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[31].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[36] = icm_out_arb_enable;
            assign bank[0].port_read[36] = icm_out_arb_read;
            assign bank[0].port_write[36] = icm_out_arb_write;
            assign bank[0].port_address[36] = icm_out_arb_address;
            assign bank[0].port_writedata[36] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[36] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[36];
            assign icm_out_rrp_data = bank[0].port_readdata[36];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[36];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port37bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[32].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[32].b_arb_request[0];
            assign icm_in_arb_read[0] = router[32].b_arb_read[0];
            assign icm_in_arb_write[0] = router[32].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[32].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[32].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[32].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[32].b_arb_byteenable[0];
            // INST data_ic of C_block_form_sys_ic_3054207334098509163
            C_block_form_sys_ic_3054207334098509163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[37] = icm_out_arb_enable;
            assign bank[0].port_read[37] = icm_out_arb_read;
            assign bank[0].port_write[37] = icm_out_arb_write;
            assign bank[0].port_address[37] = icm_out_arb_address;
            assign bank[0].port_writedata[37] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[37] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[37];
            assign icm_out_rrp_data = bank[0].port_readdata[37];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[37];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port38bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[26].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[26].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[26].b_arb_read[0];
            assign icm_in_arb_write[0] = router[26].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[26].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[26].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[26].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[26].b_arb_byteenable[0];
            assign router[26].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[26].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[26].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[26].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[38] = icm_out_arb_enable;
            assign bank[0].port_read[38] = icm_out_arb_read;
            assign bank[0].port_write[38] = icm_out_arb_write;
            assign bank[0].port_address[38] = icm_out_arb_address;
            assign bank[0].port_writedata[38] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[38] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[38];
            assign icm_out_rrp_data = bank[0].port_readdata[38];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[38];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port39bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[3].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[3].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[3].b_arb_read[0];
            assign icm_in_arb_write[0] = router[3].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[3].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[3].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[3].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[3].b_arb_byteenable[0];
            assign router[3].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[3].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[3].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[3].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[39] = icm_out_arb_enable;
            assign bank[0].port_read[39] = icm_out_arb_read;
            assign bank[0].port_write[39] = icm_out_arb_write;
            assign bank[0].port_address[39] = icm_out_arb_address;
            assign bank[0].port_writedata[39] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[39] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[39];
            assign icm_out_rrp_data = bank[0].port_readdata[39];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[39];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port40bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[7].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[7].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[7].b_arb_read[0];
            assign icm_in_arb_write[0] = router[7].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[7].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[7].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[7].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[7].b_arb_byteenable[0];
            assign router[7].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[7].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[7].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[7].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[40] = icm_out_arb_enable;
            assign bank[0].port_read[40] = icm_out_arb_read;
            assign bank[0].port_write[40] = icm_out_arb_write;
            assign bank[0].port_address[40] = icm_out_arb_address;
            assign bank[0].port_writedata[40] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[40] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[40];
            assign icm_out_rrp_data = bank[0].port_readdata[40];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[40];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port41bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            // Replicated store outputs from interconnect not connected to router
            assign icm_in_arb_enable[0] = router[32].b_arb_enable[0];
            assign icm_in_arb_request[0] = router[32].b_arb_request[0];
            assign icm_in_arb_read[0] = router[32].b_arb_read[0];
            assign icm_in_arb_write[0] = router[32].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[32].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[32].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[32].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[32].b_arb_byteenable[0];
            // INST data_ic of C_block_form_sys_ic_3054207334098509163
            C_block_form_sys_ic_3054207334098509163 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[41] = icm_out_arb_enable;
            assign bank[0].port_read[41] = icm_out_arb_read;
            assign bank[0].port_write[41] = icm_out_arb_write;
            assign bank[0].port_address[41] = icm_out_arb_address;
            assign bank[0].port_writedata[41] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[41] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[41];
            assign icm_out_rrp_data = bank[0].port_readdata[41];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[41];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port42bank0
            assign bank[0].port_enable[42] = '0;
            assign bank[0].port_read[42] = '0;
            assign bank[0].port_write[42] = '0;
            assign bank[0].port_address[42] = '0;
            assign bank[0].port_writedata[42] = '0;
            assign bank[0].port_byteenable[42] = '0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port43bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[11].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[11].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[11].b_arb_read[0];
            assign icm_in_arb_write[0] = router[11].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[11].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[11].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[11].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[11].b_arb_byteenable[0];
            assign router[11].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[11].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[11].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[11].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[43] = icm_out_arb_enable;
            assign bank[0].port_read[43] = icm_out_arb_read;
            assign bank[0].port_write[43] = icm_out_arb_write;
            assign bank[0].port_address[43] = icm_out_arb_address;
            assign bank[0].port_writedata[43] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[43] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[43];
            assign icm_out_rrp_data = bank[0].port_readdata[43];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[43];
            assign icm_out_wrp_ack = 'b0;
         end

         for( __k = 0; __k < 1; __k = __k + 1 )
         begin:port44bank0
            logic icm_in_arb_request [1];
            logic icm_in_arb_enable [1];
            logic icm_in_arb_read [1];
            logic icm_in_arb_write [1];
            logic icm_in_arb_burstcount [1];
            logic [13:0] icm_in_arb_address [1];
            logic [31:0] icm_in_arb_writedata [1];
            logic [3:0] icm_in_arb_byteenable [1];
            logic icm_in_arb_stall [1];
            logic icm_in_wrp_ack [1];
            logic icm_in_rrp_datavalid [1];
            logic [31:0] icm_in_rrp_data [1];
            logic icm_out_arb_request;
            logic icm_out_arb_enable;
            logic icm_out_arb_read;
            logic icm_out_arb_write;
            logic icm_out_arb_burstcount;
            logic [13:0] icm_out_arb_address;
            logic [31:0] icm_out_arb_writedata;
            logic [3:0] icm_out_arb_byteenable;
            logic icm_out_arb_stall;
            logic icm_out_wrp_ack;
            logic icm_out_rrp_datavalid;
            logic [31:0] icm_out_rrp_data;

            assign icm_in_arb_request[0] = router[15].b_arb_request[0];
            assign icm_in_arb_enable[0] = router[15].b_arb_enable[0];
            assign icm_in_arb_read[0] = router[15].b_arb_read[0];
            assign icm_in_arb_write[0] = router[15].b_arb_write[0];
            assign icm_in_arb_burstcount[0] = router[15].b_arb_burstcount[0];
            assign icm_in_arb_address[0] = router[15].b_arb_address[0];
            assign icm_in_arb_writedata[0] = router[15].b_arb_writedata[0];
            assign icm_in_arb_byteenable[0] = router[15].b_arb_byteenable[0];
            assign router[15].b_arb_stall[0] = icm_in_arb_stall[0];
            assign router[15].b_wrp_ack[0] = icm_in_wrp_ack[0];
            assign router[15].b_rrp_datavalid[0] = icm_in_rrp_datavalid[0];
            assign router[15].b_rrp_data[0] = icm_in_rrp_data[0];
            // INST data_ic of C_block_form_sys_ic_11249442177670958757
            C_block_form_sys_ic_11249442177670958757 data_ic
            (
               .clock(clock),
               .resetn(resetn),
               // ICM m
               .m_arb_request(icm_in_arb_request),
               .m_arb_enable(icm_in_arb_enable),
               .m_arb_read(icm_in_arb_read),
               .m_arb_write(icm_in_arb_write),
               .m_arb_burstcount(icm_in_arb_burstcount),
               .m_arb_address(icm_in_arb_address),
               .m_arb_writedata(icm_in_arb_writedata),
               .m_arb_byteenable(icm_in_arb_byteenable),
               .m_arb_stall(icm_in_arb_stall),
               .m_wrp_ack(icm_in_wrp_ack),
               .m_rrp_datavalid(icm_in_rrp_datavalid),
               .m_rrp_data(icm_in_rrp_data),
               // ICM mout
               .mout_arb_request(icm_out_arb_request),
               .mout_arb_enable(icm_out_arb_enable),
               .mout_arb_read(icm_out_arb_read),
               .mout_arb_write(icm_out_arb_write),
               .mout_arb_burstcount(icm_out_arb_burstcount),
               .mout_arb_address(icm_out_arb_address),
               .mout_arb_writedata(icm_out_arb_writedata),
               .mout_arb_byteenable(icm_out_arb_byteenable),
               .mout_arb_id(),
               .mout_arb_stall(icm_out_arb_stall),
               .mout_wrp_ack(icm_out_wrp_ack),
               .mout_rrp_datavalid(icm_out_rrp_datavalid),
               .mout_rrp_data(icm_out_rrp_data)
            );

            assign bank[0].port_enable[44] = icm_out_arb_enable;
            assign bank[0].port_read[44] = icm_out_arb_read;
            assign bank[0].port_write[44] = icm_out_arb_write;
            assign bank[0].port_address[44] = icm_out_arb_address;
            assign bank[0].port_writedata[44] = icm_out_arb_writedata;
            assign bank[0].port_byteenable[44] = icm_out_arb_byteenable;
            assign icm_out_arb_stall = bank[0].port_waitrequest[44];
            assign icm_out_rrp_data = bank[0].port_readdata[44];
            assign icm_out_rrp_datavalid = bank[0].port_readdatavalid[44];
            assign icm_out_wrp_ack = 'b0;
         end

      end

   end
   endgenerate

   assign lmem_invalid_aspaces[2] = 'b0;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE global_memory_tree0_mod
/////////////////////////////////////////////////////////////////
module global_memory_tree0_mod
(
   input logic resetn,
   input logic clock,
   input logic clock2x,
   // AVM gmem0_DDR_mtree_avm
   input logic gmem0_DDR_mtree_avm_enable [3],
   input logic gmem0_DDR_mtree_avm_read [3],
   input logic gmem0_DDR_mtree_avm_write [3],
   input logic [30:0] gmem0_DDR_mtree_avm_address [3],
   input logic [511:0] gmem0_DDR_mtree_avm_writedata [3],
   input logic [63:0] gmem0_DDR_mtree_avm_byteenable [3],
   output logic gmem0_DDR_mtree_avm_waitrequest [3],
   output logic [511:0] gmem0_DDR_mtree_avm_readdata [3],
   output logic gmem0_DDR_mtree_avm_readdatavalid [3],
   input logic [4:0] gmem0_DDR_mtree_avm_burstcount [3],
   output logic gmem0_DDR_mtree_avm_writeack [3],
   // AVM mtree_mem_gmem0_DDR_port_0_0_rw
   output logic mtree_mem_gmem0_DDR_port_0_0_rw_enable,
   output logic mtree_mem_gmem0_DDR_port_0_0_rw_read,
   output logic mtree_mem_gmem0_DDR_port_0_0_rw_write,
   output logic [30:0] mtree_mem_gmem0_DDR_port_0_0_rw_address,
   output logic [511:0] mtree_mem_gmem0_DDR_port_0_0_rw_writedata,
   output logic [63:0] mtree_mem_gmem0_DDR_port_0_0_rw_byteenable,
   input logic mtree_mem_gmem0_DDR_port_0_0_rw_waitrequest,
   input logic [511:0] mtree_mem_gmem0_DDR_port_0_0_rw_readdata,
   input logic mtree_mem_gmem0_DDR_port_0_0_rw_readdatavalid,
   output logic [4:0] mtree_mem_gmem0_DDR_port_0_0_rw_burstcount,
   input logic mtree_mem_gmem0_DDR_port_0_0_rw_writeack
);
   genvar __i;
   generate
   begin:gmem0_DDR_
      logic gmem0_DDR_icm_in_arb_request [3];
      logic gmem0_DDR_icm_in_arb_enable [3];
      logic gmem0_DDR_icm_in_arb_read [3];
      logic gmem0_DDR_icm_in_arb_write [3];
      logic [4:0] gmem0_DDR_icm_in_arb_burstcount [3];
      logic [24:0] gmem0_DDR_icm_in_arb_address [3];
      logic [511:0] gmem0_DDR_icm_in_arb_writedata [3];
      logic [63:0] gmem0_DDR_icm_in_arb_byteenable [3];
      logic gmem0_DDR_icm_in_arb_stall [3];
      logic gmem0_DDR_icm_in_wrp_ack [3];
      logic gmem0_DDR_icm_in_rrp_datavalid [3];
      logic [511:0] gmem0_DDR_icm_in_rrp_data [3];
      logic gmem0_DDR_icm_preroute_arb_request [3];
      logic gmem0_DDR_icm_preroute_arb_enable [3];
      logic gmem0_DDR_icm_preroute_arb_read [3];
      logic gmem0_DDR_icm_preroute_arb_write [3];
      logic [4:0] gmem0_DDR_icm_preroute_arb_burstcount [3];
      logic [24:0] gmem0_DDR_icm_preroute_arb_address [3];
      logic [511:0] gmem0_DDR_icm_preroute_arb_writedata [3];
      logic [63:0] gmem0_DDR_icm_preroute_arb_byteenable [3];
      logic gmem0_DDR_icm_preroute_arb_stall [3];
      logic gmem0_DDR_icm_preroute_wrp_ack [3];
      logic gmem0_DDR_icm_preroute_rrp_datavalid [3];
      logic [511:0] gmem0_DDR_icm_preroute_rrp_data [3];
      logic icm_groupgmem0_DDR_router_0_arb_request [1];
      logic icm_groupgmem0_DDR_router_0_arb_enable [1];
      logic icm_groupgmem0_DDR_router_0_arb_read [1];
      logic icm_groupgmem0_DDR_router_0_arb_write [1];
      logic [4:0] icm_groupgmem0_DDR_router_0_arb_burstcount [1];
      logic [24:0] icm_groupgmem0_DDR_router_0_arb_address [1];
      logic [511:0] icm_groupgmem0_DDR_router_0_arb_writedata [1];
      logic [63:0] icm_groupgmem0_DDR_router_0_arb_byteenable [1];
      logic icm_groupgmem0_DDR_router_0_arb_stall [1];
      logic icm_groupgmem0_DDR_router_0_wrp_ack [1];
      logic icm_groupgmem0_DDR_router_0_rrp_datavalid [1];
      logic [511:0] icm_groupgmem0_DDR_router_0_rrp_data [1];
      logic icm_groupgmem0_DDR_router_1_arb_request [1];
      logic icm_groupgmem0_DDR_router_1_arb_enable [1];
      logic icm_groupgmem0_DDR_router_1_arb_read [1];
      logic icm_groupgmem0_DDR_router_1_arb_write [1];
      logic [4:0] icm_groupgmem0_DDR_router_1_arb_burstcount [1];
      logic [24:0] icm_groupgmem0_DDR_router_1_arb_address [1];
      logic [511:0] icm_groupgmem0_DDR_router_1_arb_writedata [1];
      logic [63:0] icm_groupgmem0_DDR_router_1_arb_byteenable [1];
      logic icm_groupgmem0_DDR_router_1_arb_stall [1];
      logic icm_groupgmem0_DDR_router_1_wrp_ack [1];
      logic icm_groupgmem0_DDR_router_1_rrp_datavalid [1];
      logic [511:0] icm_groupgmem0_DDR_router_1_rrp_data [1];
      logic icm_groupgmem0_DDR_router_2_arb_request [1];
      logic icm_groupgmem0_DDR_router_2_arb_enable [1];
      logic icm_groupgmem0_DDR_router_2_arb_read [1];
      logic icm_groupgmem0_DDR_router_2_arb_write [1];
      logic [4:0] icm_groupgmem0_DDR_router_2_arb_burstcount [1];
      logic [24:0] icm_groupgmem0_DDR_router_2_arb_address [1];
      logic [511:0] icm_groupgmem0_DDR_router_2_arb_writedata [1];
      logic [63:0] icm_groupgmem0_DDR_router_2_arb_byteenable [1];
      logic icm_groupgmem0_DDR_router_2_arb_stall [1];
      logic icm_groupgmem0_DDR_router_2_wrp_ack [1];
      logic icm_groupgmem0_DDR_router_2_rrp_datavalid [1];
      logic [511:0] icm_groupgmem0_DDR_router_2_rrp_data [1];
      logic icm_out_0_rw_arb_request [1];
      logic icm_out_0_rw_arb_enable [1];
      logic icm_out_0_rw_arb_read [1];
      logic icm_out_0_rw_arb_write [1];
      logic [4:0] icm_out_0_rw_arb_burstcount [1];
      logic [24:0] icm_out_0_rw_arb_address [1];
      logic [511:0] icm_out_0_rw_arb_writedata [1];
      logic [63:0] icm_out_0_rw_arb_byteenable [1];
      logic [1:0] icm_out_0_rw_arb_id [1];
      logic icm_out_0_rw_arb_stall [1];
      logic icm_out_0_rw_wrp_ack [1];
      logic icm_out_0_rw_rrp_datavalid [1];
      logic [511:0] icm_out_0_rw_rrp_data [1];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_request [3];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_enable [3];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_read [3];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_write [3];
      logic [4:0] icm_routedgmem0_DDR_port_0_0_rw_arb_burstcount [3];
      logic [24:0] icm_routedgmem0_DDR_port_0_0_rw_arb_address [3];
      logic [511:0] icm_routedgmem0_DDR_port_0_0_rw_arb_writedata [3];
      logic [63:0] icm_routedgmem0_DDR_port_0_0_rw_arb_byteenable [3];
      logic icm_routedgmem0_DDR_port_0_0_rw_arb_stall [3];
      logic icm_routedgmem0_DDR_port_0_0_rw_wrp_ack [3];
      logic icm_routedgmem0_DDR_port_0_0_rw_rrp_datavalid [3];
      logic [511:0] icm_routedgmem0_DDR_port_0_0_rw_rrp_data [3];

      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:t
         // INST gmem0_DDR_avm_to_ic of acl_avm_to_ic
         acl_avm_to_ic
         #(
            .DATA_W(512),
            .WRITEDATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(31),
            .BYTEENA_W(64)
         )
         gmem0_DDR_avm_to_ic
         (
            // AVM avm
            .avm_enable(gmem0_DDR_mtree_avm_enable[__i]),
            .avm_read(gmem0_DDR_mtree_avm_read[__i]),
            .avm_write(gmem0_DDR_mtree_avm_write[__i]),
            .avm_address(gmem0_DDR_mtree_avm_address[__i]),
            .avm_writedata(gmem0_DDR_mtree_avm_writedata[__i]),
            .avm_byteenable(gmem0_DDR_mtree_avm_byteenable[__i]),
            .avm_waitrequest(gmem0_DDR_mtree_avm_waitrequest[__i]),
            .avm_readdata(gmem0_DDR_mtree_avm_readdata[__i]),
            .avm_readdatavalid(gmem0_DDR_mtree_avm_readdatavalid[__i]),
            .avm_burstcount(gmem0_DDR_mtree_avm_burstcount[__i]),
            .avm_writeack(gmem0_DDR_mtree_avm_writeack[__i]),
            // ICM ic
            .ic_arb_request(gmem0_DDR_icm_in_arb_request[__i]),
            .ic_arb_enable(gmem0_DDR_icm_in_arb_enable[__i]),
            .ic_arb_read(gmem0_DDR_icm_in_arb_read[__i]),
            .ic_arb_write(gmem0_DDR_icm_in_arb_write[__i]),
            .ic_arb_burstcount(gmem0_DDR_icm_in_arb_burstcount[__i]),
            .ic_arb_address(gmem0_DDR_icm_in_arb_address[__i]),
            .ic_arb_writedata(gmem0_DDR_icm_in_arb_writedata[__i]),
            .ic_arb_byteenable(gmem0_DDR_icm_in_arb_byteenable[__i]),
            .ic_arb_stall(gmem0_DDR_icm_in_arb_stall[__i]),
            .ic_wrp_ack(gmem0_DDR_icm_in_wrp_ack[__i]),
            .ic_rrp_datavalid(gmem0_DDR_icm_in_rrp_datavalid[__i]),
            .ic_rrp_data(gmem0_DDR_icm_in_rrp_data[__i])
         );

      end

      assign icm_groupgmem0_DDR_router_0_arb_request[0] = gmem0_DDR_icm_in_arb_request[1];
      assign icm_groupgmem0_DDR_router_0_arb_enable[0] = gmem0_DDR_icm_in_arb_enable[1];
      assign icm_groupgmem0_DDR_router_0_arb_read[0] = gmem0_DDR_icm_in_arb_read[1];
      assign icm_groupgmem0_DDR_router_0_arb_write[0] = gmem0_DDR_icm_in_arb_write[1];
      assign icm_groupgmem0_DDR_router_0_arb_burstcount[0] = gmem0_DDR_icm_in_arb_burstcount[1];
      assign icm_groupgmem0_DDR_router_0_arb_address[0] = gmem0_DDR_icm_in_arb_address[1];
      assign icm_groupgmem0_DDR_router_0_arb_writedata[0] = gmem0_DDR_icm_in_arb_writedata[1];
      assign icm_groupgmem0_DDR_router_0_arb_byteenable[0] = gmem0_DDR_icm_in_arb_byteenable[1];
      assign gmem0_DDR_icm_in_arb_stall[1] = icm_groupgmem0_DDR_router_0_arb_stall[0];
      assign gmem0_DDR_icm_in_wrp_ack[1] = icm_groupgmem0_DDR_router_0_wrp_ack[0];
      assign gmem0_DDR_icm_in_rrp_datavalid[1] = icm_groupgmem0_DDR_router_0_rrp_datavalid[0];
      assign gmem0_DDR_icm_in_rrp_data[1] = icm_groupgmem0_DDR_router_0_rrp_data[0];
      // INST global_ic_preroutegmem0_DDR_router_0 of C_block_form_sys_ic_18004512899439049807
      C_block_form_sys_ic_18004512899439049807 global_ic_preroutegmem0_DDR_router_0
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_groupgmem0_DDR_router_0_arb_request),
         .m_arb_enable(icm_groupgmem0_DDR_router_0_arb_enable),
         .m_arb_read(icm_groupgmem0_DDR_router_0_arb_read),
         .m_arb_write(icm_groupgmem0_DDR_router_0_arb_write),
         .m_arb_burstcount(icm_groupgmem0_DDR_router_0_arb_burstcount),
         .m_arb_address(icm_groupgmem0_DDR_router_0_arb_address),
         .m_arb_writedata(icm_groupgmem0_DDR_router_0_arb_writedata),
         .m_arb_byteenable(icm_groupgmem0_DDR_router_0_arb_byteenable),
         .m_arb_stall(icm_groupgmem0_DDR_router_0_arb_stall),
         .m_wrp_ack(icm_groupgmem0_DDR_router_0_wrp_ack),
         .m_rrp_datavalid(icm_groupgmem0_DDR_router_0_rrp_datavalid),
         .m_rrp_data(icm_groupgmem0_DDR_router_0_rrp_data),
         // ICM mout
         .mout_arb_request(gmem0_DDR_icm_preroute_arb_request[0]),
         .mout_arb_enable(gmem0_DDR_icm_preroute_arb_enable[0]),
         .mout_arb_read(gmem0_DDR_icm_preroute_arb_read[0]),
         .mout_arb_write(gmem0_DDR_icm_preroute_arb_write[0]),
         .mout_arb_burstcount(gmem0_DDR_icm_preroute_arb_burstcount[0]),
         .mout_arb_address(gmem0_DDR_icm_preroute_arb_address[0]),
         .mout_arb_writedata(gmem0_DDR_icm_preroute_arb_writedata[0]),
         .mout_arb_byteenable(gmem0_DDR_icm_preroute_arb_byteenable[0]),
         .mout_arb_id(),
         .mout_arb_stall(gmem0_DDR_icm_preroute_arb_stall[0]),
         .mout_wrp_ack(gmem0_DDR_icm_preroute_wrp_ack[0]),
         .mout_rrp_datavalid(gmem0_DDR_icm_preroute_rrp_datavalid[0]),
         .mout_rrp_data(gmem0_DDR_icm_preroute_rrp_data[0])
      );

      assign icm_groupgmem0_DDR_router_1_arb_request[0] = gmem0_DDR_icm_in_arb_request[0];
      assign icm_groupgmem0_DDR_router_1_arb_enable[0] = gmem0_DDR_icm_in_arb_enable[0];
      assign icm_groupgmem0_DDR_router_1_arb_read[0] = gmem0_DDR_icm_in_arb_read[0];
      assign icm_groupgmem0_DDR_router_1_arb_write[0] = gmem0_DDR_icm_in_arb_write[0];
      assign icm_groupgmem0_DDR_router_1_arb_burstcount[0] = gmem0_DDR_icm_in_arb_burstcount[0];
      assign icm_groupgmem0_DDR_router_1_arb_address[0] = gmem0_DDR_icm_in_arb_address[0];
      assign icm_groupgmem0_DDR_router_1_arb_writedata[0] = gmem0_DDR_icm_in_arb_writedata[0];
      assign icm_groupgmem0_DDR_router_1_arb_byteenable[0] = gmem0_DDR_icm_in_arb_byteenable[0];
      assign gmem0_DDR_icm_in_arb_stall[0] = icm_groupgmem0_DDR_router_1_arb_stall[0];
      assign gmem0_DDR_icm_in_wrp_ack[0] = icm_groupgmem0_DDR_router_1_wrp_ack[0];
      assign gmem0_DDR_icm_in_rrp_datavalid[0] = icm_groupgmem0_DDR_router_1_rrp_datavalid[0];
      assign gmem0_DDR_icm_in_rrp_data[0] = icm_groupgmem0_DDR_router_1_rrp_data[0];
      // INST global_ic_preroutegmem0_DDR_router_1 of C_block_form_sys_ic_18004512899439049807
      C_block_form_sys_ic_18004512899439049807 global_ic_preroutegmem0_DDR_router_1
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_groupgmem0_DDR_router_1_arb_request),
         .m_arb_enable(icm_groupgmem0_DDR_router_1_arb_enable),
         .m_arb_read(icm_groupgmem0_DDR_router_1_arb_read),
         .m_arb_write(icm_groupgmem0_DDR_router_1_arb_write),
         .m_arb_burstcount(icm_groupgmem0_DDR_router_1_arb_burstcount),
         .m_arb_address(icm_groupgmem0_DDR_router_1_arb_address),
         .m_arb_writedata(icm_groupgmem0_DDR_router_1_arb_writedata),
         .m_arb_byteenable(icm_groupgmem0_DDR_router_1_arb_byteenable),
         .m_arb_stall(icm_groupgmem0_DDR_router_1_arb_stall),
         .m_wrp_ack(icm_groupgmem0_DDR_router_1_wrp_ack),
         .m_rrp_datavalid(icm_groupgmem0_DDR_router_1_rrp_datavalid),
         .m_rrp_data(icm_groupgmem0_DDR_router_1_rrp_data),
         // ICM mout
         .mout_arb_request(gmem0_DDR_icm_preroute_arb_request[1]),
         .mout_arb_enable(gmem0_DDR_icm_preroute_arb_enable[1]),
         .mout_arb_read(gmem0_DDR_icm_preroute_arb_read[1]),
         .mout_arb_write(gmem0_DDR_icm_preroute_arb_write[1]),
         .mout_arb_burstcount(gmem0_DDR_icm_preroute_arb_burstcount[1]),
         .mout_arb_address(gmem0_DDR_icm_preroute_arb_address[1]),
         .mout_arb_writedata(gmem0_DDR_icm_preroute_arb_writedata[1]),
         .mout_arb_byteenable(gmem0_DDR_icm_preroute_arb_byteenable[1]),
         .mout_arb_id(),
         .mout_arb_stall(gmem0_DDR_icm_preroute_arb_stall[1]),
         .mout_wrp_ack(gmem0_DDR_icm_preroute_wrp_ack[1]),
         .mout_rrp_datavalid(gmem0_DDR_icm_preroute_rrp_datavalid[1]),
         .mout_rrp_data(gmem0_DDR_icm_preroute_rrp_data[1])
      );

      assign icm_groupgmem0_DDR_router_2_arb_request[0] = gmem0_DDR_icm_in_arb_request[2];
      assign icm_groupgmem0_DDR_router_2_arb_enable[0] = gmem0_DDR_icm_in_arb_enable[2];
      assign icm_groupgmem0_DDR_router_2_arb_read[0] = gmem0_DDR_icm_in_arb_read[2];
      assign icm_groupgmem0_DDR_router_2_arb_write[0] = gmem0_DDR_icm_in_arb_write[2];
      assign icm_groupgmem0_DDR_router_2_arb_burstcount[0] = gmem0_DDR_icm_in_arb_burstcount[2];
      assign icm_groupgmem0_DDR_router_2_arb_address[0] = gmem0_DDR_icm_in_arb_address[2];
      assign icm_groupgmem0_DDR_router_2_arb_writedata[0] = gmem0_DDR_icm_in_arb_writedata[2];
      assign icm_groupgmem0_DDR_router_2_arb_byteenable[0] = gmem0_DDR_icm_in_arb_byteenable[2];
      assign gmem0_DDR_icm_in_arb_stall[2] = icm_groupgmem0_DDR_router_2_arb_stall[0];
      assign gmem0_DDR_icm_in_wrp_ack[2] = icm_groupgmem0_DDR_router_2_wrp_ack[0];
      assign gmem0_DDR_icm_in_rrp_datavalid[2] = icm_groupgmem0_DDR_router_2_rrp_datavalid[0];
      assign gmem0_DDR_icm_in_rrp_data[2] = icm_groupgmem0_DDR_router_2_rrp_data[0];
      // INST global_ic_preroutegmem0_DDR_router_2 of C_block_form_sys_ic_10753627231702743408
      C_block_form_sys_ic_10753627231702743408 global_ic_preroutegmem0_DDR_router_2
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_groupgmem0_DDR_router_2_arb_request),
         .m_arb_enable(icm_groupgmem0_DDR_router_2_arb_enable),
         .m_arb_read(icm_groupgmem0_DDR_router_2_arb_read),
         .m_arb_write(icm_groupgmem0_DDR_router_2_arb_write),
         .m_arb_burstcount(icm_groupgmem0_DDR_router_2_arb_burstcount),
         .m_arb_address(icm_groupgmem0_DDR_router_2_arb_address),
         .m_arb_writedata(icm_groupgmem0_DDR_router_2_arb_writedata),
         .m_arb_byteenable(icm_groupgmem0_DDR_router_2_arb_byteenable),
         .m_arb_stall(icm_groupgmem0_DDR_router_2_arb_stall),
         .m_wrp_ack(icm_groupgmem0_DDR_router_2_wrp_ack),
         .m_rrp_datavalid(icm_groupgmem0_DDR_router_2_rrp_datavalid),
         .m_rrp_data(icm_groupgmem0_DDR_router_2_rrp_data),
         // ICM mout
         .mout_arb_request(gmem0_DDR_icm_preroute_arb_request[2]),
         .mout_arb_enable(gmem0_DDR_icm_preroute_arb_enable[2]),
         .mout_arb_read(gmem0_DDR_icm_preroute_arb_read[2]),
         .mout_arb_write(gmem0_DDR_icm_preroute_arb_write[2]),
         .mout_arb_burstcount(gmem0_DDR_icm_preroute_arb_burstcount[2]),
         .mout_arb_address(gmem0_DDR_icm_preroute_arb_address[2]),
         .mout_arb_writedata(gmem0_DDR_icm_preroute_arb_writedata[2]),
         .mout_arb_byteenable(gmem0_DDR_icm_preroute_arb_byteenable[2]),
         .mout_arb_id(),
         .mout_arb_stall(gmem0_DDR_icm_preroute_arb_stall[2]),
         .mout_wrp_ack(gmem0_DDR_icm_preroute_wrp_ack[2]),
         .mout_rrp_datavalid(gmem0_DDR_icm_preroute_rrp_datavalid[2]),
         .mout_rrp_data(gmem0_DDR_icm_preroute_rrp_data[2])
      );

      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:router
         logic b_arb_request [1];
         logic b_arb_enable [1];
         logic b_arb_read [1];
         logic b_arb_write [1];
         logic [4:0] b_arb_burstcount [1];
         logic [24:0] b_arb_address [1];
         logic [511:0] b_arb_writedata [1];
         logic [63:0] b_arb_byteenable [1];
         logic b_arb_stall [1];
         logic b_wrp_ack [1];
         logic b_rrp_datavalid [1];
         logic [511:0] b_rrp_data [1];
         logic bank_select;

         // INST router of acl_ic_mem_router
         acl_ic_mem_router
         #(
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0),
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .NUM_BANKS(1)
         )
         router
         (
            .clock(clock),
            .resetn(resetn),
            .bank_select(bank_select),
            // ICM m
            .m_arb_request(gmem0_DDR_icm_preroute_arb_request[__i]),
            .m_arb_enable(gmem0_DDR_icm_preroute_arb_enable[__i]),
            .m_arb_read(gmem0_DDR_icm_preroute_arb_read[__i]),
            .m_arb_write(gmem0_DDR_icm_preroute_arb_write[__i]),
            .m_arb_burstcount(gmem0_DDR_icm_preroute_arb_burstcount[__i]),
            .m_arb_address(gmem0_DDR_icm_preroute_arb_address[__i]),
            .m_arb_writedata(gmem0_DDR_icm_preroute_arb_writedata[__i]),
            .m_arb_byteenable(gmem0_DDR_icm_preroute_arb_byteenable[__i]),
            .m_arb_stall(gmem0_DDR_icm_preroute_arb_stall[__i]),
            .m_wrp_ack(gmem0_DDR_icm_preroute_wrp_ack[__i]),
            .m_rrp_datavalid(gmem0_DDR_icm_preroute_rrp_datavalid[__i]),
            .m_rrp_data(gmem0_DDR_icm_preroute_rrp_data[__i]),
            // ICM b
            .b_arb_request(b_arb_request),
            .b_arb_enable(b_arb_enable),
            .b_arb_read(b_arb_read),
            .b_arb_write(b_arb_write),
            .b_arb_burstcount(b_arb_burstcount),
            .b_arb_address(b_arb_address),
            .b_arb_writedata(b_arb_writedata),
            .b_arb_byteenable(b_arb_byteenable),
            .b_arb_stall(b_arb_stall),
            .b_wrp_ack(b_wrp_ack),
            .b_rrp_datavalid(b_rrp_datavalid),
            .b_rrp_data(b_rrp_data)
         );

         assign bank_select = 1'b1;
      end

      // INST global_icgmem0_DDR_port_0_0_rw of C_block_form_sys_ic_6838037962186751581
      C_block_form_sys_ic_6838037962186751581 global_icgmem0_DDR_port_0_0_rw
      (
         .clock(clock),
         .resetn(resetn),
         // ICM m
         .m_arb_request(icm_routedgmem0_DDR_port_0_0_rw_arb_request),
         .m_arb_enable(icm_routedgmem0_DDR_port_0_0_rw_arb_enable),
         .m_arb_read(icm_routedgmem0_DDR_port_0_0_rw_arb_read),
         .m_arb_write(icm_routedgmem0_DDR_port_0_0_rw_arb_write),
         .m_arb_burstcount(icm_routedgmem0_DDR_port_0_0_rw_arb_burstcount),
         .m_arb_address(icm_routedgmem0_DDR_port_0_0_rw_arb_address),
         .m_arb_writedata(icm_routedgmem0_DDR_port_0_0_rw_arb_writedata),
         .m_arb_byteenable(icm_routedgmem0_DDR_port_0_0_rw_arb_byteenable),
         .m_arb_stall(icm_routedgmem0_DDR_port_0_0_rw_arb_stall),
         .m_wrp_ack(icm_routedgmem0_DDR_port_0_0_rw_wrp_ack),
         .m_rrp_datavalid(icm_routedgmem0_DDR_port_0_0_rw_rrp_datavalid),
         .m_rrp_data(icm_routedgmem0_DDR_port_0_0_rw_rrp_data),
         // ICM mout
         .mout_arb_request(icm_out_0_rw_arb_request[0]),
         .mout_arb_enable(icm_out_0_rw_arb_enable[0]),
         .mout_arb_read(icm_out_0_rw_arb_read[0]),
         .mout_arb_write(icm_out_0_rw_arb_write[0]),
         .mout_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .mout_arb_address(icm_out_0_rw_arb_address[0]),
         .mout_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .mout_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .mout_arb_id(icm_out_0_rw_arb_id[0]),
         .mout_arb_stall(icm_out_0_rw_arb_stall[0]),
         .mout_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .mout_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .mout_rrp_data(icm_out_0_rw_rrp_data[0])
      );

      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:mgmem0_DDR_port_0_0_rw
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_request[__i] = router[__i].b_arb_request[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_enable[__i] = router[__i].b_arb_enable[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_read[__i] = router[__i].b_arb_read[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_write[__i] = router[__i].b_arb_write[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_burstcount[__i] = router[__i].b_arb_burstcount[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_address[__i] = router[__i].b_arb_address[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_writedata[__i] = router[__i].b_arb_writedata[0];
         assign icm_routedgmem0_DDR_port_0_0_rw_arb_byteenable[__i] = router[__i].b_arb_byteenable[0];
         assign router[__i].b_arb_stall[0] = icm_routedgmem0_DDR_port_0_0_rw_arb_stall[__i];
         assign router[__i].b_wrp_ack[0] = icm_routedgmem0_DDR_port_0_0_rw_wrp_ack[__i];
         assign router[__i].b_rrp_datavalid[0] = icm_routedgmem0_DDR_port_0_0_rw_rrp_datavalid[__i];
         assign router[__i].b_rrp_data[0] = icm_routedgmem0_DDR_port_0_0_rw_rrp_data[__i];
      end

      // INST global_out_ic_to_avmgmem0_DDR_port_0_0_rw of acl_ic_to_avm
      acl_ic_to_avm
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(31),
         .BYTEENA_W(64),
         .LATENCY(0),
         .USE_WRITE_ACK(0),
         .NO_IDLE_STALL(0),
         .ENABLE_WAITREQUEST_ALLOWANCE(0),
         .ID_W(2),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      global_out_ic_to_avmgmem0_DDR_port_0_0_rw
      (
         // ICM ic
         .ic_arb_request(icm_out_0_rw_arb_request[0]),
         .ic_arb_enable(icm_out_0_rw_arb_enable[0]),
         .ic_arb_read(icm_out_0_rw_arb_read[0]),
         .ic_arb_write(icm_out_0_rw_arb_write[0]),
         .ic_arb_burstcount(icm_out_0_rw_arb_burstcount[0]),
         .ic_arb_address(icm_out_0_rw_arb_address[0]),
         .ic_arb_writedata(icm_out_0_rw_arb_writedata[0]),
         .ic_arb_byteenable(icm_out_0_rw_arb_byteenable[0]),
         .ic_arb_id(icm_out_0_rw_arb_id[0]),
         .ic_arb_stall(icm_out_0_rw_arb_stall[0]),
         .ic_wrp_ack(icm_out_0_rw_wrp_ack[0]),
         .ic_rrp_datavalid(icm_out_0_rw_rrp_datavalid[0]),
         .ic_rrp_data(icm_out_0_rw_rrp_data[0]),
         // AVM avm
         .avm_enable(mtree_mem_gmem0_DDR_port_0_0_rw_enable),
         .avm_read(mtree_mem_gmem0_DDR_port_0_0_rw_read),
         .avm_write(mtree_mem_gmem0_DDR_port_0_0_rw_write),
         .avm_address(mtree_mem_gmem0_DDR_port_0_0_rw_address),
         .avm_writedata(mtree_mem_gmem0_DDR_port_0_0_rw_writedata),
         .avm_byteenable(mtree_mem_gmem0_DDR_port_0_0_rw_byteenable),
         .avm_waitrequest(mtree_mem_gmem0_DDR_port_0_0_rw_waitrequest),
         .avm_readdata(mtree_mem_gmem0_DDR_port_0_0_rw_readdata),
         .avm_readdatavalid(mtree_mem_gmem0_DDR_port_0_0_rw_readdatavalid),
         .avm_burstcount(mtree_mem_gmem0_DDR_port_0_0_rw_burstcount),
         .avm_writeack(mtree_mem_gmem0_DDR_port_0_0_rw_writeack),
         .clock(),
         .resetn()
      );

   end
   endgenerate

endmodule

/////////////////////////////////////////////////////////////////
// MODULE C_block_form_sys_ic_18004512899439049807
/////////////////////////////////////////////////////////////////
module C_block_form_sys_ic_18004512899439049807
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic [4:0] m_arb_burstcount [1],
   input logic [24:0] m_arb_address [1],
   input logic [511:0] m_arb_writedata [1],
   input logic [63:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [511:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic [4:0] mout_arb_burstcount,
   output logic [24:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(64),
         .RRP_FIFO_DEPTH(64),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE C_block_form_sys_ic_10753627231702743408
/////////////////////////////////////////////////////////////////
module C_block_form_sys_ic_10753627231702743408
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic [4:0] m_arb_burstcount [1],
   input logic [24:0] m_arb_address [1],
   input logic [511:0] m_arb_writedata [1],
   input logic [63:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [511:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic [4:0] mout_arb_burstcount,
   output logic [24:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(1),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(64),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(64),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(64),
         .ID_W(1),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(64),
         .RRP_FIFO_DEPTH(64),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE C_block_form_sys_ic_6838037962186751581
/////////////////////////////////////////////////////////////////
module C_block_form_sys_ic_6838037962186751581
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [3],
   input logic m_arb_enable [3],
   input logic m_arb_read [3],
   input logic m_arb_write [3],
   input logic [4:0] m_arb_burstcount [3],
   input logic [24:0] m_arb_address [3],
   input logic [511:0] m_arb_writedata [3],
   input logic [63:0] m_arb_byteenable [3],
   output logic m_arb_stall [3],
   output logic m_wrp_ack [3],
   output logic m_rrp_datavalid [3],
   output logic [511:0] m_rrp_data [3],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic [4:0] mout_arb_burstcount,
   output logic [24:0] mout_arb_address,
   output logic [511:0] mout_arb_writedata,
   output logic [63:0] mout_arb_byteenable,
   output logic [1:0] mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [511:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 3; __i = __i + 1 )
      begin:m
         logic [1:0] id;
         acl_ic_master_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(2)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(2)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(512),
            .ID_W(2)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(2),
            .NUM_READ_MASTERS(3),
            .NUM_WRITE_MASTERS(3),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(64),
         .ID_W(2)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(64),
         .ID_W(2)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(2)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(512),
         .ID_W(2)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(512),
         .BURSTCOUNT_W(5),
         .ADDRESS_W(25),
         .BYTEENA_W(64),
         .ID_W(2),
         .NUM_READ_MASTERS(3),
         .NUM_WRITE_MASTERS(3),
         .PIPELINE_RETURN_PATHS(1),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(64),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(0),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
      assign m[1].wrp_intf.ack = s.wrp_intf.ack;
      assign m[1].wrp_intf.id = s.wrp_intf.id;
      assign m[2].wrp_intf.ack = s.wrp_intf.ack;
      assign m[2].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
      assign m[1].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[1].rrp_intf.data = s.rrp_intf.data;
      assign m[1].rrp_intf.id = s.rrp_intf.id;
      assign m[2].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[2].rrp_intf.data = s.rrp_intf.data;
      assign m[2].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   generate
      for( __i = 0; __i < 2; __i = __i + 1 )
      begin:a
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m0_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(2)
         ) m1_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(2)
         ) mout_intf();

         // INST a of acl_arb2
         acl_arb2
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(2),
            .PIPELINE("none"),
            .KEEP_LAST_GRANT(1),
            .NO_STALL_NETWORK(0),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         a
         (
            .clock(clock),
            .resetn(resetn),
            .m0_intf(m0_intf),
            .m1_intf(m1_intf),
            .mout_intf(mout_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 5; __i = __i + 1 )
      begin:dp
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(2)
         ) out_intf();

         // INST dp of acl_arb_pipeline_reg
         acl_arb_pipeline_reg
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(2),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         dp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:sp
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(2)
         ) in_intf();
         acl_arb_intf
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(2)
         ) out_intf();

         // INST sp of acl_arb_staging_reg
         acl_arb_staging_reg
         #(
            .DATA_W(512),
            .BURSTCOUNT_W(5),
            .ADDRESS_W(25),
            .BYTEENA_W(64),
            .ID_W(2),
            .ASYNC_RESET(1),
            .SYNCHRONIZE_RESET(0)
         )
         sp
         (
            .clock(clock),
            .resetn(resetn),
            .in_intf(in_intf),
            .out_intf(out_intf)
         );

      end

   endgenerate

   assign mout_arb_request = dp[0].out_intf.req.request;
   assign mout_arb_enable = dp[0].out_intf.req.enable;
   assign mout_arb_read = dp[0].out_intf.req.read;
   assign mout_arb_write = dp[0].out_intf.req.write;
   assign mout_arb_burstcount = dp[0].out_intf.req.burstcount;
   assign mout_arb_address = dp[0].out_intf.req.address;
   assign mout_arb_writedata = dp[0].out_intf.req.writedata;
   assign mout_arb_byteenable = dp[0].out_intf.req.byteenable;
   assign mout_arb_id = dp[0].out_intf.req.id;
   assign dp[0].out_intf.stall = mout_arb_stall;
   assign dp[0].in_intf.req = sp[0].out_intf.req;
   assign sp[0].out_intf.stall = dp[0].in_intf.stall;
   assign sp[0].in_intf.req = s.out_arb_intf.req;
   assign s.out_arb_intf.stall = sp[0].in_intf.stall;
   assign s.in_arb_intf.req = dp[1].out_intf.req;
   assign dp[1].out_intf.stall = s.in_arb_intf.stall;
   assign dp[1].in_intf.req = a[1].mout_intf.req;
   assign a[1].mout_intf.stall = dp[1].in_intf.stall;
   assign a[1].m0_intf.req = a[0].mout_intf.req;
   assign a[0].mout_intf.stall = a[1].m0_intf.stall;
   assign a[1].m1_intf.req = dp[2].out_intf.req;
   assign dp[2].out_intf.stall = a[1].m1_intf.stall;
   assign a[0].m0_intf.req = dp[3].out_intf.req;
   assign dp[3].out_intf.stall = a[0].m0_intf.stall;
   assign a[0].m1_intf.req = dp[4].out_intf.req;
   assign dp[4].out_intf.stall = a[0].m1_intf.stall;
   assign dp[2].in_intf.req = m[2].arb_intf.req;
   assign m[2].arb_intf.stall = dp[2].in_intf.stall;
   assign dp[3].in_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = dp[3].in_intf.stall;
   assign dp[4].in_intf.req = m[1].arb_intf.req;
   assign m[1].arb_intf.stall = dp[4].in_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE C_block_form_sys_ic_622775450004236210
/////////////////////////////////////////////////////////////////
module C_block_form_sys_ic_622775450004236210
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [8:0] m_arb_address [1],
   input logic [1023:0] m_arb_writedata [1],
   input logic [127:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [1023:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [8:0] mout_arb_address,
   output logic [1023:0] mout_arb_writedata,
   output logic [127:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [1023:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(1024),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(128),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(1024),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(128),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(1024),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(1024),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(128),
            .ID_W(1),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(1024),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(128),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(1024),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(128),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(1024),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(1024),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(128),
         .ID_W(1),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE C_block_form_sys_ic_7252278650241567440
/////////////////////////////////////////////////////////////////
module C_block_form_sys_ic_7252278650241567440
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [8:0] m_arb_address [1],
   input logic [1023:0] m_arb_writedata [1],
   input logic [127:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [1023:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [8:0] mout_arb_address,
   output logic [1023:0] mout_arb_writedata,
   output logic [127:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [1023:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(1024),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(128),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(1024),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(128),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(1024),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(1024),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(9),
            .BYTEENA_W(128),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(1024),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(128),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(1024),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(128),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(1024),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(1024),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(9),
         .BYTEENA_W(128),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(3),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE C_block_form_sys_ic_3054207334098509163
/////////////////////////////////////////////////////////////////
module C_block_form_sys_ic_3054207334098509163
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [13:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [13:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_MASTERS(0),
            .NUM_WRITE_MASTERS(1),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(14),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(14),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(14),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_MASTERS(0),
         .NUM_WRITE_MASTERS(1),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
      assign m[0].wrp_intf.ack = s.wrp_intf.ack;
      assign m[0].wrp_intf.id = s.wrp_intf.id;
   end
   endgenerate

   generate
   begin:rrp
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE C_block_form_sys_ic_11249442177670958757
/////////////////////////////////////////////////////////////////
module C_block_form_sys_ic_11249442177670958757
(
   input logic clock,
   input logic resetn,
   // ICM m
   input logic m_arb_request [1],
   input logic m_arb_enable [1],
   input logic m_arb_read [1],
   input logic m_arb_write [1],
   input logic m_arb_burstcount [1],
   input logic [13:0] m_arb_address [1],
   input logic [31:0] m_arb_writedata [1],
   input logic [3:0] m_arb_byteenable [1],
   output logic m_arb_stall [1],
   output logic m_wrp_ack [1],
   output logic m_rrp_datavalid [1],
   output logic [31:0] m_rrp_data [1],
   // ICM mout
   output logic mout_arb_request,
   output logic mout_arb_enable,
   output logic mout_arb_read,
   output logic mout_arb_write,
   output logic mout_arb_burstcount,
   output logic [13:0] mout_arb_address,
   output logic [31:0] mout_arb_writedata,
   output logic [3:0] mout_arb_byteenable,
   output logic mout_arb_id,
   input logic mout_arb_stall,
   input logic mout_wrp_ack,
   input logic mout_rrp_datavalid,
   input logic [31:0] mout_rrp_data
);
   genvar __i;
   generate
      for( __i = 0; __i < 1; __i = __i + 1 )
      begin:m
         logic id;
         acl_ic_master_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1)
         ) m_intf();
         acl_arb_intf
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1)
         ) arb_intf();
         acl_ic_wrp_intf
         #(
            .ID_W(1)
         ) wrp_intf();
         acl_ic_rrp_intf
         #(
            .DATA_W(32),
            .ID_W(1)
         ) rrp_intf();

         assign id = __i;
         // INST m_endp of acl_ic_master_endpoint
         acl_ic_master_endpoint
         #(
            .DATA_W(32),
            .BURSTCOUNT_W(1),
            .ADDRESS_W(14),
            .BYTEENA_W(4),
            .ID_W(1),
            .NUM_READ_MASTERS(1),
            .NUM_WRITE_MASTERS(0),
            .ID(__i)
         )
         m_endp
         (
            .clock(clock),
            .resetn(resetn),
            .m_intf(m_intf),
            .arb_intf(arb_intf),
            .wrp_intf(wrp_intf),
            .rrp_intf(rrp_intf)
         );

         assign m_intf.arb.req.request = m_arb_request[__i];
         assign m_intf.arb.req.enable = m_arb_enable[__i];
         assign m_intf.arb.req.read = m_arb_read[__i];
         assign m_intf.arb.req.write = m_arb_write[__i];
         assign m_intf.arb.req.burstcount = m_arb_burstcount[__i];
         assign m_intf.arb.req.address = m_arb_address[__i];
         assign m_intf.arb.req.writedata = m_arb_writedata[__i];
         assign m_intf.arb.req.byteenable = m_arb_byteenable[__i];
         assign m_arb_stall[__i] = m_intf.arb.stall;
         assign m_wrp_ack[__i] = m_intf.wrp.ack;
         assign m_rrp_datavalid[__i] = m_intf.rrp.datavalid;
         assign m_rrp_data[__i] = m_intf.rrp.data;
         assign m_intf.arb.req.id = id;
      end

   endgenerate

   generate
   begin:s
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(14),
         .BYTEENA_W(4),
         .ID_W(1)
      ) in_arb_intf();
      acl_arb_intf
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(14),
         .BYTEENA_W(4),
         .ID_W(1)
      ) out_arb_intf();
      acl_ic_wrp_intf
      #(
         .ID_W(1)
      ) wrp_intf();
      acl_ic_rrp_intf
      #(
         .DATA_W(32),
         .ID_W(1)
      ) rrp_intf();

      // INST s_endp of acl_ic_slave_endpoint
      acl_ic_slave_endpoint
      #(
         .DATA_W(32),
         .BURSTCOUNT_W(1),
         .ADDRESS_W(14),
         .BYTEENA_W(4),
         .ID_W(1),
         .NUM_READ_MASTERS(1),
         .NUM_WRITE_MASTERS(0),
         .PIPELINE_RETURN_PATHS(0),
         .WRP_FIFO_DEPTH(0),
         .RRP_FIFO_DEPTH(0),
         .RRP_USE_LL_FIFO(1),
         .SLAVE_FIXED_LATENCY(4),
         .SEPARATE_READ_WRITE_STALLS(0),
         .ASYNC_RESET(1),
         .SYNCHRONIZE_RESET(0)
      )
      s_endp
      (
         .clock(clock),
         .resetn(resetn),
         .m_intf(in_arb_intf),
         .s_intf(out_arb_intf),
         .s_readdatavalid(mout_rrp_datavalid),
         .s_readdata(mout_rrp_data),
         .s_writeack(mout_wrp_ack),
         .wrp_intf(wrp_intf),
         .rrp_intf(rrp_intf)
      );

   end
   endgenerate

   generate
   begin:wrp
   end
   endgenerate

   generate
   begin:rrp
      assign m[0].rrp_intf.datavalid = s.rrp_intf.datavalid;
      assign m[0].rrp_intf.data = s.rrp_intf.data;
      assign m[0].rrp_intf.id = s.rrp_intf.id;
   end
   endgenerate

   assign mout_arb_request = s.out_arb_intf.req.request;
   assign mout_arb_enable = s.out_arb_intf.req.enable;
   assign mout_arb_read = s.out_arb_intf.req.read;
   assign mout_arb_write = s.out_arb_intf.req.write;
   assign mout_arb_burstcount = s.out_arb_intf.req.burstcount;
   assign mout_arb_address = s.out_arb_intf.req.address;
   assign mout_arb_writedata = s.out_arb_intf.req.writedata;
   assign mout_arb_byteenable = s.out_arb_intf.req.byteenable;
   assign mout_arb_id = s.out_arb_intf.req.id;
   assign s.out_arb_intf.stall = mout_arb_stall;
   assign s.in_arb_intf.req = m[0].arb_intf.req;
   assign m[0].arb_intf.stall = s.in_arb_intf.stall;
endmodule

/////////////////////////////////////////////////////////////////
// MODULE cra_ring_wrapper
/////////////////////////////////////////////////////////////////
module cra_ring_wrapper
(
   input logic clock,
   input logic resetn,
   // AVS cra_ring_root_avs
   input logic cra_ring_root_avs_enable,
   input logic cra_ring_root_avs_read,
   input logic cra_ring_root_avs_write,
   input logic [6:0] cra_ring_root_avs_address,
   input logic [63:0] cra_ring_root_avs_writedata,
   input logic [7:0] cra_ring_root_avs_byteenable,
   output logic cra_ring_root_avs_waitrequest,
   output logic [63:0] cra_ring_root_avs_readdata,
   output logic cra_ring_root_avs_readdatavalid,
   // AVM cra_ring_avm_0
   output logic cra_ring_avm_0_enable,
   output logic cra_ring_avm_0_read,
   output logic cra_ring_avm_0_write,
   output logic [4:0] cra_ring_avm_0_address,
   output logic [63:0] cra_ring_avm_0_writedata,
   output logic [7:0] cra_ring_avm_0_byteenable,
   input logic [63:0] cra_ring_avm_0_readdata,
   input logic cra_ring_avm_0_readdatavalid,
   output logic cra_ring_avm_0_burstcount
);
   logic cra_ring_root_ring_in_wire_read;
   logic cra_ring_root_ring_in_wire_write;
   logic [4:0] cra_ring_root_ring_in_wire_addr;
   logic [63:0] cra_ring_root_ring_in_wire_data;
   logic [7:0] cra_ring_root_ring_in_wire_byteena;
   logic cra_ring_root_ring_in_wire_datavalid;
   logic cra_ring_root_ring_out_wire_read;
   logic cra_ring_root_ring_out_wire_write;
   logic [6:0] cra_ring_root_ring_out_wire_addr;
   logic [63:0] cra_ring_root_ring_out_wire_data;
   logic [7:0] cra_ring_root_ring_out_wire_byteena;
   logic cra_ring_root_ring_out_wire_datavalid;
   logic cra_ring_rom_avm_enable;
   logic cra_ring_rom_avm_read;
   logic cra_ring_rom_avm_write;
   logic [5:0] cra_ring_rom_avm_address;
   logic [63:0] cra_ring_rom_avm_writedata;
   logic [7:0] cra_ring_rom_avm_byteenable;
   logic [63:0] cra_ring_rom_avm_readdata;
   logic cra_ring_rom_avm_readdatavalid;
   logic cra_ring_rom_avm_burstcount;
   logic cra_ring_rom_ring_out_wire_read;
   logic cra_ring_rom_ring_out_wire_write;
   logic [4:0] cra_ring_rom_ring_out_wire_addr;
   logic [63:0] cra_ring_rom_ring_out_wire_data;
   logic [7:0] cra_ring_rom_ring_out_wire_byteena;
   logic cra_ring_rom_ring_out_wire_datavalid;
   logic cra_ring_node_ring_out_wire_0_read;
   logic cra_ring_node_ring_out_wire_0_write;
   logic [4:0] cra_ring_node_ring_out_wire_0_addr;
   logic [63:0] cra_ring_node_ring_out_wire_0_data;
   logic [7:0] cra_ring_node_ring_out_wire_0_byteena;
   logic cra_ring_node_ring_out_wire_0_datavalid;

   // INST cra_root of cra_ring_root
   cra_ring_root
   #(
      .ADDR_W(5),
      .ALLOW_HIGH_SPEED_FIFO_USAGE(0),
      .ASYNC_RESET(1),
      .DATA_W(64),
      .ID_W(0),
      .ROM_ENABLE(1),
      .ROM_EXT_W(1),
      .SLAVE_PORT_WAITREQUEST_ALLOWANCE(0),
      .SYNCHRONIZE_RESET(0)
   )
   cra_root
   (
      // AVS avs
      .avs_enable(cra_ring_root_avs_enable),
      .avs_read(cra_ring_root_avs_read),
      .avs_write(cra_ring_root_avs_write),
      .avs_addr(cra_ring_root_avs_address),
      .avs_writedata(cra_ring_root_avs_writedata),
      .avs_byteena(cra_ring_root_avs_byteenable),
      .avs_waitrequest(cra_ring_root_avs_waitrequest),
      .avs_readdata(cra_ring_root_avs_readdata),
      .avs_readdatavalid(cra_ring_root_avs_readdatavalid),
      // AVS ri
      .ri_read(cra_ring_node_ring_out_wire_0_read),
      .ri_write(cra_ring_node_ring_out_wire_0_write),
      .ri_addr(cra_ring_node_ring_out_wire_0_addr),
      .ri_data(cra_ring_node_ring_out_wire_0_data),
      .ri_byteena(cra_ring_node_ring_out_wire_0_byteena),
      .ri_datavalid(cra_ring_node_ring_out_wire_0_datavalid),
      // AVS ro
      .ro_read(cra_ring_root_ring_out_wire_read),
      .ro_write(cra_ring_root_ring_out_wire_write),
      .ro_addr(cra_ring_root_ring_out_wire_addr),
      .ro_data(cra_ring_root_ring_out_wire_data),
      .ro_byteena(cra_ring_root_ring_out_wire_byteena),
      .ro_datavalid(cra_ring_root_ring_out_wire_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST cra_ring_rom of cra_ring_rom
   cra_ring_rom
   #(
      .ASYNC_RESET(1),
      .DATA_W(64),
      .ID_W(0),
      .RING_ADDR_W(5),
      .ROM_EXT_W(1),
      .ROM_W(6),
      .SYNCHRONIZE_RESET(0)
   )
   cra_ring_rom
   (
      // AVM avm
      .avm_enable(cra_ring_rom_avm_enable),
      .avm_read(cra_ring_rom_avm_read),
      .avm_write(cra_ring_rom_avm_write),
      .avm_addr(cra_ring_rom_avm_address),
      .avm_writedata(cra_ring_rom_avm_writedata),
      .avm_byteenable(cra_ring_rom_avm_byteenable),
      .avm_readdata(cra_ring_rom_avm_readdata),
      .avm_readdatavalid(cra_ring_rom_avm_readdatavalid),
      .avm_burstcount(cra_ring_rom_avm_burstcount),
      // AVS ri
      .ri_read(cra_ring_root_ring_out_wire_read),
      .ri_write(cra_ring_root_ring_out_wire_write),
      .ri_addr(cra_ring_root_ring_out_wire_addr),
      .ri_data(cra_ring_root_ring_out_wire_data),
      .ri_byteena(cra_ring_root_ring_out_wire_byteena),
      .ri_datavalid(cra_ring_root_ring_out_wire_datavalid),
      // AVS ro
      .ro_read(cra_ring_rom_ring_out_wire_read),
      .ro_write(cra_ring_rom_ring_out_wire_write),
      .ro_addr(cra_ring_rom_ring_out_wire_addr),
      .ro_data(cra_ring_rom_ring_out_wire_data),
      .ro_byteena(cra_ring_rom_ring_out_wire_byteena),
      .ro_datavalid(cra_ring_rom_ring_out_wire_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST cra_ring_node_avm_wire_0_cra_ring_inst_0 of cra_ring_node
   cra_ring_node
   #(
      .ASYNC_RESET(1),
      .CRA_ADDR_W(5),
      .DATA_W(64),
      .ID(0),
      .ID_W(0),
      .RING_ADDR_W(5),
      .SYNCHRONIZE_RESET(0)
   )
   cra_ring_node_avm_wire_0_cra_ring_inst_0
   (
      // AVM avm
      .avm_enable(cra_ring_avm_0_enable),
      .avm_read(cra_ring_avm_0_read),
      .avm_write(cra_ring_avm_0_write),
      .avm_addr(cra_ring_avm_0_address),
      .avm_writedata(cra_ring_avm_0_writedata),
      .avm_byteena(cra_ring_avm_0_byteenable),
      .avm_readdata(cra_ring_avm_0_readdata),
      .avm_readdatavalid(cra_ring_avm_0_readdatavalid),
      .avm_burstcount(cra_ring_avm_0_burstcount),
      // AVS ri
      .ri_read(cra_ring_rom_ring_out_wire_read),
      .ri_write(cra_ring_rom_ring_out_wire_write),
      .ri_addr(cra_ring_rom_ring_out_wire_addr),
      .ri_data(cra_ring_rom_ring_out_wire_data),
      .ri_byteena(cra_ring_rom_ring_out_wire_byteena),
      .ri_datavalid(cra_ring_rom_ring_out_wire_datavalid),
      // AVS ro
      .ro_read(cra_ring_node_ring_out_wire_0_read),
      .ro_write(cra_ring_node_ring_out_wire_0_write),
      .ro_addr(cra_ring_node_ring_out_wire_0_addr),
      .ro_data(cra_ring_node_ring_out_wire_0_data),
      .ro_byteena(cra_ring_node_ring_out_wire_0_byteena),
      .ro_datavalid(cra_ring_node_ring_out_wire_0_datavalid),
      .clk(clock),
      .rst_n(resetn)
   );

   // INST sys_description_rom of acl_rom_module
   acl_rom_module
   #(
      .ADDRESS_WIDTH(6),
      .ASYNC_RESET(1),
      .DATA_WIDTH(64),
      .FAMILY("Arria 10"),
      .INIT_FILE("sys_description.hex"),
      .SYNCHRONIZE_RESET(0)
   )
   sys_description_rom
   (
      .clk(clock),
      .rst_n(resetn),
      .read(cra_ring_rom_avm_read),
      .readdatavalid(cra_ring_rom_avm_readdatavalid),
      .address(cra_ring_rom_avm_address),
      .readdata(cra_ring_rom_avm_readdata)
   );

endmodule

